				;file D:\HOLTEK\C900\C960 Project\Chris負責彙整上網方案\WAS_C2006(HT66FW2230無線充電)\11_Tech_C2006\COD_C2006-A\LibWPTX2230v302.asm
				;1	;*******************************************************************************************
				;2	;*****	                               History	                                       *****
				;3	;*******************************************************************************************
				;4	;V1.0 - WPC Qi Certification Source Code by Edward in HOLTEK Semiconductor Inc. on 2014/12/25
				;5	
				;6	
				;7	
				;8	;*******************************************************************************************
				;9	;*****	                          IC Application Information                           *****
				;10	;*******************************************************************************************
				;11	;;   	Work Voltage 			: 5.0V
				;12	;;      Osc. Type 			: HXT 20MHz	
				;13	;;      MCU Type			: HT66FW2230
				;14	;;                      		: 4KB (4096 *16) Program ROM
				;15	;;                      		: 128 ( 128 * 8) Bytes Data RAM
				;16	;;			 		:  64 (  64 * 8) Bytes EEPROM
				;17	;; 	Package 			: 28-Pin SSOP
				;18	;;
				;19	;;	HT66FW2230 Pin Application	:
				;20	;;
				;21	;;				                   +---------+      
				;22	;;				               AX  |1      28| AN  
				;23	;;				               CP  |2      27| COMM0  
				;24	;;				               CN  |3      26| AN7  
				;25	;;				               CX  |4      25| PA5  
				;26	;;				           OCDSDA  |5      24| PA4  
				;27	;;				           OCDSCK  |6      23| AN3  
				;28	;;				              VSS  |7      22| OCP 
				;29	;;				              VDD  |8      21| PLLCOM
				;30	;;				            PWM03  |9      20| AVSS 
				;31	;;				            PWM02  |10     19| AVDD  
				;32	;;				            PWM01  |11     18| OSC1  
				;33	;;				            PWM00  |12     17| OSC2  
				;34	;;				       (LED_G)PB2  |13     16| INT1  
				;35	;;				       (LED_R)PB3  |14     15| DEMO  
				;36	;;				                   +---------+      
				;37	;;
				;38	
				;39	
				;40	;*******************************************************************************************
				;41	;*****	                           Including File	                               *****
				;42	;*******************************************************************************************
				;43	#INCLUDE 	HT66FW2230.inc
				;44	#INCLUDE	TxUserDEF2230v302.inc	
				;45	
				;46	
				;47	;*******************************************************************************************
				;48	;*****	                        Function / Parameter Claim	                       *****
				;49	;*******************************************************************************************
				;50	EXTERN		ReciPackageDataUnitPreee1		:	near
				;51	EXTERN		ReciPackageDataUnit			:	near
				;52	EXTERN		Delay1					:	near
				;53	EXTERN		Delay3					:	near
				;54	EXTERN		DelayTimer                              :	near
				;55	EXTERN		TimeOutTimer				:	near
				;56	EXTERN		SetTimer1				:	near
				;57	EXTERN		SetTimer2                               :	near
				;58	EXTERN		PT_PIDandPWM				:	near
				;59	EXTERN		DemoVI1I2Select                         :	near
				;60	EXTERN		DemoVI1I2swEN                           :	near
				;61	EXTERN		DemoVI1I2swDisEN			:	near
				;62	EXTERN		CLRMath					:	near
				;63	EXTERN		SignedSub_8Bit                          :	near
				;64	EXTERN		SignedAdd_16Bit                         :	near
				;65	EXTERN		SignedMul_16Bit                         :	near
				;66	EXTERN		SignedSub_24Bit			        :	near
				;67	EXTERN		SignedAdd_24Bit			        :	near
				;68	EXTERN		SignedMul_24Bit			        :	near
				;69	EXTERN		SignedDiv_24Bit			        :	near
				;70	EXTERN		sum_ADC_value				:	near
				;71	EXTERN		avg_ADC_value				:	near
				;72	EXTERN		DetectVin				:	near
				;73	EXTERN		ObjectDetection                         :	near
				;74	EXTERN		ObjectDetectLeave                       :	near
				;75	EXTERN		ObjDetLeaveIni                          :	near
				;76	EXTERN		ObjDetLeavePowe                         :	near
				;77	EXTERN		ObjDetLeaveDetect                       :	near
				;78	EXTERN		ObjDetLeaveCheck                        :	near
				;79	EXTERN		PT_DecodeCommand                        :	near
				;80	EXTERN		EndPowCMD0x02Decode                     :	near
				;81	EXTERN		PowContlHoldCMD0x06Decode               :	near
				;82	EXTERN		ConfigCMD0x51Decode			:	near
				;83	EXTERN		PID_SenPriCoilCurrWay65Double           :	near
				;84	EXTERN		PID_Isen65_SUBIsen                      :	near
				;85	EXTERN		PID_Isen65AvgTwo			:	near
				;86	EXTERN		ExtractPacData				:	near
				;87	EXTERN		PT_PIDCE4				:	near
				;88	EXTERN		INTCheck				:	near
				;89	EXTERN		INTTimer				:	near
				;90	EXTERN		PT_ReceiPowerCNT			:	near
				;91	EXTERN		PLLCompare				:	near
				;92	EXTERN		Sensoring10_8                           :	near
				;93	EXTERN		PreCarry                                :	near
				;94	EXTERN		PostCarry                               :	near
				;95	EXTERN		DemoCLR                                 :	near
				;96	EXTERN		ADCData 				:	near
				;97	
				;98	EXTERN		a_ParPLLFH			        :	byte
				;99	EXTERN		a_ParPLLFL			        :	byte
				;100	EXTERN		fg_BaseTimeCTM			        :	bit
				;101	EXTERN		fg_MutipleTimeHflagCTM		        :	bit
				;102	EXTERN		a_MutipleTimeLCTM		        :	byte
				;103	EXTERN		a_MutipleTimeHCTM		        :	byte
				;104	EXTERN		fg_BaseTimeSTM			        :	bit
				;105	EXTERN		fg_MutipleTimeHflagSTM		        :	bit
				;106	EXTERN		fg_TimeOut			        :	bit
				;107	EXTERN		a_MutipleTimeLSTM		        :	byte
				;108	EXTERN		a_MutipleTimeHSTM		        :	byte
				;109	EXTERN		fg_FlagDemo			        :	bit
				;110	EXTERN		a_DemoV_I1_I2			        :	byte
				;111	EXTERN		fg_INT1				        :	bit
				;112	EXTERN		fg_INT0				        :	bit
				;113	EXTERN		fg_DUDataStart			        :	bit
				;114	EXTERN		fg_DU				        :	bit
				;115	EXTERN		fg_StartBit			        :	bit
				;116	EXTERN		fg_ParityBit			        :	bit
				;117	EXTERN		fg_ParityErr			        :	bit
				;118	EXTERN		fg_StopBit			        :	bit
				;119	EXTERN		fg_WaitDataOut			        :	bit
				;120	EXTERN		fg_StopBitPre			        :	bit
				;121	EXTERN		fg_DataFirst			        :	bit
				;122	EXTERN		fg_Preamble			        :	bit
				;123	EXTERN		fg_ChecksumBit			        :	bit
				;124	EXTERN		fg_PacDataOK			        :	bit
				;125	EXTERN		fg_StartReci			        :	bit
				;126	EXTERN		fg_DataByteCNTFull		        :	bit
				;127	EXTERN		a_StatusCntInt1			        :	byte
				;128	EXTERN		a_DataOUTtemp			        :	byte
				;129	EXTERN		a_DataParityCNT			        :	byte
				;130	EXTERN		a_TimeOutCNT			        :	byte
				;131	EXTERN		a_DataOUT			        :	byte
				;132	EXTERN		a_DataCNT			        :	byte
				;133	EXTERN		a_Preamble4BitCNT		        :	byte
				;134	EXTERN		a_Preamble25BitCNT		        :	byte
				;135	EXTERN		a_NoToggleCNT			        :	byte
				;136	EXTERN		a_DataByteCNT			        :	byte
				;137	EXTERN		a_DataByteCNTtemp		        :	byte
				;138	EXTERN		a_AddrDataOUT			        :	byte
				;139	EXTERN		a_HeadMessageCNT		        :	byte
				;140	EXTERN		a_ContlDataMessag		        :	byte
				;141	EXTERN		a_DataHeader			        :	byte
				;142	EXTERN		a_DataMessageB0			        :	byte
				;143	EXTERN		a_DataMessageB1             	        :	byte
				;144	EXTERN		a_DataMessageB2             	        :	byte
				;145	EXTERN		a_DataMessageB3             	        :	byte
				;146	EXTERN		a_DataMessageB4             	        :	byte
				;147	EXTERN		a_DataMessageB5             	        :	byte
				;148	EXTERN		a_DataMessageB6             	        :	byte
				;149	EXTERN		a_DataMessageB7             	        :	byte
				;150	EXTERN		a_DataChecksum			        :	byte
				;151	EXTERN		a_XORchecksum			        :	byte
				;152	EXTERN		fg_INT_AD			        :	bit
				;153	EXTERN		a_ADRHbuffer			        :	byte
				;154	EXTERN		a_ADRLbuffer			        :	byte
				;155	EXTERN		a_com1				        :	byte
				;156	EXTERN		a_com2				        :	byte
				;157	EXTERN		a_com3				        :	byte
				;158	EXTERN		a_com4				        :	byte
				;159	EXTERN		a_data0				        :	byte
				;160	EXTERN		a_data1				        :	byte
				;161	EXTERN		a_data2				        :	byte
				;162	EXTERN		a_data3				        :	byte
				;163	EXTERN		a_data4				        :	byte
				;164	EXTERN		a_data5				        :	byte
				;165	EXTERN		a_data6				        :	byte
				;166	EXTERN		a_data7				        :	byte
				;167	EXTERN		a_to0				        :	byte
				;168	EXTERN		a_to1				        :	byte
				;169	EXTERN		a_to2                                   :	byte
				;170	EXTERN		a_to3                                   :	byte
				;171	EXTERN		a_to4                                   :	byte
				;172	EXTERN		a_to5                                   :	byte
				;173	EXTERN		a_to6                                   :	byte
				;174	EXTERN		a_to7                                   :	byte
				;175	EXTERN		a_count0			        :	byte
				;176	EXTERN		a_temp2                                 :	byte
				;177	EXTERN		a_temp1                                 :	byte
				;178	EXTERN		a_temp0                                 :	byte
				;179	EXTERN		fg_PIDIni			        :	bit
				;180	EXTERN		fg_start			        :	bit
				;181	EXTERN		fg_IterationStart		        :	bit
				;182	EXTERN		fg_FODTemp60                            :	bit
				;183	EXTERN		a_IL              	   	        :	byte
				;184	EXTERN		a_IM0                 		        :	byte
				;185	EXTERN		a_IM1                 		        :	byte
				;186	EXTERN		a_VL				        :	byte
				;187	EXTERN		a_VM0				        :	byte
				;188	EXTERN		a_VM1				        :	byte
				;189	EXTERN		a_EL				        :	byte
				;190	EXTERN		a_EM				        :	byte
				;191	EXTERN		a_EH				        :	byte
				;192	EXTERN		a_Sv				        :	byte
				;193	EXTERN		a_LoopIteration			        :	byte
				;194	EXTERN		fg_0x02PowDownChargeComplete            :	bit
				;195	EXTERN		fg_0x02PowDownReconfigure               :	bit
				;196	EXTERN		fg_0x02PowDownNoResponse                :	bit
				;197	EXTERN		fg_ExIdet0x81			        :	bit
				;198	EXTERN		fg_Idet				        :	bit
				;199	EXTERN		fg_Tdelay			        :	bit
				;200	EXTERN		fg_0x04OutReceiPowTime		        :	bit
				;201	EXTERN		fg_0x51PowClass			        :	bit
				;202	EXTERN		fg_0x51NonPID			        :	bit
				;203	EXTERN		fg_EndPowDown			        :	bit
				;204	EXTERN		fg_CEinput			        :	bit
				;205	EXTERN		fg_0x04ReceiPowCNTHflag		        :	bit
				;206	EXTERN		fg_PSVin			        :	bit
				;207	EXTERN		fg_PCH0x06Abnor			        :	bit
				;208	EXTERN		fg_RecodeRPpre			        :	bit
				;209	EXTERN		fg_RPNoStable			        :	bit
				;210	EXTERN		fg_adc_avg_cnt			        :	bit
				;211	EXTERN		fg_RXCoilD			        :	bit
				;212	EXTERN		fg_NoChange			        :	bit
				;213	EXTERN		fg_IsenSmall			        :	bit
				;214	EXTERN		fg_IsenBig			        :	bit
				;215	EXTERN		fg_WaitNextCE			        :	bit
				;216	EXTERN		fg_CEThr			        :	bit
				;217	EXTERN		fg_CEThrPana			        :	bit
				;218	EXTERN		fg_IsenFirst			        :	bit
				;219	EXTERN		fg_PLLDown			        :	bit
				;220	EXTERN		fg_PLLPana			        :	bit
				;221	EXTERN		fg_DetectVin			        :	bit
				;222	EXTERN		fg_VinLow			        :	bit
				;223	EXTERN		fg_PLL205			        :	bit
				;224	EXTERN		fg_DTCPR			        :	bit
				;225	EXTERN		fg_DTCPRmin			        :	bit
				;226	EXTERN		fg_PLLThr			        :	bit
				;227	EXTERN		fg_Ping				        :	bit
				;228	EXTERN		fg_FODEfficLow			        :	bit
				;229	EXTERN		fg_ReCordTemp			        :	bit
				;230	EXTERN		fg_CalTempTimeHigh		        :	bit
				;231	EXTERN		fg_PowOver5wLEDsw		        :	bit
				;232	EXTERN		fg_DemoDetect			        :	bit
				;233	EXTERN		fg_DemoDetectTimeOut			:	bit		
				;234	EXTERN          fg_RxTI					:	bit
				;235	EXTERN          fg_RxPana			        :	bit
				;236	EXTERN		a_SSP0x01_B0			        :	byte
				;237	EXTERN		a_CSP0x05_B0			        :	byte
				;238	EXTERN		a_PCHO0x06_B0			        :	byte
				;239	EXTERN		a_Config0x51_B0			        :	byte
				;240	EXTERN		a_Config0x51_B2                         :	byte
				;241	EXTERN		a_Config0x51_B3                         :	byte
				;242	EXTERN		a_IP0x71_B0			        :	byte
				;243	EXTERN		a_IP0x71_B1			        :	byte
				;244	EXTERN		a_IP0x71_B2			        :	byte
				;245	EXTERN		a_IP0x71_B3			        :	byte
				;246	EXTERN		a_IP0x71_B4			        :	byte
				;247	EXTERN		a_IP0x71_B5			        :	byte
				;248	EXTERN		a_IP0x71_B6			        :	byte
				;249	EXTERN		a_ExIP0x81_B0			        :	byte
				;250	EXTERN		a_ExIP0x81_B1			        :	byte
				;251	EXTERN		a_ExIP0x81_B2                           :	byte
				;252	EXTERN		a_ExIP0x81_B3                           :	byte
				;253	EXTERN		a_ExIP0x81_B4                           :	byte
				;254	EXTERN		a_ExIP0x81_B5                           :	byte
				;255	EXTERN		a_ExIP0x81_B6                           :	byte
				;256	EXTERN		a_ExIP0x81_B7                           :	byte
				;257	EXTERN		a_0x03ContlErr			        :	byte
				;258	EXTERN		a_0x04ReceivedPow		        :	byte
				;259	EXTERN		a_0x04ReceivedPowPre		        :	byte
				;260	EXTERN		a_0x06TdelayML			        :	byte
				;261	EXTERN		a_0x06TdelayMH			        :	byte
				;262	EXTERN		a_StatusEndPower		        :	byte
				;263	EXTERN		a_OptConfiCNT			        :	byte
				;264	EXTERN		a_0x51PowMax			        :	byte
				;265	EXTERN		a_0x04ReceiPowCNTH		        :	byte
				;266	EXTERN		a_0x04ReceiPowCNTL		        :	byte
				;267	EXTERN		a_ParPLLFHpre			        :	byte
				;268	EXTERN		a_ParPLLFLpre			        :	byte
				;269	EXTERN		a_Carry				        :	byte
				;270	EXTERN		a_r_DetectCNT			        :	byte
				;271	EXTERN		a_r_RPowCNT			        :	byte
				;272	EXTERN		a_TempH				        :	byte
				;273	EXTERN		a_TempL	                                :	byte
				;274	
				;275	
				;276	;*******************************************************************************************
				;277	;*****	                            Program Body	                               *****
				;278	;*******************************************************************************************
				;279	MainCode	.Section 	at 0000H 	'code'
				;280	;========================================================
				;281	;Function : Program Memory Define
				;282	;Note     : 
				;283	;========================================================
				;284				ORG	0000H					; Reset in Program Memory 0000H
				;285	           		JMP	Initialization				; Jump into Initial
				MAINCODE:
				include HT66FW2230.inc
0000	282D	jmp     Initialization
0001	0000	nop
0002	0000	nop
0003	0000	nop
				;286	                                                                	
				;287				ORG	0004H					; Over Currrent Protection Interrupt
				;288				JMP	ISR_OCP                         	
0004	2B65	jmp     ISR_OCP
0005	0000	nop
0006	0000	nop
0007	0000	nop
				;289				                                        	
				;290				ORG	0008H					; Demodulation Interrupt
				;291				JMP	ISR_DeMod                       	
0008	2B69	jmp     ISR_DeMod
0009	0000	nop
000A	0000	nop
000B	0000	nop
				;292				                                        	
				;293				ORG	000CH					; External Interrupt 0
				;294				JMP	ISR_ExInt0                      	
000C	2B6D	jmp     ISR_ExInt0
000D	0000	nop
000E	0000	nop
000F	0000	nop
				;295				                                        	
				;296				ORG	0010H					; MultiFunction0 Interrupt for TM0
				;297				JMP	ISR_MultiFun_TM0                	
0010	2B71	jmp     ISR_MultiFun_TM0
0011	0000	nop
0012	0000	nop
0013	0000	nop
				;298	                                                                	
				;299				ORG	0014H					; MultiFunction1 Interrupt for TM1
				;300				JMP	ISR_MultiFun_TM1                	
0014	2B79	jmp     ISR_MultiFun_TM1
0015	0000	nop
0016	0000	nop
0017	0000	nop
				;301	                                                                	
				;302				ORG	0018H					; MultiFunction2 Interrupt for LVD / EEPROM
				;303				JMP	ISR_MultiFun_LVD_EEP            	
0018	2B7E	jmp     ISR_MultiFun_LVD_EEP
0019	0000	nop
001A	0000	nop
001B	0000	nop
				;304				                                        	
				;305				ORG	001CH					; ADC Interrupt
				;306				JMP	ISR_ADC                         	
001C	2B7F	jmp     ISR_ADC
001D	0000	nop
001E	0000	nop
001F	0000	nop
				;307	                                                                	
				;308				ORG	0020H					; IIC Interrupt
				;309				JMP	ISR_IIC                         	
0020	2B82	jmp     ISR_IIC
0021	0000	nop
0022	0000	nop
0023	0000	nop
				;310				                                        	
				;311				ORG	0024H					; Time Base 0 Interrupt
				;312				JMP	ISR_TimeBase0                   	
0024	2B83	jmp     ISR_TimeBase0
0025	0000	nop
0026	0000	nop
0027	0000	nop
				;313				                                        	
				;314				ORG	0028H					; Time Base 1 Interrupt
				;315				JMP	ISR_TimeBase1                   	
0028	2B85	jmp     ISR_TimeBase1
0029	0000	nop
002A	0000	nop
002B	0000	nop
				;316				                                        	
				;317				ORG	002CH					; External Interrupt 1
				;318				JMP	ISR_ExInt1
002C	2B86	jmp     ISR_ExInt1
				;319	
				;320	
				;321	;========================================================
				;322	;Function : Initial 
				;323	;Note     : IO and parameter initial setting
				;324	;========================================================
				;325			Initialization:	
				;326				SNZ	STATUS.4				; PDF flag
				Initialization:
002D	3A0A	snz     PDF
				;327				JMP	InitiIO
002E	2847	jmp     InitiIO
				;328				SNZ	STATUS.5				;;TO flag
002F	3A8A	snz     TO
				;329				JMP	InitiIO
0030	2847	jmp     InitiIO
				;330				;JMP	Phase_Selection
				;331	
				;332				SET	fg_NoChange
0031	72D3	set     A_LOOPITERATION[2].5
				;333		PS_PWMsw:
				;334				SDZ	a_r_DetectCNT
				PS_PWMsw:
0032	57F9	sdz     A_R_DETECTCNT
				;335				JMP	PS_175KHz
0033	2835	jmp     PS_175KHz
				;336	
				;337				JMP	PS_171KHz
0034	283D	jmp     PS_171KHz
				;338		PS_175KHz:							;Normal
				;339				MOV	A, 0D0H                         	
				PS_175KHz:
0035	0FD0	mov     a, D0H
				;340				MOV	PLLFL, A				; PLLFL @SPDM 61H (POR=0000_0000, WDT Out=0000_0000)
0036	00E1	mov     PLLFL, a
				;341				MOV	a_ParPLLFL, A                   	
0037	4081	mov     A_PARPLLFL, a
				;342				MOV	A, 002H                         	
0038	0F02	mov     a, 2H
				;343				MOV	PLLFH, A				; PLLFH @SPDM 62H (POR=----_-000, WDT Out=----_-000)
0039	00E2	mov     PLLFH, a
				;344				MOV	a_ParPLLFH, A                   	
003A	4080	mov     A_PARPLLFH, a
				;345				CLR	fg_RXCoilD                      	
003B	7653	clr     A_LOOPITERATION[2].4
				;346				JMP	InitiIO1                        	
003C	284A	jmp     InitiIO1
				;347		PS_171KHz:							;for type D Rx Coil
				;348				MOV	A, 0D0H					; 172kHz
				PS_171KHz:
003D	0FD0	mov     a, D0H
				;349				MOV	PLLFL, A				; PLLFL @SPDM 61H (POR=0000_0000, WDT Out=0000_0000)
003E	00E1	mov     PLLFL, a
				;350				MOV	a_ParPLLFL, A
003F	4081	mov     A_PARPLLFL, a
				;351				MOV	A, 002H	
0040	0F02	mov     a, 2H
				;352				MOV	PLLFH, A
0041	00E2	mov     PLLFH, a
				;353				MOV	a_ParPLLFH, A
0042	4080	mov     A_PARPLLFH, a
				;354				MOV	A, 008H
0043	0F08	mov     a, 8H
				;355				MOV	a_r_DetectCNT, A
0044	40F9	mov     A_R_DETECTCNT, a
				;356				SET	fg_RXCoilD
0045	7253	set     A_LOOPITERATION[2].4
				;357				JMP	InitiIO1
0046	284A	jmp     InitiIO1
				;358	
				;359	;-----------------------I/O Setting------------------------
				;360		InitiIO:
				;361				CLR	fg_NoChange
				InitiIO:
0047	76D3	clr     A_LOOPITERATION[2].5
				;362				MOV	A, 001H
0048	0F01	mov     a, 1H
				;363				MOV	a_DemoV_I1_I2, A   
0049	4087	mov     A_DEMOV_I1_I2, a
				;364		InitiIO1:
				;365				MOV	A, 005H					; set PCS0 = 0000_0101 = 05h
				InitiIO1:
004A	0F05	mov     a, 5H
				;366				MOV	PCS0, A					; PCS0 @SPDM 3DH
004B	00BD	mov     PCS0, a
				;367	                                                                	
				;368				MOV	A, 0FAH					; set PCS1 = 1111_1010 = FAh
004C	0FFA	mov     a, FAH
				;369				MOV	PCS1, A					; PCS1 @SPDM 3FH
004D	00BF	mov     PCS1, a
				;370	                                                                	
				;371				MOV	A, 0D0H					; set PCC = 1101_0000 = D0h 
004E	0FD0	mov     a, D0H
				;372				MOV	PCC, A					; PCC @SPDM 38H
004F	00B8	mov     PCC, a
				;373	                                                                	
				;374				;MOV	A, 000H					; set PCPU = 0000_0000 = 00h
				;375				;MOV	PCPU, A					; PCPU @SPDM 39H
				;376	                                                                	
				;377				MOV	A, 04FH					; set PA = 0101_1111 = 5Fh ;;test PA.7/PA.5
0050	0F4F	mov     a, 4FH
				;378				MOV	PA, A						; PA @SPDM 12H
0051	0092	mov     PA, a
				;379				                                        	
				;380				MOV	A, 0C8H					; set PAS0 = 0000_1000 = C8h;;AN3
0052	0FC8	mov     a, C8H
				;381				MOV	PAS0, A					; PAS0 @SPDM 3AH
0053	00BA	mov     PAS0, a
				;382	                                                                	
				;383				MOV	A, 0E0H					; set PAS1 = 1110_0000 = E0h	;; AN7
0054	0FE0	mov     a, E0H
				;384				;MOV	A, 020H					; set PAS1 = 0010_0000 = 20h;;test PA.7
				;385				MOV	PAS1, A					; PAS1 @SPDM 3BH
0055	00BB	mov     PAS1, a
				;386				                                        	
				;387				MOV	A, 0CFH					; set PAC = 1100_1111 = CFh ;;Temperture Sensor/PA.5
0056	0FCF	mov     a, CFH
				;388				;MOV	A, 04FH					; set PAC = 0100_1111 = 4Fh ;test PA.7/PA.5
				;389				MOV	PAC, A					; PAC @SPDM 13H
0057	0093	mov     PAC, a
				;390	                                                                	
				;391				;MOV	A, 000H					; set PAPU = 0000_0000 = 00h as no pull high
				;392				;MOV	PAPU, A					; PAPU @SPDM 14H (POR=0000_0000, WDT Out=0000_0000)
				;393				                                        	
				;394				;MOV	A, 000H					; set PAPU = 0000_0000 = 00h as no wake up HALT
				;395				;MOV	PAWU, A					; PAPU @SPDM 15H (POR=0000_0000, WDT Out=0000_0000)
				;396	                                                                	
				;397				MOV	A, 0F7H					; set PB = 1111_0111 = F7h 
0058	0FF7	mov     a, F7H
				;398				MOV	PB, A					; PB @SPDM 1AH
0059	009A	mov     PB, a
				;399	                                                                	
				;400				MOV	A, 082H					; set PBS0 = 1000_0010 = 82h
005A	0F82	mov     a, 82H
				;401				MOV	PBS0, A					; PBS0 @SPDM 3CH
005B	00BC	mov     PBS0, a
				;402		                                                        	
				;403				MOV	A, 011H					; set PBC = ---1_0001 = 11h 
005C	0F11	mov     a, 11H
				;404				MOV	PBC, A					; PBC @SPDM 1BH (POR=---1_1111, WDT Out=---1_1111)
005D	009B	mov     PBC, a
				;405	                                                                	
				;406				;MOV	A, 000H					; set PBPU = 0000_0000 = 00h as no pull high
				;407				;MOV	PBPU, A					; PBPU @SPDM 1CH (POR=---0_0000, WDT Out=---0_0000)
				;408	                                                                	
				;409				;MOV	A, 0FFH					; set PC = 1111_1111 = FFh 
				;410				;MOV	PC, A					; PC @SPDM 37H
				;411	                                                                	
				;412				MOV	A, 007H					; set IFS0 = 0000_0111 = 07h
005E	0F07	mov     a, 7H
				;413				MOV	IFS0, A					; IFS0 @SPDM 3EH
005F	00BE	mov     IFS0, a
				;414	                                                                	
				;415	;-----------------------System Setting---------------------     	
				;416				;MOV	A, 001H					; set HXTC = 0000_0001 = 01h
				;417				;MOV	HXTC, A					; HXTC @SPDM 2DH
				;418				SET	HXTC.0
0060	302D	set     HXTEN
				;419	
				;420		Ini_CheckHXTF:
				;421				CLR	WDT
				Ini_CheckHXTF:
0061	0001	clr     wdt
				;422				SNZ	HXTC.1
0062	38AD	snz     HXTF
				;423				JMP	Ini_CheckHXTF
0063	2861	jmp     Ini_CheckHXTF
				;424	
				;425				MOV	A, 008H
0064	0F08	mov     a, 8H
				;426				MOV	SCC, A
0065	00AC	mov     SCC, a
				;427				CLR	HIRCC.0
0066	342E	clr     HIRCEN
				;428		
				;429				;MOV	A, 000H					; set STATUS = --00_0000 = 00h
				;430				;MOV	STATUS, A				; STATUS @SPDM 0AH (POR=xx00_xxxx, WDT Out=xx1u_uuuu)
				;431				                                        	
				;432				;MOV	A, 000H					; set RSTFC = --00_0000 = 00h
				;433				;MOV	RSTFC, A				; RSTFC @SPDM 17H (POR=xx00_xxxx, WDT Out=xx1u_uuuu)
				;434			                                                	
				;435				;MOV	A, 053H					; set WDTC = 0101_0000 = 50h
				;436				;MOV	WDTC, A					; WDTC @SPDM 23H (POR=0101_0011, WDT Out=0101_0011)
				;437	                                                                	
				;438				;MOV	A, 055H					; set WDTC = 0101_0101 = 55h
				;439				;MOV	LVRC, A					; WDTC @SPDM 23H (POR=0101_0101, WDT Out=0101_0101)
				;440	                                                                	
				;441	;-------------------VCO PLL / PWM setting------------------     	
				;442				;MOV	A, 080H					; set CKGEN = 1000_0000 = 80h
				;443				;MOV	CKGEN, A				; CKGEN @SPDM 60H (POR=0000_----, WDT Out=0000_----)
				;444	                                                                	
				;445				MOV	A, 0D0H					;316h= 179kHz, 2EEh=175kHz, 2D0h=172kHz
0067	0FD0	mov     a, D0H
				;446				MOV	PLLFL, A				; PLLFL @SPDM 61H (POR=0000_0000, WDT Out=0000_0000)
0068	00E1	mov     PLLFL, a
				;447				MOV	a_ParPLLFL, A                   	
0069	4081	mov     A_PARPLLFL, a
				;448	                                                                	
				;449				MOV	A, 002H					;316h= 179kHz
006A	0F02	mov     a, 2H
				;450				MOV	PLLFH, A				; PLLFH @SPDM 62H (POR=----_-000, WDT Out=----_-000)
006B	00E2	mov     PLLFH, a
				;451				MOV	a_ParPLLFH, A                   	
006C	4080	mov     A_PARPLLFH, a
				;452	                                                                	
				;453	;			MOV	A, 001H					; set CPR = 0--0_0001 = 01h
				;454	;			MOV	CPR, A					; CPR @SPDM 72H
				;455	                                                                	
				;456				;MOV	A, 050H					; set PWMC = 0101_0000 = 00h, as Mode 0
				;457				;MOV	PWMC, A					; PWMC @SPDM 63H
				;458				;CLR	PWMC                            	
				;459	                                                                	
				;460	;----------------Timer Module 0 (STM) setting--------------     	
				;461				;MOV	A, 000H					; set TM0C0 = 0000_0000 = 00h
				;462				;MOV	TM0C0, A				; TM0C0 @SPDM 43H (POR=0000_0000, WDT Out=0000_0000)
				;463	                                                                	
				;464				MOV	A, 0C1H					; set TM0C1 = 1100_0001 = C1h
006D	0FC1	mov     a, C1H
				;465				MOV	TM0C1, A				; TM0C1 @SPDM 44H (POR=0000_0000, WDT Out=0000_0000)
006E	00C4	mov     TM0C1, a
				;466	                                                                	
				;467				MOV	A, c_IniSTMTimeBaseL			; set TM0AL = 0000_0000 = 00h
006F	0FFA	mov     a, FAH
				;468				MOV	TM0AL, A				; TM0AL @SPDM 47H (POR=0000_0000, WDT Out=0000_0000)
0070	00C7	mov     TM0AL, a
				;469	                                                                	
				;470				MOV	A, c_IniSTMTimeBaseH			; set TM0AH = 0000_0000 = 00h
0071	0F00	mov     a, 0H
				;471				MOV	TM0AH, A				; TM0AH @SPDM 48H (POR=----_--00, WDT Out=----_--00)
0072	00C8	mov     TM0AH, a
				;472	                                                                	
				;473	;----------------Timer Module 1 (CTM) setting--------------     	
				;474				;MOV	A, 000H					; set TM1C0 = 0000_0000 = 00h
				;475				;MOV	TM1C0, A				; TM1C0 @SPDM 49H (POR=0000_0000, WDT Out=0000_0000)
				;476	                                                                	
				;477				MOV	A, 0C1H					; set TM1C1 = 0000_0000 = 00h
0073	0FC1	mov     a, C1H
				;478				MOV	TM1C1, A				; TM1C1 @SPDM 4AH (POR=0000_0000, WDT Out=0000_0000)
0074	00CA	mov     TM1C1, a
				;479	                                                                	
				;480				MOV	A, c_IniCTMTimeBaseL			; set TM1AL = 1111_1010 = FAh for 50us
0075	0F32	mov     a, 32H
				;481				MOV	TM1AL, A				; TM1AL @SPDM 4DH (POR=0000_0000, WDT Out=0000_0000)
0076	00CD	mov     TM1AL, a
				;482	                                                                	
				;483				MOV	A, c_IniCTMTimeBaseH			; set TM1AH = 0000_0000 = 00h
0077	0F00	mov     a, 0H
				;484				MOV	TM1AH, A				; TM1AH @SPDM 4EH (POR=----_--00, WDT Out=----_--00)
0078	00CE	mov     TM1AH, a
				;485	                                                                	
				;486	;-------------------Internal VREF setting------------------     	
				;487				MOV	A, 080H					; set VREFC = 1000_0000 = 80h
0079	0F80	mov     a, 80H
				;488				MOV	VREFC, A				; VREFC @SPDM 6FH (POR=0---_---x, WDT Out=0---_---x)
007A	00EF	mov     VREFC, a
				;489	                                                                	
				;490				;MOV	A, 020H					; set VREACAL = 0010_0000 = 20h for Non-Calibration
				;491				;MOV	VREACAL, A				; VREACAL @SPDM 70H (POR=0010_0000, WDT Out=0010_0000)
				;492	                                                                	
				;493	;----------------Demodulation & OCP setting-----------------    	
				;494				;MOV	A, 000H					; set DCMISC = 0000_0000 = 00h @ AVDD=5v			
				;495				;MOV	DCMISC, A				; DCMISC @SPDM 6EH (POR=000-_--00, WDT Out=000-_--00)
				;496	                                                                	
				;497				;MOV	A, 020H					; set DMACAL = 0010_0000 = 20h for Non-Calibration
				;498				;MOV	DEMACAL, A				; DMACAL @SPDM 67H (POR=0010_0000, WDT Out=0010_0000)
				;499	                                                                	
				;500				;MOV	A, 010H					; set DMCCAL = 0001_0000 = 10h for Non-Calibration
				;501				;MOV	DEMCCAL, A				; DMCCAL @SPDM 68H (POR=0001_0000, WDT Out=0001_0000)
				;502	                                                                	
				;503				MOV	A, 040H					; set DEMC0 = 0100_0000 = 40h			
007B	0F40	mov     a, 40H
				;504				MOV	DEMC0, A				; DEMC0 @SPDM 64H (POR=00--_----, WDT Out=00--_----)
007C	00E4	mov     DEMC0, a
				;505				                                        	
				;506				;MOV	A, 007H					; set DEMC1 = 0000_0110 = 06h for OPA gain= 1, 63~64 tFLT
				;507				;MOV	DEMC1, A				; DEMC1 @SPDM 65H (POR=x-00_0000, WDT Out=x-00_0000)
				;508	                                                                	
				;509				MOV	A, 042H					; set DEMREF = 0100_0010 = 42h for 5v / 256 x 66(42h) = 1.3v Reference voltage
007D	0F42	mov     a, 42H
				;510				MOV	DEMREF, A				; DEMREF @SPDM 66H (POR=0000_0000, WDT Out=0000_0000)
007E	00E6	mov     DEMREF, a
				;511	                                                                	
				;512				;MOV	A, 020H					; set OCPACAL = 0010_0000 = 20h for Non-Calibration
				;513				;MOV	OCPACAL, A				; OCPACAL @SPDM 6CH (POR=0010_0000, WDT Out=0010_0000)
				;514				;MOV	OCACAL, A                       	
				;515	                                                                	
				;516				;MOV	A, 010H					; set OCPCCAL = 0001_0000 = 10h for Non-Calibration
				;517				;MOV	OCPCCAL, A				; OCPCCAL @SPDM 6DH (POR=0001_0000, WDT Out=0001_0000)
				;518				;MOV	OCCCAL, A                       	
				;519	                                                                	
				;520				MOV	A, 040H					; set OCPC0 = 0100_0000 = 40h
007F	0F40	mov     a, 40H
				;521				MOV	OCPC0, A				; OCPC0 @SPDM 69H (POR=00--_----, WDT Out=00--_----)
0080	00E9	mov     OCPC0, a
				;522				                                        	
				;523				MOV	A, 007H					; set OCPC1 = 0000_0111 = 07h
0081	0F07	mov     a, 7H
				;524				MOV	OCPC1, A				; OCPC1 @SPDM 6AH (POR=x-00_0000, WDT Out=x-00_0000)
0082	00EA	mov     OCPC1, a
				;525	                                                                	
				;526				MOV	A, 0B2H					; set OCPREF = 0B2h =3.5v@VREF=5V (2014/06/24), CCh=4V
0083	0FB2	mov     a, B2H
				;527				MOV	OCPREF, A				; OCPREF @SPDM 6BH (POR=0000_0000, WDT Out=0000_0000)
0084	00EB	mov     OCPREF, a
				;528	                                                                	
				;529	;-------------------------I2C setting----------------------     	
				;530				; IICC0                                 	
				;531				; IICC1                                 	
				;532				; IICD                                  	
				;533				; IICA                                  	
				;534				; I2CTOC                                	
				;535	                                                                	
				;536	;-------------------------ADC setting----------------------     	
				;537				MOV	A, 001H					; set ADCR0 = 0000_0001 = 001h
0085	0F01	mov     a, 1H
				;538				MOV	ADCR0, A				; ADCR0 @SPDM 2AH (POR=0110_0000, WDT Out=0110_0000)
0086	00AA	mov     ADCR0, a
				;539	                                                                	
				;540				MOV	A, 07CH					; set ADCR1 = 0111_1100 = 07Ch
0087	0F7C	mov     a, 7CH
				;541				MOV	ADCR1, A				; ADCR1 @SPDM 2BH (POR=-000_0000, WDT Out=-000_0000)
0088	00AB	mov     ADCR1, a
				;542	                                                                	
				;543	;-----------------------EEPROM setting---------------------     	
				;544				; EEA                                   	
				;545				; EED                                   	
				;546				; EEC                                   	
				;547	                                                                	
				;548	;-----------------------LVDC setting---------------------       	
				;549				; LVDC                                  	
				;550	                                                                	
				;551	;----------------------Time Base setting-------------------     	
				;552				MOV	A, 001					;; PSCR = 0000_0001=01h
0089	0F01	mov     a, 1H
				;553				MOV	PSCR,	A				;; 00h=> Fsys, 01h=>Fsys/4, 11h=>Fsub
008A	00A2	mov     PSCR, a
				;554				                                        	
				;555				MOV	A, 006					;; TBC0 = 0000_0110=06h
008B	0F06	mov     a, 6H
				;556				MOV	TBC0, A					;; 110=>16384/Ftb
008C	00A0	mov     TBC0, a
				;557				                                        	
				;558				MOV	A, 007					;; TBC1 = 0000_0111=07h
008D	0F07	mov     a, 7H
				;559				MOV	TBC1, A					;; 111=>32768/Ftb
008E	00A1	mov     TBC1, a
				;560	                                                                	
				;561	;-----------------------Parameter Setting-------------------    	
				;562				SET	fg_BaseTimeCTM                  	
008F	7002	set     A_PARPLLFL[1].0
				;563				CLR	fg_MutipleTimeHflagCTM          	
0090	7482	clr     A_PARPLLFL[1].1
				;564				CLR	a_MutipleTimeHCTM               	
0091	5F04	clr     A_MUTIPLETIMEHCTM
				;565				CLR	a_MutipleTimeLCTM               	
0092	5F03	clr     A_MUTIPLETIMELCTM
				;566				SET	fg_BaseTimeSTM                  	
0093	7102	set     A_PARPLLFL[1].2
				;567				CLR	fg_MutipleTimeHflagSTM          	
0094	7582	clr     A_PARPLLFL[1].3
				;568				CLR	a_MutipleTimeHSTM               	
0095	5F06	clr     A_MUTIPLETIMEHSTM
				;569				CLR	a_MutipleTimeLSTM               	
0096	5F05	clr     A_MUTIPLETIMELSTM
				;570				SET	fg_FlagDemo				; Demodulation IP with bug
0097	7282	set     A_PARPLLFL[1].5
				;571				SET	fg_INT1                         	
0098	7302	set     A_PARPLLFL[1].6
				;572				SET	fg_INT0                         	
0099	7382	set     A_PARPLLFL[1].7
				;573				CLR	a_DataOUTtemp                   	
009A	5F0B	clr     A_DATAOUTTEMP
				;574				SET	fg_DUDataStart                  	
009B	7008	set     A_DEMOV_I1_I2[1].0
				;575				SET	fg_DU                           	
009C	7088	set     A_DEMOV_I1_I2[1].1
				;576				SET	fg_StartBit                     	
009D	7108	set     A_DEMOV_I1_I2[1].2
				;577				CLR	fg_ParityBit                    	
009E	7588	clr     A_DEMOV_I1_I2[1].3
				;578				CLR	fg_ParityErr                    	
009F	7608	clr     A_DEMOV_I1_I2[1].4
				;579				MOV	A, 00AH					;00AH(Start-bit, b0~b7, Parity-bit)
00A0	0F0A	mov     a, AH
				;580				MOV	a_DataCNT, A                    	
00A1	4098	mov     A_DATACNT, a
				;581				CLR	a_DataParityCNT                 	
00A2	5F0C	clr     A_DATAPARITYCNT
				;582				SET	fg_StopBit                      	
00A3	7288	set     A_DEMOV_I1_I2[1].5
				;583				MOV	A, 00BH                         	
00A4	0F0B	mov     a, BH
				;584				MOV	a_TimeOutCNT, A				; 09H for the front of Stop-bit
00A5	408D	mov     A_TIMEOUTCNT, a
				;585				CALL	DemoCLR	                        	
00A6	6496	call    DemoCLR
				;586				SET	fg_WaitDataOut                  	
00A7	7308	set     A_DEMOV_I1_I2[1].6
				;587				SET	fg_StopBitPre                   	
00A8	7388	set     A_DEMOV_I1_I2[1].7
				;588				SET	fg_DataFirst                    	
00A9	7009	set     A_DEMOV_I1_I2[2].0
				;589				SET	fg_Preamble                     	
00AA	7089	set     A_DEMOV_I1_I2[2].1
				;590				MOV	A, 007H                         	
00AB	0F07	mov     a, 7H
				;591				MOV	a_Preamble4BitCNT, A            	
00AC	4099	mov     A_PREAMBLE4BITCNT, a
				;592				MOV	A, 002H                         	
00AD	0F02	mov     a, 2H
				;593				MOV	a_NoToggleCNT, A                	
00AE	409B	mov     A_NOTOGGLECNT, a
				;594				CLR	fg_ChecksumBit                  	
00AF	7509	clr     A_DEMOV_I1_I2[2].2
				;595				CLR	a_DataByteCNT                   	
00B0	5F1C	clr     A_DATABYTECNT
				;596				CLR	a_DataByteCNTtemp               	
00B1	5F1D	clr     A_DATABYTECNTTEMP
				;597				CLR	a_AddrDataOUT                   	
00B2	5F1E	clr     A_ADDRDATAOUT
				;598				CLR	fg_DataByteCNTFull              	
00B3	7689	clr     A_DEMOV_I1_I2[2].5
				;599				CLR	a_HeadMessageCNT                	
00B4	5F1F	clr     A_HEADMESSAGECNT
				;600				MOV	A, 080H                         	
00B5	0F80	mov     a, 80H
				;601				MOV	a_ContlDataMessag, A            	
00B6	40A0	mov     A_CONTLDATAMESSAG, a
				;602				CLR	a_DataHeader                    	
00B7	5F21	clr     A_DATAHEADER
				;603				CLR	a_DataMessageB0                 	
00B8	5F22	clr     A_DATAMESSAGEB0
				;604				CLR	a_DataMessageB1                 	
00B9	5F23	clr     A_DATAMESSAGEB1
				;605				CLR	a_DataMessageB2                 	
00BA	5F24	clr     A_DATAMESSAGEB2
				;606				CLR	a_DataMessageB3                 	
00BB	5F25	clr     A_DATAMESSAGEB3
				;607				CLR	a_DataMessageB4                 	
00BC	5F26	clr     A_DATAMESSAGEB4
				;608				CLR	a_DataMessageB5                 	
00BD	5F27	clr     A_DATAMESSAGEB5
				;609				CLR	a_DataMessageB6                 	
00BE	5F28	clr     A_DATAMESSAGEB6
				;610				CLR	a_DataMessageB7                 	
00BF	5F29	clr     A_DATAMESSAGEB7
				;611				CLR	a_DataChecksum                  	
00C0	5F2A	clr     A_DATACHECKSUM
				;612				CLR	a_XORchecksum                   	
00C1	5F2B	clr     A_XORCHECKSUM
				;613				SET	fg_PacDataOK                    	
00C2	7189	set     A_DEMOV_I1_I2[2].3
				;614				SET	fg_StartReci                    	
00C3	7209	set     A_DEMOV_I1_I2[2].4
				;615				MOV	A, 01DH                         	
00C4	0F1D	mov     a, 1DH
				;616				MOV	a_Preamble25BitCNT, A			; preamble maximmn 25-bit[(25*2)-(4*2-1)=43=2BH]; 43-14=29=1Dh
00C5	409A	mov     A_PREAMBLE25BITCNT, a
				;617				SET	fg_TimeOut
00C6	7202	set     A_PARPLLFL[1].4
				;618				CLR	a_SSP0x01_B0
00C7	5F57	clr     A_SSP0X01_B0
				;619				CLR	a_CSP0x05_B0
00C8	5F58	clr     A_CSP0X05_B0
				;620				CLR	a_IP0x71_B0
00C9	5F5D	clr     A_IP0X71_B0
				;621				CLR	a_IP0x71_B1
00CA	5F5E	clr     A_IP0X71_B1
				;622				CLR	a_IP0x71_B2
00CB	5F5F	clr     A_IP0X71_B2
				;623				CLR	a_IP0x71_B3
00CC	5F60	clr     A_IP0X71_B3
				;624				CLR	a_IP0x71_B4
00CD	5F61	clr     A_IP0X71_B4
				;625				CLR	a_IP0x71_B5
00CE	5F62	clr     A_IP0X71_B5
				;626				CLR	a_IP0x71_B6
00CF	5F63	clr     A_IP0X71_B6
				;627				CLR	a_ExIP0x81_B0
00D0	5F64	clr     A_EXIP0X81_B0
				;628				CLR	a_ExIP0x81_B1
00D1	5F65	clr     A_EXIP0X81_B1
				;629				CLR	a_ExIP0x81_B2
00D2	5F66	clr     A_EXIP0X81_B2
				;630				CLR	a_ExIP0x81_B3
00D3	5F67	clr     A_EXIP0X81_B3
				;631				CLR	a_ExIP0x81_B4
00D4	5F68	clr     A_EXIP0X81_B4
				;632				CLR	a_ExIP0x81_B5
00D5	5F69	clr     A_EXIP0X81_B5
				;633				CLR	a_ExIP0x81_B6
00D6	5F6A	clr     A_EXIP0X81_B6
				;634				CLR	a_ExIP0x81_B7
00D7	5F6B	clr     A_EXIP0X81_B7
				;635				CLR	a_Config0x51_B0
00D8	5F5A	clr     A_CONFIG0X51_B0
				;636				CLR	a_Config0x51_B2
00D9	5F5B	clr     A_CONFIG0X51_B2
				;637				CLR	a_Config0x51_B3
00DA	5F5C	clr     A_CONFIG0X51_B3
				;638				CLR	fg_Idet
00DB	77C6	clr     A_TEMP0[1].7
				;639				CLR	fg_ExIdet0x81
00DC	7746	clr     A_TEMP0[1].6
				;640				CLR	fg_0x51PowClass
00DD	7552	clr     A_LOOPITERATION[1].2
				;641				CLR	fg_PCH0x06Abnor
00DE	7453	clr     A_LOOPITERATION[2].0
				;642				CLR	fg_0x02PowDownChargeComplete
00DF	75C6	clr     A_TEMP0[1].3
				;643				CLR	fg_0x02PowDownReconfigure
00E0	7646	clr     A_TEMP0[1].4
				;644				CLR	fg_0x02PowDownNoResponse
00E1	76C6	clr     A_TEMP0[1].5
				;645				SET	a_StatusEndPower
00E2	5FF1	set     A_STATUSENDPOWER
				;646				CLR	a_OptConfiCNT
00E3	5F72	clr     A_OPTCONFICNT
				;647				SET	fg_Tdelay
00E4	7052	set     A_LOOPITERATION[1].0
				;648				MOV	A, 005H
00E5	0F05	mov     a, 5H
				;649				MOV	a_PCHO0x06_B0, A
00E6	40D9	mov     A_PCHO0X06_B0, a
				;650				CLR	a_0x03ContlErr
00E7	5F6C	clr     A_0X03CONTLERR
				;651				CLR	a_0x04ReceivedPow
00E8	5F6D	clr     A_0X04RECEIVEDPOW
				;652				CLR	a_0x04ReceivedPowPre
00E9	5F6E	clr     A_0X04RECEIVEDPOWPRE
				;653				CLR	a_0x06TdelayML
00EA	5F6F	clr     A_0X06TDELAYML
				;654				CLR	a_0x06TdelayMH
00EB	5F70	clr     A_0X06TDELAYMH
				;655				CLR	a_0x51PowMax
00EC	5F73	clr     A_0X51POWMAX
				;656				CLR	fg_0x51NonPID
00ED	75D2	clr     A_LOOPITERATION[1].3
				;657				CLR	fg_0x04OutReceiPowTime
00EE	74D2	clr     A_LOOPITERATION[1].1
				;658				CLR	fg_EndPowDown
00EF	7652	clr     A_LOOPITERATION[1].4
				;659				CLR	fg_CEinput
00F0	76D2	clr     A_LOOPITERATION[1].5
				;660				CLR	fg_ReCordTemp
00F1	7755	clr     A_LOOPITERATION[4].6
				;661				CLR	fg_CalTempTimeHigh
00F2	77D5	clr     A_LOOPITERATION[4].7
				;662				CLR	fg_PowOver5wLEDsw
00F3	7456	clr     A_LOOPITERATION[5].0
				;663				CLR	fg_RecodeRPpre
00F4	74D3	clr     A_LOOPITERATION[2].1
				;664				CLR	fg_RPNoStable
00F5	7553	clr     A_LOOPITERATION[2].2
				;665				SET	fg_INT_AD
00F6	7309	set     A_DEMOV_I1_I2[2].6
				;666				CLR	a_ADRHbuffer
00F7	5F2C	clr     A_ADRHBUFFER
				;667				CLR	a_ADRLbuffer
00F8	5F2D	clr     A_ADRLBUFFER
				;668			SkipStart:
				;669				SZ	fg_NoChange
				SkipStart:
00F9	7ED3	sz      A_LOOPITERATION[2].5
				;670				JMP	SkipEnd
00FA	28FE	jmp     SkipEnd
				;671				MOV	A, 008H
00FB	0F08	mov     a, 8H
				;672				MOV	a_r_DetectCNT, A
00FC	40F9	mov     A_R_DETECTCNT, a
				;673				CLR	fg_RXCoilD
00FD	7653	clr     A_LOOPITERATION[2].4
				;674			SkipEnd:
				;675				CALL	CLRMath
				SkipEnd:
00FE	60E8	call    CLRMath
				;676				CLR	a_temp2
00FF	5F43	clr     A_TEMP2
				;677				CLR	a_temp1
0100	5F44	clr     A_TEMP1
				;678				CLR	a_temp0
0101	5F45	clr     A_TEMP0
				;679				SET	fg_PIDIni
0102	7389	set     A_DEMOV_I1_I2[2].7
				;680				CLR	a_IL
0103	5F47	clr     A_IL
				;681				CLR	a_IM0
0104	5F48	clr     A_IM0
				;682				CLR	a_IM1
0105	5F49	clr     A_IM1
				;683				CLR	a_VL
0106	5F4A	clr     A_VL
				;684				CLR	a_VM0
0107	5F4B	clr     A_VM0
				;685				CLR	a_VM1
0108	5F4C	clr     A_VM1
				;686				CLR	a_EL
0109	5F4D	clr     A_EL
				;687				CLR	a_EM
010A	5F4E	clr     A_EM
				;688				CLR	a_EH
010B	5F4F	clr     A_EH
				;689				MOV	A, c_IniSv161_180N0
010C	0F1E	mov     a, 1EH
				;690				MOV	a_Sv, A
010D	40D0	mov     A_SV, a
				;691				CLR	fg_start
010E	7446	clr     A_TEMP0[1].0
				;692				CLR	fg_IterationStart
010F	74C6	clr     A_TEMP0[1].1
				;693				MOV	A, 009H
0110	0F09	mov     a, 9H
				;694				MOV	a_LoopIteration, A
0111	40D1	mov     A_LOOPITERATION, a
				;695				MOV	A, c_IniReceiPowCNTL
0112	0F60	mov     a, 60H
				;696				MOV	a_0x04ReceiPowCNTL, A
0113	40F5	mov     A_0X04RECEIPOWCNTL, a
				;697				MOV	A, c_IniReceiPowCNTH
0114	0F00	mov     a, 0H
				;698				MOV	a_0x04ReceiPowCNTH, A
0115	40F4	mov     A_0X04RECEIPOWCNTH, a
				;699				SZ	a_0x04ReceiPowCNTH
0116	50F4	sz      A_0X04RECEIPOWCNTH
				;700				SET	fg_0x04ReceiPowCNTHflag
0117	7352	set     A_LOOPITERATION[1].6
				;701				
				;702				CLR	fg_0x04ReceiPowCNTHflag
0118	7752	clr     A_LOOPITERATION[1].6
				;703				CLR	fg_adc_avg_cnt
0119	75D3	clr     A_LOOPITERATION[2].3
				;704				CLR	a_ParPLLFHpre
011A	5F76	clr     A_PARPLLFHPRE
				;705				CLR	a_ParPLLFLpre
011B	5F77	clr     A_PARPLLFLPRE
				;706				CLR	fg_FODTemp60
011C	7546	clr     A_TEMP0[1].2
				;707				CLR	fg_IsenSmall
011D	7753	clr     A_LOOPITERATION[2].6
				;708				CLR	fg_IsenBig
011E	77D3	clr     A_LOOPITERATION[2].7
				;709				CLR	fg_WaitNextCE
011F	7454	clr     A_LOOPITERATION[3].0
				;710				CLR	fg_CEThr
0120	74D4	clr     A_LOOPITERATION[3].1
				;711				CLR	fg_CEThrPana
0121	7554	clr     A_LOOPITERATION[3].2
				;712				CLR	fg_PLLThr
0122	75D5	clr     A_LOOPITERATION[4].3
				;713				CLR	fg_IsenFirst
0123	75D4	clr     A_LOOPITERATION[3].3
				;714				CLR	fg_PLLDown
0124	7654	clr     A_LOOPITERATION[3].4
				;715				CLR	fg_PLLPana
0125	76D4	clr     A_LOOPITERATION[3].5
				;716				CLR	fg_DetectVin
0126	7754	clr     A_LOOPITERATION[3].6
				;717				CLR	fg_VinLow
0127	77D4	clr     A_LOOPITERATION[3].7
				;718				CLR	fg_PSVin
0128	77D2	clr     A_LOOPITERATION[1].7
				;719				CLR	fg_PLL205
0129	7455	clr     A_LOOPITERATION[4].0
				;720				CLR	fg_DTCPR
012A	74D5	clr     A_LOOPITERATION[4].1
				;721				CLR	fg_DTCPRmin
012B	7555	clr     A_LOOPITERATION[4].2
				;722				SET	fg_Ping
012C	7255	set     A_LOOPITERATION[4].4
				;723				CLR	fg_FODEfficLow   
012D	76D5	clr     A_LOOPITERATION[4].5
				;724				MOV	A, 00AH
012E	0F0A	mov     a, AH
				;725				MOV	a_r_RPowCNT, A
012F	40FA	mov     A_R_RPOWCNT, a
				;726				CLR	fg_DemoDetect
0130	74D6	clr     A_LOOPITERATION[5].1
				;727				CLR	fg_DemoDetectTimeOut
0131	7556	clr     A_LOOPITERATION[5].2
				;728				CLR	fg_RxTI
0132	75D6	clr     A_LOOPITERATION[5].3
				;729				CLR	fg_RxPana
0133	7656	clr     A_LOOPITERATION[5].4
				;730	;-----------------------INT setting------------------------
				;731		TestRepeat:
				;732				;MOV	A, 00CH				; set INTEG = 0000_1100 = 0Ch
				;733				;MOV	A, 000H
				;734				;MOV	INTEG, A			; INTEG @SPDM 30H (POR=----_0000, WDT Out=----_0000)
				;735				MOV	A, 002H				; set INTC0 = 0000_0010 = 02h, as OCPE
				TestRepeat:
0134	0F02	mov     a, 2H
				;736				MOV	INTC0, A			; INTC0 @SPDM 10H (POR=-000_0000, WDT Out=-000_0000)
0135	0090	mov     INTC0, a
				;737	
				;738				MOV	A, 00BH				; set INTC1 = 0000_1011 = 02h, as ADE, MF1E, MF0E ON(TM0/STM and TM1/CTM enable INT)
0136	0F0B	mov     a, BH
				;739				MOV	INTC1, A			; INTC1 @SPDM 31H (POR=0000_0000, WDT Out=0000_0000)
0137	00B1	mov     INTC1, a
				;740	
				;741				;MOV	A, 008H				; set INTC2 = 0000_1000 = 08h, as INT1E ON
				;742				;MOV	INTC2, A			; INTC2 @SPDM 32H (POR=0000_0000, WDT Out=0000_0000)
				;743	
				;744				MOV	A, 002H				; set MFI0 = 0000_0010 = 02h, as T0AE ON
0138	0F02	mov     a, 2H
				;745				MOV	MFI0, A				; MFI0 @SPDM 33H (POR=--00_--00, WDT Out=--00_--00)
0139	00B3	mov     MFI0, a
				;746	
				;747				MOV	A, 002H				; set MFI1 = 0000_0010 = 02h, as T1AE ON
013A	0F02	mov     a, 2H
				;748				MOV	MFI1, A				; MFI1 @SPDM 34H (POR=--00_--00, WDT Out=--00_--00)
013B	00B4	mov     MFI1, a
				;749	
				;750	;========================================================
				;751	;Function : Main Function Program  
				;752	;Note     : 
				;753	;========================================================
				;754	;--------------------Qi Selection Phase----------------------
				;755		Phase_Selection:
				;756				CLR 	WDT
				Phase_Selection:
013C	0001	clr     wdt
				;757		PS_VCOstart:
				;758				SET	CKGEN.7					; 1 as VCO ON
				PS_VCOstart:
013D	33E0	set     PLLEN
				;759		PS_EMIstart:
				;760				CLR	INTC0.5
				PS_EMIstart:
013E	3690	clr     DEMF
				;761				CLR	INTC2.7
013F	37B2	clr     INT1F
				;762				SET	INTC0.1					; 1 as OCPE ON
0140	3090	set     OCPE
				;763				;SET	INTC0.2					; DEME-bit = 1 as Demodulation ON
				;764				SET	INTC0.0					; 1 as EMI ON
0141	3010	set     EMI
				;765		PS_WaitVCO_DTin:
				;766				MOV	A, c_IniWVCOMutipleTimeL
				PS_WaitVCO_DTin:
0142	0FC8	mov     a, C8H
				;767				MOV	a_MutipleTimeLCTM, A
0143	4083	mov     A_MUTIPLETIMELCTM, a
				;768				MOV	A, c_IniWVCOMutipleTimeH
0144	0F00	mov     a, 0H
				;769				MOV	a_MutipleTimeHCTM, A
0145	4084	mov     A_MUTIPLETIMEHCTM, a
				;770				SZ	a_MutipleTimeHCTM
0146	5084	sz      A_MUTIPLETIMEHCTM
				;771				SET	fg_MutipleTimeHflagCTM
0147	7082	set     A_PARPLLFL[1].1
				;772	
				;773		PS_WaitVCO_DTFunc:
				;774				;Waiting for VCO Stable Time
				;775				CALL	DelayTimer
				PS_WaitVCO_DTFunc:
0148	239A	call    DelayTimer
				;776		PS_DetectVin:
				;777				CALL	DetectVin
				PS_DetectVin:
0149	61E4	call    DetectVin
				;778				SNZ	fg_DetectVin
014A	7B54	snz     A_LOOPITERATION[3].6
				;779				JMP	PS_Remind
014B	294E	jmp     PS_Remind
				;780	
				;781				CALL	LightDark
014C	2350	call    LightDark
				;782				JMP	PS_DetectVin
014D	2949	jmp     PS_DetectVin
				;783		PS_Remind:
				;784			        SET	fg_PSVin
				PS_Remind:
014E	73D2	set     A_LOOPITERATION[1].7
				;785		PS_Detection:
				;786				CALL	ObjectDetection
				PS_Detection:
014F	621E	call    ObjectDetection
				;787		Phase_SelectionEnd:		
				;788				MOV	A, c_IniCTMTimeBaseL1			; set TM1AL = 1111_1010 = FAh for 50us
				Phase_SelectionEnd:
0150	0FFA	mov     a, FAH
				;789				MOV	TM1AL, A				; TM1AL @SPDM 4DH (POR=0000_0000, WDT Out=0000_0000)
0151	00CD	mov     TM1AL, a
				;790	 			MOV	A, c_IniCTMTimeBaseH1			; set TM1AH = 0000_0000 = 00h
0152	0F00	mov     a, 0H
				;791				MOV	TM1AH, A				; TM1AH @SPDM 4EH (POR=----_--00, WDT Out=----_--00)
0153	00CE	mov     TM1AH, a
				;792				MOV	A, 053H
0154	0F53	mov     a, 53H
				;793				MOV	PWMC, A
0155	00E3	mov     PWMC, a
				;794				
				;795	;----------------------Qi Ping Phase-------------------------
				;796		Phase_Ping:		
				;797		PP_Tping:			
				;798				SET	fg_TimeOut
				PP_Tping:
				Phase_Ping:
0156	7202	set     A_PARPLLFL[1].4
				;799				MOV	A, c_IniDiPingMutipleTimeL		; Tping <= 70ms
0157	0F25	mov     a, 25H
				;800				MOV	a_MutipleTimeLSTM, A
0158	4085	mov     A_MUTIPLETIMELSTM, a
				;801				MOV	A, c_IniDiPingMutipleTimeH
0159	0F05	mov     a, 5H
				;802				MOV	a_MutipleTimeHSTM, A
015A	4086	mov     A_MUTIPLETIMEHSTM, a
				;803				SZ	a_MutipleTimeHSTM
015B	5086	sz      A_MUTIPLETIMEHSTM
				;804				SET	fg_MutipleTimeHflagSTM
015C	7182	set     A_PARPLLFL[1].3
				;805	
				;806				SET	fg_BaseTimeSTM				; TM0(STM) basetime flag reset
015D	7102	set     A_PARPLLFL[1].2
				;807				SET	TM0C0.3					; TM0C0[3] (T0ON-bit) = 1 as TM0 ON
015E	31C3	set     T0ON
				;808				CALL	DemoVI1I2swEN        
015F	26BD	call    DemoVI1I2swEN
				;809				CALL	ReciPackageDataUnitPreee1
0160	60FF	call    ReciPackageDataUnitPreee1
				;810				SNZ	fg_TimeOut
0161	7A02	snz     A_PARPLLFL[1].4
				;811				JMP	Status_DetectNoise
0162	2B01	jmp     Status_DetectNoise
				;812	
				;813				CLR	TM0C0.3					; TM0C0[3] (T0ON-bit) = 0 as TM0 OFF
0163	35C3	clr     T0ON
				;814		PP_Tfirst:
				;815				SET	fg_TimeOut
				PP_Tfirst:
0164	7202	set     A_PARPLLFL[1].4
				;816				MOV	A, c_IniPingTfirstMutipleTimeL		; Tfirst <= 20ms
0165	0F08	mov     a, 8H
				;817				MOV	a_MutipleTimeLSTM, A
0166	4085	mov     A_MUTIPLETIMELSTM, a
				;818				MOV	A, c_IniPingTfirstMutipleTimeH
0167	0F02	mov     a, 2H
				;819				MOV	a_MutipleTimeHSTM, A
0168	4086	mov     A_MUTIPLETIMEHSTM, a
				;820				SZ	a_MutipleTimeHSTM
0169	5086	sz      A_MUTIPLETIMEHSTM
				;821				SET	fg_MutipleTimeHflagSTM
016A	7182	set     A_PARPLLFL[1].3
				;822				SET	fg_BaseTimeSTM				; TM0(STM) basetime flag reset
016B	7102	set     A_PARPLLFL[1].2
				;823				SET	TM0C0.3					; TM0C0[3] (T0ON-bit) = 1 as TM0 ON
016C	31C3	set     T0ON
				;824		PP_Tfirst1:
				;825				CALL	ReciPackageDataUnit
				PP_Tfirst1:
016D	6133	call    ReciPackageDataUnit
				;826				CALL	DemoVI1I2swDisEN
016E	26C7	call    DemoVI1I2swDisEN
				;827				SNZ	fg_TimeOut				; for PP timing
016F	7A02	snz     A_PARPLLFL[1].4
				;828				JMP	Status_DetectNoise
0170	2B01	jmp     Status_DetectNoise
				;829				
				;830				SNZ	fg_ChecksumBit
0171	7909	snz     A_DEMOV_I1_I2[2].2
				;831				JMP	Status_PowerDown
0172	2B0D	jmp     Status_PowerDown
				;832	
				;833				CALL	ExtractPacData
0173	63BB	call    ExtractPacData
				;834				CLR	TM0C0.3					; TM0C0[3] (T0ON-bit) = 0 as TM0 OFF
0174	35C3	clr     T0ON
				;835				SET	fg_TimeOut
0175	7202	set     A_PARPLLFL[1].4
				;836		PP_ErrData:
				;837				SZ	fg_PacDataOK
				PP_ErrData:
0176	7D89	sz      A_DEMOV_I1_I2[2].3
				;838				JMP	Status_PowerDown
0177	2B0D	jmp     Status_PowerDown
				;839	
				;840				SET	fg_PacDataOK
0178	7189	set     A_DEMOV_I1_I2[2].3
				;841		PP_SignalStregth:		
				;842				MOV	A, a_DataHeader
				PP_SignalStregth:
0179	4721	mov     a, A_DATAHEADER
				;843				XOR	A, 001H
017A	0C01	xor     a, 1H
				;844				SNZ	STATUS.2
017B	390A	snz     Z
				;845				JMP	PP_EndPackage
017C	2980	jmp     PP_EndPackage
				;846	
				;847				MOV	A, a_DataMessageB0
017D	4722	mov     a, A_DATAMESSAGEB0
				;848				MOV	a_SSP0x01_B0, A
017E	40D7	mov     A_SSP0X01_B0, a
				;849				JMP	Phase_IdentConfi
017F	2987	jmp     Phase_IdentConfi
				;850		PP_EndPackage:		
				;851				MOV	A, a_DataHeader
				PP_EndPackage:
0180	4721	mov     a, A_DATAHEADER
				;852				XOR	A, 002H
0181	0C02	xor     a, 2H
				;853				SNZ	STATUS.2
0182	390A	snz     Z
				;854				JMP	Status_PowerDown
0183	2B0D	jmp     Status_PowerDown
				;855				
				;856				CALL	EndPowCMD0x02Decode
0184	62E7	call    EndPowCMD0x02Decode
				;857				SZ	fg_EndPowDown				; for PP timing
0185	7E52	sz      A_LOOPITERATION[1].4
				;858				JMP	Status_PowerDown
0186	2B0D	jmp     Status_PowerDown
				;859			
				;860	;----------Qi Identification & Configuration Phase-----------
				;861		Phase_IdentConfi:
				;862				CLR	fg_0x02PowDownReconfigure
				Phase_IdentConfi:
0187	7646	clr     A_TEMP0[1].4
				;863				CLR	fg_CEinput
0188	76D2	clr     A_LOOPITERATION[1].5
				;864		PIC_Tnext:
				;865				CLR WDT
				PIC_Tnext:
0189	0001	clr     wdt
				;866				SET	fg_TimeOut
018A	7202	set     A_PARPLLFL[1].4
				;867				MOV	A, c_IniIdeConTnextMutipleTimeL		; Tnext <= 21ms
018B	0F1A	mov     a, 1AH
				;868				MOV	a_MutipleTimeLSTM, A
018C	4085	mov     A_MUTIPLETIMELSTM, a
				;869				MOV	A, c_IniIdeConTnextMutipleTimeH
018D	0F01	mov     a, 1H
				;870				MOV	a_MutipleTimeHSTM, A
018E	4086	mov     A_MUTIPLETIMEHSTM, a
				;871				SZ	a_MutipleTimeHSTM
018F	5086	sz      A_MUTIPLETIMEHSTM
				;872				SET	fg_MutipleTimeHflagSTM
0190	7182	set     A_PARPLLFL[1].3
				;873	
				;874				SET	fg_BaseTimeSTM				; TM0(STM) basetime flag reset
0191	7102	set     A_PARPLLFL[1].2
				;875				SET	TM0C0.3					; TM0C0[3] (T0ON-bit) = 1 as TM0 ON
0192	31C3	set     T0ON
				;876				CALL	DemoVI1I2swEN
0193	26BD	call    DemoVI1I2swEN
				;877				CALL	ReciPackageDataUnitPreee1
0194	60FF	call    ReciPackageDataUnitPreee1
				;878				SNZ	fg_TimeOut
0195	7A02	snz     A_PARPLLFL[1].4
				;879				JMP	Status_PowerDown
0196	2B0D	jmp     Status_PowerDown
				;880	
				;881				CLR	TM0C0.3					; TM0C0[3] (T0ON-bit) = 0 as TM0 OFF
0197	35C3	clr     T0ON
				;882		PIC_Tmax:
				;883				SET	fg_TimeOut
				PIC_Tmax:
0198	7202	set     A_PARPLLFL[1].4
				;884				MOV	A, c_IniIdeConTmaxMutipleTimeL		; Tmax <= 170ms
0199	0F34	mov     a, 34H
				;885				MOV	a_MutipleTimeLSTM, A
019A	4085	mov     A_MUTIPLETIMELSTM, a
				;886				MOV	A, c_IniIdeConTmaxMutipleTimeH
019B	0F0D	mov     a, DH
				;887				MOV	a_MutipleTimeHSTM, A
019C	4086	mov     A_MUTIPLETIMEHSTM, a
				;888				SZ	a_MutipleTimeHSTM
019D	5086	sz      A_MUTIPLETIMEHSTM
				;889				SET	fg_MutipleTimeHflagSTM
019E	7182	set     A_PARPLLFL[1].3
				;890	
				;891				SET	fg_BaseTimeSTM				; TM0(STM) basetime flag reset
019F	7102	set     A_PARPLLFL[1].2
				;892				SET	TM0C0.3					; TM0C0[3] (T0ON-bit) = 1 as TM0 ON
01A0	31C3	set     T0ON
				;893		PIC_Tmax1:
				;894				CALL	ReciPackageDataUnit
				PIC_Tmax1:
01A1	6133	call    ReciPackageDataUnit
				;895				CALL	DemoVI1I2swDisEN
01A2	26C7	call    DemoVI1I2swDisEN
				;896				SNZ	fg_TimeOut
01A3	7A02	snz     A_PARPLLFL[1].4
				;897				JMP	Status_PowerDown
01A4	2B0D	jmp     Status_PowerDown
				;898	
				;899				SZ	fg_DataByteCNTFull
01A5	7E89	sz      A_DEMOV_I1_I2[2].5
				;900				JMP	PIC_Tmax2
01A6	29A9	jmp     PIC_Tmax2
				;901				
				;902				SNZ	fg_ChecksumBit
01A7	7909	snz     A_DEMOV_I1_I2[2].2
				;903				JMP	Status_PowerDown ;;LAB test
01A8	2B0D	jmp     Status_PowerDown
				;904		PIC_Tmax2:		
				;905				CALL	ExtractPacData
				PIC_Tmax2:
01A9	63BB	call    ExtractPacData
				;906				CLR	TM0C0.3					; TM0C0[3] (T0ON-bit) = 0 as TM0 OFF
01AA	35C3	clr     T0ON
				;907				SET	fg_TimeOut
01AB	7202	set     A_PARPLLFL[1].4
				;908		PIC_ErrData:
				;909				SZ	fg_DataByteCNTFull
				PIC_ErrData:
01AC	7E89	sz      A_DEMOV_I1_I2[2].5
				;910				JMP	PIC_IdentPac0x71			
01AD	29B1	jmp     PIC_IdentPac0x71
				;911				
				;912				SZ	fg_PacDataOK
01AE	7D89	sz      A_DEMOV_I1_I2[2].3
				;913				JMP	Status_PowerDown
01AF	2B0D	jmp     Status_PowerDown
				;914				;JMP	PIC_TmaxReCheck
				;915				SET	fg_PacDataOK
01B0	7189	set     A_DEMOV_I1_I2[2].3
				;916				
				;917		PIC_IdentPac0x71:
				;918				CLR WDT
				PIC_IdentPac0x71:
01B1	0001	clr     wdt
				;919				CLR	fg_DataByteCNTFull
01B2	7689	clr     A_DEMOV_I1_I2[2].5
				;920				SZ	fg_Idet
01B3	7FC6	sz      A_TEMP0[1].7
				;921				JMP	PIC_PowContlHoldOffPac0x06
01B4	29F3	jmp     PIC_PowContlHoldOffPac0x06
				;922				
				;923				SZ	fg_ExIdet0x81
01B5	7F46	sz      A_TEMP0[1].6
				;924				JMP	PIC_ExIdentPac0x81
01B6	29DC	jmp     PIC_ExIdentPac0x81
				;925	
				;926				MOV	A, a_DataHeader
01B7	4721	mov     a, A_DATAHEADER
				;927				XOR	A, 071H
01B8	0C71	xor     a, 71H
				;928				SNZ	STATUS.2
01B9	390A	snz     Z
				;929				JMP	Status_PowerDown
01BA	2B0D	jmp     Status_PowerDown
				;930			
				;931				MOV	A, a_DataMessageB0
01BB	4722	mov     a, A_DATAMESSAGEB0
				;932				MOV	a_IP0x71_B0, A
01BC	40DD	mov     A_IP0X71_B0, a
				;933				MOV	A, a_DataMessageB1
01BD	4723	mov     a, A_DATAMESSAGEB1
				;934				MOV	a_IP0x71_B1, A
01BE	40DE	mov     A_IP0X71_B1, a
				;935				MOV	A, a_DataMessageB2
01BF	4724	mov     a, A_DATAMESSAGEB2
				;936				MOV	a_IP0x71_B2, A
01C0	40DF	mov     A_IP0X71_B2, a
				;937				SZ	a_IP0x71_B1
01C1	50DE	sz      A_IP0X71_B1
				;938				JMP	PIC_IdentPac0x71_TI
01C2	29C6	jmp     PIC_IdentPac0x71_TI
				;939	
				;940				XOR	A, 010H
01C3	0C10	xor     a, 10H
				;941				SZ	STATUS.2
01C4	3D0A	sz      Z
				;942				SET	fg_RxTI
01C5	71D6	set     A_LOOPITERATION[5].3
				;943			PIC_IdentPac0x71_TI:
				;944				MOV	A, a_IP0x71_B1
				PIC_IdentPac0x71_TI:
01C6	475E	mov     a, A_IP0X71_B1
				;945				XOR	A, 034H
01C7	0C34	xor     a, 34H
				;946				SNZ	STATUS.2
01C8	390A	snz     Z
				;947				JMP	PIC_IdentPac0x71_Conti
01C9	29CE	jmp     PIC_IdentPac0x71_Conti
				;948	
				;949				MOV	A, a_IP0x71_B2
01CA	475F	mov     a, A_IP0X71_B2
				;950				XOR	A, 033H
01CB	0C33	xor     a, 33H
				;951				SZ	STATUS.2
01CC	3D0A	sz      Z
				;952				SET	fg_RxPana
01CD	7256	set     A_LOOPITERATION[5].4
				;953			PIC_IdentPac0x71_Conti:
				;954				MOV	A, a_DataMessageB3
				PIC_IdentPac0x71_Conti:
01CE	4725	mov     a, A_DATAMESSAGEB3
				;955				MOV	a_IP0x71_B3, A
01CF	40E0	mov     A_IP0X71_B3, a
				;956				MOV	A, a_DataMessageB4
01D0	4726	mov     a, A_DATAMESSAGEB4
				;957				MOV	a_IP0x71_B4, A
01D1	40E1	mov     A_IP0X71_B4, a
				;958				MOV	A, a_DataMessageB5
01D2	4727	mov     a, A_DATAMESSAGEB5
				;959				MOV	a_IP0x71_B5, A
01D3	40E2	mov     A_IP0X71_B5, a
				;960				MOV	A, a_DataMessageB6
01D4	4728	mov     a, A_DATAMESSAGEB6
				;961				MOV	a_IP0x71_B6, A
01D5	40E3	mov     A_IP0X71_B6, a
				;962				SNZ	a_IP0x71_B3.7
01D6	7BE0	snz     A_IP0X71_B3.7
				;963				JMP	PIC_IdentPac0x71_1
01D7	29DA	jmp     PIC_IdentPac0x71_1
				;964	
				;965				SET	fg_ExIdet0x81
01D8	7346	set     A_TEMP0[1].6
				;966				JMP	PIC_Tnext
01D9	2989	jmp     PIC_Tnext
				;967		PIC_IdentPac0x71_1:
				;968				SET	fg_Idet
				PIC_IdentPac0x71_1:
01DA	73C6	set     A_TEMP0[1].7
				;969				JMP	PIC_Tnext	
01DB	2989	jmp     PIC_Tnext
				;970		PIC_ExIdentPac0x81:
				;971				MOV	A, a_DataHeader
				PIC_ExIdentPac0x81:
01DC	4721	mov     a, A_DATAHEADER
				;972				XOR	A, 081H
01DD	0C81	xor     a, 81H
				;973				SNZ	STATUS.2
01DE	390A	snz     Z
				;974				JMP	Status_PowerDown
01DF	2B0D	jmp     Status_PowerDown
				;975			
				;976				MOV	A, a_DataMessageB0
01E0	4722	mov     a, A_DATAMESSAGEB0
				;977				MOV	a_ExIP0x81_B0, A
01E1	40E4	mov     A_EXIP0X81_B0, a
				;978				MOV	A, a_DataMessageB1
01E2	4723	mov     a, A_DATAMESSAGEB1
				;979				MOV	a_ExIP0x81_B1, A
01E3	40E5	mov     A_EXIP0X81_B1, a
				;980				MOV	A, a_DataMessageB2
01E4	4724	mov     a, A_DATAMESSAGEB2
				;981				MOV	a_ExIP0x81_B2, A
01E5	40E6	mov     A_EXIP0X81_B2, a
				;982				MOV	A, a_DataMessageB3
01E6	4725	mov     a, A_DATAMESSAGEB3
				;983				MOV	a_ExIP0x81_B3, A
01E7	40E7	mov     A_EXIP0X81_B3, a
				;984				MOV	A, a_DataMessageB4
01E8	4726	mov     a, A_DATAMESSAGEB4
				;985				MOV	a_ExIP0x81_B4, A
01E9	40E8	mov     A_EXIP0X81_B4, a
				;986				MOV	A, a_DataMessageB5
01EA	4727	mov     a, A_DATAMESSAGEB5
				;987				MOV	a_ExIP0x81_B5, A
01EB	40E9	mov     A_EXIP0X81_B5, a
				;988				MOV	A, a_DataMessageB6
01EC	4728	mov     a, A_DATAMESSAGEB6
				;989				MOV	a_ExIP0x81_B6, A
01ED	40EA	mov     A_EXIP0X81_B6, a
				;990				MOV	A, a_DataMessageB7
01EE	4729	mov     a, A_DATAMESSAGEB7
				;991				MOV	a_ExIP0x81_B7, A
01EF	40EB	mov     A_EXIP0X81_B7, a
				;992				SET	fg_Idet
01F0	73C6	set     A_TEMP0[1].7
				;993				CLR	fg_ExIdet0x81
01F1	7746	clr     A_TEMP0[1].6
				;994				JMP	PIC_Tnext
01F2	2989	jmp     PIC_Tnext
				;995		PIC_PowContlHoldOffPac0x06:
				;996				MOV	A, a_DataHeader
				PIC_PowContlHoldOffPac0x06:
01F3	4721	mov     a, A_DATAHEADER
				;997				XOR	A, 071H
01F4	0C71	xor     a, 71H
				;998				SZ	STATUS.2
01F5	3D0A	sz      Z
				;999				JMP	Status_PowerDown
01F6	2B0D	jmp     Status_PowerDown
				;1000	
				;1001				MOV	A, a_DataHeader
01F7	4721	mov     a, A_DATAHEADER
				;1002				XOR	A, 006H
01F8	0C06	xor     a, 6H
				;1003				SNZ	STATUS.2
01F9	390A	snz     Z
				;1004				JMP	PIC_ProprietaryPac
01FA	2A00	jmp     PIC_ProprietaryPac
				;1005				
				;1006				INC	a_OptConfiCNT
01FB	54F2	inc     A_OPTCONFICNT
				;1007				MOV	A, a_DataMessageB0
01FC	4722	mov     a, A_DATAMESSAGEB0
				;1008				MOV	a_PCHO0x06_B0, A
01FD	40D9	mov     A_PCHO0X06_B0, a
				;1009				CLR	fg_Tdelay
01FE	7452	clr     A_LOOPITERATION[1].0
				;1010				JMP	PIC_Tnext
01FF	2989	jmp     PIC_Tnext
				;1011		PIC_ProprietaryPac:
				;1012				MOV	A, a_DataHeader
				PIC_ProprietaryPac:
0200	4721	mov     a, A_DATAHEADER
				;1013				XOR	A, 018H
0201	0C18	xor     a, 18H
				;1014				SNZ	STATUS.2
0202	390A	snz     Z
				;1015				JMP	PIC_ProprietaryPac1
0203	2A06	jmp     PIC_ProprietaryPac1
				;1016				
				;1017				INC	a_OptConfiCNT
0204	54F2	inc     A_OPTCONFICNT
				;1018				JMP	PIC_Tnext
0205	2989	jmp     PIC_Tnext
				;1019		PIC_ProprietaryPac1:
				;1020				MOV	A, a_DataHeader
				PIC_ProprietaryPac1:
0206	4721	mov     a, A_DATAHEADER
				;1021				XOR	A, 019H
0207	0C19	xor     a, 19H
				;1022				SNZ	STATUS.2
0208	390A	snz     Z
				;1023				JMP	PIC_ProprietaryPac2
0209	2A0C	jmp     PIC_ProprietaryPac2
				;1024				
				;1025				INC	a_OptConfiCNT
020A	54F2	inc     A_OPTCONFICNT
				;1026				JMP	PIC_Tnext
020B	2989	jmp     PIC_Tnext
				;1027		PIC_ProprietaryPac2:
				;1028				MOV	A, a_DataHeader
				PIC_ProprietaryPac2:
020C	4721	mov     a, A_DATAHEADER
				;1029				XOR	A, 028H
020D	0C28	xor     a, 28H
				;1030				SNZ	STATUS.2
020E	390A	snz     Z
				;1031				JMP	PIC_ProprietaryPac3
020F	2A12	jmp     PIC_ProprietaryPac3
				;1032				
				;1033				INC	a_OptConfiCNT
0210	54F2	inc     A_OPTCONFICNT
				;1034				JMP	PIC_Tnext
0211	2989	jmp     PIC_Tnext
				;1035		PIC_ProprietaryPac3:
				;1036				MOV	A, a_DataHeader
				PIC_ProprietaryPac3:
0212	4721	mov     a, A_DATAHEADER
				;1037				XOR	A, 029H
0213	0C29	xor     a, 29H
				;1038				SNZ	STATUS.2
0214	390A	snz     Z
				;1039				JMP	PIC_ProprietaryPac4
0215	2A18	jmp     PIC_ProprietaryPac4
				;1040				
				;1041				INC	a_OptConfiCNT
0216	54F2	inc     A_OPTCONFICNT
				;1042				JMP	PIC_Tnext
0217	2989	jmp     PIC_Tnext
				;1043		PIC_ProprietaryPac4:
				;1044				MOV	A, a_DataHeader
				PIC_ProprietaryPac4:
0218	4721	mov     a, A_DATAHEADER
				;1045				XOR	A, 038H
0219	0C38	xor     a, 38H
				;1046				SNZ	STATUS.2
021A	390A	snz     Z
				;1047				JMP	PIC_ProprietaryPac5
021B	2A1E	jmp     PIC_ProprietaryPac5
				;1048				
				;1049				INC	a_OptConfiCNT
021C	54F2	inc     A_OPTCONFICNT
				;1050				JMP	PIC_Tnext
021D	2989	jmp     PIC_Tnext
				;1051		PIC_ProprietaryPac5:
				;1052				MOV	A, a_DataHeader
				PIC_ProprietaryPac5:
021E	4721	mov     a, A_DATAHEADER
				;1053				XOR	A, 048H
021F	0C48	xor     a, 48H
				;1054				SNZ	STATUS.2
0220	390A	snz     Z
				;1055				JMP	PIC_ProprietaryPac6
0221	2A24	jmp     PIC_ProprietaryPac6
				;1056				
				;1057				INC	a_OptConfiCNT
0222	54F2	inc     A_OPTCONFICNT
				;1058				JMP	PIC_Tnext
0223	2989	jmp     PIC_Tnext
				;1059		PIC_ProprietaryPac6:
				;1060				CLR WDT
				PIC_ProprietaryPac6:
0224	0001	clr     wdt
				;1061				MOV	A, a_DataHeader
0225	4721	mov     a, A_DATAHEADER
				;1062				XOR	A, 058H
0226	0C58	xor     a, 58H
				;1063				SNZ	STATUS.2
0227	390A	snz     Z
				;1064				JMP	PIC_ProprietaryPac7
0228	2A2B	jmp     PIC_ProprietaryPac7
				;1065				
				;1066				INC	a_OptConfiCNT
0229	54F2	inc     A_OPTCONFICNT
				;1067				JMP	PIC_Tnext
022A	2989	jmp     PIC_Tnext
				;1068		PIC_ProprietaryPac7:
				;1069				MOV	A, a_DataHeader
				PIC_ProprietaryPac7:
022B	4721	mov     a, A_DATAHEADER
				;1070				XOR	A, 068H
022C	0C68	xor     a, 68H
				;1071				SNZ	STATUS.2
022D	390A	snz     Z
				;1072				JMP	PIC_ProprietaryPac8
022E	2A31	jmp     PIC_ProprietaryPac8
				;1073				
				;1074				INC	a_OptConfiCNT
022F	54F2	inc     A_OPTCONFICNT
				;1075				JMP	PIC_Tnext
0230	2989	jmp     PIC_Tnext
				;1076		PIC_ProprietaryPac8:
				;1077				MOV	A, a_DataHeader
				PIC_ProprietaryPac8:
0231	4721	mov     a, A_DATAHEADER
				;1078				XOR	A, 078H
0232	0C78	xor     a, 78H
				;1079				SNZ	STATUS.2
0233	390A	snz     Z
				;1080				JMP	PIC_ProprietaryPac9
0234	2A37	jmp     PIC_ProprietaryPac9
				;1081				
				;1082				INC	a_OptConfiCNT
0235	54F2	inc     A_OPTCONFICNT
				;1083				JMP	PIC_Tnext
0236	2989	jmp     PIC_Tnext
				;1084		PIC_ProprietaryPac9:
				;1085				MOV	A, a_DataHeader
				PIC_ProprietaryPac9:
0237	4721	mov     a, A_DATAHEADER
				;1086				XOR	A, 084H
0238	0C84	xor     a, 84H
				;1087				SNZ	STATUS.2
0239	390A	snz     Z
				;1088				JMP	PIC_ProprietaryPac10
023A	2A3D	jmp     PIC_ProprietaryPac10
				;1089				
				;1090				INC	a_OptConfiCNT
023B	54F2	inc     A_OPTCONFICNT
				;1091				JMP	PIC_Tnext
023C	2989	jmp     PIC_Tnext
				;1092		PIC_ProprietaryPac10:
				;1093				MOV	A, a_DataHeader
				PIC_ProprietaryPac10:
023D	4721	mov     a, A_DATAHEADER
				;1094				XOR	A, 0A4H
023E	0CA4	xor     a, A4H
				;1095				SNZ	STATUS.2
023F	390A	snz     Z
				;1096				JMP	PIC_ProprietaryPac11
0240	2A43	jmp     PIC_ProprietaryPac11
				;1097				
				;1098				INC	a_OptConfiCNT
0241	54F2	inc     A_OPTCONFICNT
				;1099				JMP	PIC_Tnext
0242	2989	jmp     PIC_Tnext
				;1100		PIC_ProprietaryPac11:
				;1101				MOV	A, a_DataHeader
				PIC_ProprietaryPac11:
0243	4721	mov     a, A_DATAHEADER
				;1102				XOR	A, 0C4H
0244	0CC4	xor     a, C4H
				;1103				SNZ	STATUS.2
0245	390A	snz     Z
				;1104				JMP	PIC_ProprietaryPac12
0246	2A49	jmp     PIC_ProprietaryPac12
				;1105				
				;1106				INC	a_OptConfiCNT
0247	54F2	inc     A_OPTCONFICNT
				;1107				JMP	PIC_Tnext
0248	2989	jmp     PIC_Tnext
				;1108		PIC_ProprietaryPac12:
				;1109				MOV	A, a_DataHeader
				PIC_ProprietaryPac12:
0249	4721	mov     a, A_DATAHEADER
				;1110				XOR	A, 0E2H
024A	0CE2	xor     a, E2H
				;1111				SNZ	STATUS.2
024B	390A	snz     Z
				;1112				JMP	PIC_ProprietaryPac13
024C	2A4F	jmp     PIC_ProprietaryPac13
				;1113				
				;1114				INC	a_OptConfiCNT
024D	54F2	inc     A_OPTCONFICNT
				;1115				JMP	PIC_Tnext
024E	2989	jmp     PIC_Tnext
				;1116		PIC_ProprietaryPac13:
				;1117				MOV	A, a_DataHeader
				PIC_ProprietaryPac13:
024F	4721	mov     a, A_DATAHEADER
				;1118				XOR	A, 0F2H
0250	0CF2	xor     a, F2H
				;1119				SNZ	STATUS.2
0251	390A	snz     Z
				;1120				JMP	PIC_ReservPac
0252	2A55	jmp     PIC_ReservPac
				;1121				
				;1122				INC	a_OptConfiCNT
0253	54F2	inc     A_OPTCONFICNT
				;1123				JMP	PIC_Tnext
0254	2989	jmp     PIC_Tnext
				;1124		PIC_ReservPac:
				;1125				MOV	A, a_DataHeader
				PIC_ReservPac:
0255	4721	mov     a, A_DATAHEADER
				;1126				XOR	A, 051H
0256	0C51	xor     a, 51H
				;1127				SNZ	STATUS.2
0257	390A	snz     Z
				;1128				JMP	PIC_ReservPac0
0258	2A5A	jmp     PIC_ReservPac0
				;1129	
				;1130				JMP	PIC_Config0x51
0259	2A5C	jmp     PIC_Config0x51
				;1131		PIC_ReservPac0:
				;1132				INC	a_OptConfiCNT
				PIC_ReservPac0:
025A	54F2	inc     A_OPTCONFICNT
				;1133				JMP	Status_PowerDown
025B	2B0D	jmp     Status_PowerDown
				;1134		PIC_Config0x51:
				;1135				CLR WDT
				PIC_Config0x51:
025C	0001	clr     wdt
				;1136				MOV	A, a_DataMessageB0
025D	4722	mov     a, A_DATAMESSAGEB0
				;1137				MOV	a_Config0x51_B0, A
025E	40DA	mov     A_CONFIG0X51_B0, a
				;1138				MOV	A, a_DataMessageB2
025F	4724	mov     a, A_DATAMESSAGEB2
				;1139				MOV	a_Config0x51_B2, A
0260	40DB	mov     A_CONFIG0X51_B2, a
				;1140				MOV	A, a_DataMessageB3
0261	4725	mov     a, A_DATAMESSAGEB3
				;1141				MOV	a_Config0x51_B3, A
0262	40DC	mov     A_CONFIG0X51_B3, a
				;1142				MOV	A, a_Config0x51_B2
0263	475B	mov     a, A_CONFIG0X51_B2
				;1143				AND	A, 007H
0264	0E07	and     a, 7H
				;1144				XOR	A, a_OptConfiCNT
0265	4472	xor     a, A_OPTCONFICNT
				;1145				SNZ	STATUS.2
0266	390A	snz     Z
				;1146				JMP	Status_PowerDown
0267	2B0D	jmp     Status_PowerDown
				;1147			
				;1148				CLR	a_OptConfiCNT
0268	5F72	clr     A_OPTCONFICNT
				;1149				CALL	ConfigCMD0x51Decode
0269	6342	call    ConfigCMD0x51Decode
				;1150				SNZ	fg_Tdelay
026A	7852	snz     A_LOOPITERATION[1].0
				;1151				JMP	PIC_Config0x51_1
026B	2A6E	jmp     PIC_Config0x51_1
				;1152				
				;1153				MOV	A, 005H
026C	0F05	mov     a, 5H
				;1154				MOV	a_PCHO0x06_B0, A
026D	40D9	mov     A_PCHO0X06_B0, a
				;1155		PIC_Config0x51_1:
				;1156				;CLR WDT
				;1157				SET	fg_Tdelay
				PIC_Config0x51_1:
026E	7052	set     A_LOOPITERATION[1].0
				;1158				CALL	PowContlHoldCMD0x06Decode
026F	632E	call    PowContlHoldCMD0x06Decode
				;1159				
				;1160				SZ	fg_PCH0x06Abnor
0270	7C53	sz      A_LOOPITERATION[2].0
				;1161				JMP	Status_PowerDown
0271	2B0D	jmp     Status_PowerDown
				;1162				
				;1163					
				;1164	;------------------Qi Power Transfer Phase-------------------Power Transfer
				;1165		Phase_PowerTrans:
				;1166				CLR	fg_Ping
				Phase_PowerTrans:
0272	7655	clr     A_LOOPITERATION[4].4
				;1167		PPT_Ttimeout0:
				;1168				SET	fg_TimeOut
				PPT_Ttimeout0:
0273	7202	set     A_PARPLLFL[1].4
				;1169				CALL	SetTimer1				; Ttimeout <= 1800ms
0274	23D6	call    SetTimer1
				;1170				SET	TM0C0.3																; TM0C0[3] (T0ON-bit) = 1 as TM0 ON;????????check
0275	31C3	set     T0ON
				;1171				CALL	DemoVI1I2swEN
0276	26BD	call    DemoVI1I2swEN
				;1172				CALL	ReciPackageDataUnitPreee1
0277	60FF	call    ReciPackageDataUnitPreee1
				;1173				SNZ	fg_TimeOut
0278	7A02	snz     A_PARPLLFL[1].4
				;1174				JMP	Status_PowerDown
0279	2B0D	jmp     Status_PowerDown
				;1175	
				;1176				CLR	TM0C0.3																; 1 as TM0 ON;(2014/05/15)
027A	35C3	clr     T0ON
				;1177				SET	fg_TimeOut
027B	7202	set     A_PARPLLFL[1].4
				;1178				CALL	SetTimer1				; Ttimeout <= 1800ms
027C	23D6	call    SetTimer1
				;1179				SET	TM0C0.3																; TM0C0[3] (T0ON-bit) = 1 as TM0 ON;????????check
027D	31C3	set     T0ON
				;1180				CALL	ReciPackageDataUnit
027E	6133	call    ReciPackageDataUnit
				;1181				CALL	DemoVI1I2swDisEN
027F	26C7	call    DemoVI1I2swDisEN
				;1182				SNZ	fg_ChecksumBit
0280	7909	snz     A_DEMOV_I1_I2[2].2
				;1183				JMP	PPT_Recheck
0281	2A8D	jmp     PPT_Recheck
				;1184				
				;1185				CALL	ExtractPacData
0282	63BB	call    ExtractPacData
				;1186		PPT_ErrDataCheck0:
				;1187				SZ	fg_PacDataOK
				PPT_ErrDataCheck0:
0283	7D89	sz      A_DEMOV_I1_I2[2].3
				;1188				JMP	PPT_Recheck
0284	2A8D	jmp     PPT_Recheck
				;1189	
				;1190				SET	fg_PacDataOK
0285	7189	set     A_DEMOV_I1_I2[2].3
				;1191				CLR	TM0C0.3															; TM0C0[3] (T0ON-bit) = 0 as TM0 OFF
0286	35C3	clr     T0ON
				;1192				SET	fg_TimeOut
0287	7202	set     A_PARPLLFL[1].4
				;1193		PPT_Command:				
				;1194				CALL	PT_DecodeCommand
				PPT_Command:
0288	6278	call    PT_DecodeCommand
				;1195				SZ	fg_0x02PowDownReconfigure
0289	7E46	sz      A_TEMP0[1].4
				;1196				JMP	Phase_IdentConfi
028A	2987	jmp     Phase_IdentConfi
				;1197	
				;1198				SZ	fg_EndPowDown
028B	7E52	sz      A_LOOPITERATION[1].4
				;1199				JMP	Status_PowerDown
028C	2B0D	jmp     Status_PowerDown
				;1200		PPT_Recheck:
				;1201				SZ	fg_CEinput
				PPT_Recheck:
028D	7ED2	sz      A_LOOPITERATION[1].5
				;1202				CALL	PT_ReceiPowerCNT
028E	23C4	call    PT_ReceiPowerCNT
				;1203	
				;1204				MOV	A, 00AH
028F	0F0A	mov     a, AH
				;1205				MOV	a_ExIP0x81_B0, A
0290	40E4	mov     A_EXIP0X81_B0, a
				;1206				CLR	PB.2					;Green LED
0291	351A	clr     PB2
				;1207				SET	PB.3					;Red LED
0292	319A	set     PB3
				;1208		PPT_Nor:																			;----------?????????check
				;1209				CLR WDT
				PPT_Nor:
0293	0001	clr     wdt
				;1210				SNZ	fg_CEinput				; To check first data for CE or RP
0294	7AD2	snz     A_LOOPITERATION[1].5
				;1211				JMP	PPT_NextPac
0295	2ACA	jmp     PPT_NextPac
				;1212				SET	fg_TimeOut
0296	7202	set     A_PARPLLFL[1].4
				;1213	
				;1214				MOV	A, a_0x06TdelayML			; 5ms <= Tdelay <= 205ms
0297	476F	mov     a, A_0X06TDELAYML
				;1215				MOV	a_MutipleTimeLCTM, A
0298	4083	mov     A_MUTIPLETIMELCTM, a
				;1216				MOV	A, a_0x06TdelayMH
0299	4770	mov     a, A_0X06TDELAYMH
				;1217				MOV	a_MutipleTimeHCTM, A
029A	4084	mov     A_MUTIPLETIMEHCTM, a
				;1218				SZ	a_MutipleTimeHCTM
029B	5084	sz      A_MUTIPLETIMEHCTM
				;1219				SET	fg_MutipleTimeHflagCTM
029C	7082	set     A_PARPLLFL[1].1
				;1220		PPT_Tdelay:
				;1221				CALL	DelayTimer
				PPT_Tdelay:
029D	239A	call    DelayTimer
				;1222		PPT_CellCurrJ:		
				;1223				CALL	PID_SenPriCoilCurrWay65Double
				PPT_CellCurrJ:
029E	6348	call    PID_SenPriCoilCurrWay65Double
				;1224		PPT_Tactive:
				;1225				CLR	TM0C0.3					; TM0C0[3] (T0ON-bit) = 0 as TM0 OFF
				PPT_Tactive:
029F	35C3	clr     T0ON
				;1226				SET	fg_TimeOut
02A0	7202	set     A_PARPLLFL[1].4
				;1227				MOV	A, c_IniPowTrTactMutipleTimeL		; Tactive <= 21ms
02A1	0FA4	mov     a, A4H
				;1228				MOV	a_MutipleTimeLSTM, A
02A2	4085	mov     A_MUTIPLETIMELSTM, a
				;1229				MOV	A, c_IniPowTrTactMutipleTimeH
02A3	0F01	mov     a, 1H
				;1230				MOV	a_MutipleTimeHSTM, A
02A4	4086	mov     A_MUTIPLETIMEHSTM, a
				;1231				SZ	a_MutipleTimeHSTM
02A5	5086	sz      A_MUTIPLETIMEHSTM
				;1232				SET	fg_MutipleTimeHflagSTM
02A6	7182	set     A_PARPLLFL[1].3
				;1233	
				;1234				SET	fg_BaseTimeSTM				; TM0(STM) basetime flag reset
02A7	7102	set     A_PARPLLFL[1].2
				;1235				SET	TM0C0.3					; TM0C0[3] (T0ON-bit) = 1 as TM0 ON
02A8	31C3	set     T0ON
				;1236				
				;1237				;---PID Algorithm & Fpwm Output---
				;1238				SZ	fg_0x51NonPID
02A9	7DD2	sz      A_LOOPITERATION[1].3
				;1239				JMP	PPT_TactiveNoPID
02AA	2ABE	jmp     PPT_TactiveNoPID
				;1240	
				;1241				;JMP	PPT_TactivePID
				;1242			PPT_TactivePID:
				;1243				CALL	PT_PIDCE4
				PPT_TactivePID:
02AB	64A8	call    L0CA8
				;1244			PPT_TactivePID1:
				;1245	;			;;~~~FOD Temperture Check~~~
				;1246				SZ	fg_PLLDown
				PPT_TactivePID1:
02AC	7E54	sz      A_LOOPITERATION[3].4
				;1247				JMP	PPT_TactiveCheck
02AD	2ABF	jmp     PPT_TactiveCheck
				;1248	
				;1249				SZ	fg_PLLPana
02AE	7ED4	sz      A_LOOPITERATION[3].5
				;1250				JMP	PPT_TactiveCheck
02AF	2ABF	jmp     PPT_TactiveCheck
				;1251				
				;1252				SZ	a_0x03ContlErr
02B0	50EC	sz      A_0X03CONTLERR
				;1253				JMP	PPT_TactivePID_Cal
02B1	2ABA	jmp     PPT_TactivePID_Cal
				;1254				
				;1255				;; CNT=2, 5
				;1256				SDZ	a_ExIP0x81_B0
02B2	57E4	sdz     A_EXIP0X81_B0
				;1257				JMP	PPT_TactiveCheck
02B3	2ABF	jmp     PPT_TactiveCheck
				;1258	
				;1259				SET	fg_PLLDown
02B4	7254	set     A_LOOPITERATION[3].4
				;1260				SZ	fg_CEThrPana
02B5	7D54	sz      A_LOOPITERATION[3].2
				;1261				SET	fg_PLLPana
02B6	72D4	set     A_LOOPITERATION[3].5
				;1262	
				;1263				MOV	A, 00AH
02B7	0F0A	mov     a, AH
				;1264				MOV	a_ExIP0x81_B0, A
02B8	40E4	mov     A_EXIP0X81_B0, a
				;1265				JMP	PPT_TactiveCheck
02B9	2ABF	jmp     PPT_TactiveCheck
				;1266			PPT_TactivePID_Cal:	
				;1267				SZ	fg_VinLow
				PPT_TactivePID_Cal:
02BA	7FD4	sz      A_LOOPITERATION[3].7
				;1268				JMP	PPT_TactiveCheck
02BB	2ABF	jmp     PPT_TactiveCheck
				;1269	
				;1270				;JMP	PPT_TactivePID_Cal0
				;1271			PPT_TactivePID_Cal0:
				;1272				CALL	PT_PIDandPWM
				PPT_TactivePID_Cal0:
02BC	23E6	call    PT_PIDandPWM
				;1273				JMP	PPT_TactiveCheck
02BD	2ABF	jmp     PPT_TactiveCheck
				;1274			PPT_TactiveNoPID:
				;1275				JMP	Status_PowerDown
				PPT_TactiveNoPID:
02BE	2B0D	jmp     Status_PowerDown
				;1276			PPT_TactiveCheck:	
				;1277				CLR WDT
				PPT_TactiveCheck:
02BF	0001	clr     wdt
				;1278				SNZ	fg_TimeOut
02C0	7A02	snz     A_PARPLLFL[1].4
				;1279				JMP	Status_PowerDown
02C1	2B0D	jmp     Status_PowerDown
				;1280		PPT_Tsettle:
				;1281				CLR	TM0C0.3					; TM0C0[3] (T0ON-bit) = 0 as TM0 OFF (STM)
				PPT_Tsettle:
02C2	35C3	clr     T0ON
				;1282				MOV	A, c_IniPowTrTsettleMutipleTimeL	; Tsettle min = 3ms
02C3	0F78	mov     a, 78H
				;1283				MOV	a_MutipleTimeLCTM, A
02C4	4083	mov     A_MUTIPLETIMELCTM, a
				;1284				MOV	A, c_IniPowTrTsettleMutipleTimeH
02C5	0F00	mov     a, 0H
				;1285				MOV	a_MutipleTimeHCTM, A
02C6	4084	mov     A_MUTIPLETIMEHCTM, a
				;1286				SZ	a_MutipleTimeHCTM
02C7	5084	sz      A_MUTIPLETIMEHCTM
				;1287				SET	fg_MutipleTimeHflagCTM
02C8	7082	set     A_PARPLLFL[1].1
				;1288	
				;1289				CALL	DelayTimer
02C9	239A	call    DelayTimer
				;1290		PPT_NextPac:
				;1291				CLR	TM0C0.3					; TM0C0[3] (T0ON-bit) = 0 as TM0 OFF (STM)
				PPT_NextPac:
02CA	35C3	clr     T0ON
				;1292				SET	fg_TimeOut
02CB	7202	set     A_PARPLLFL[1].4
				;1293				CALL	SetTimer2
02CC	23DE	call    SetTimer2
				;1294				SET	TM0C0.3					; TM0C0[3] (T0ON-bit) = 1 as TM0 ON (STM)
02CD	31C3	set     T0ON
				;1295				SET	fg_DemoDetect
02CE	70D6	set     A_LOOPITERATION[5].1
				;1296		PPT_NextPac1:
				;1297				CLR	WDT
				PPT_NextPac1:
02CF	0001	clr     wdt
				;1298				SZ	fg_CEinput
02D0	7ED2	sz      A_LOOPITERATION[1].5
				;1299				CALL	PT_ReceiPowerCNT
02D1	23C4	call    PT_ReceiPowerCNT
				;1300		PPT_DetectVin:
				;1301				CALL	DetectVin
				PPT_DetectVin:
02D2	61E4	call    DetectVin
				;1302		;;~~~Enable INT for Demodulation SW ~~~			
				;1303		PPT_DemoVI1I2sw3:
				;1304				CLR 	WDT			
				PPT_DemoVI1I2sw3:
02D3	0001	clr     wdt
				;1305				CALL	DemoVI1I2swEN
02D4	26BD	call    DemoVI1I2swEN
				;1306				CALL	ReciPackageDataUnitPreee1
02D5	60FF	call    ReciPackageDataUnitPreee1
				;1307				SZ	fg_DemoDetectTimeOut
02D6	7D56	sz      A_LOOPITERATION[5].2
				;1308				JMP	PPT_DemoVI1I2sw4
02D7	2ADF	jmp     PPT_DemoVI1I2sw4
				;1309	
				;1310				SNZ	fg_TimeOut
02D8	7A02	snz     A_PARPLLFL[1].4
				;1311				JMP	Status_PowerDown
02D9	2B0D	jmp     Status_PowerDown
				;1312	
				;1313				CLR	TM0C0.3					; TM0C0[3] (T0ON-bit) = 0 as TM0 OFF
02DA	35C3	clr     T0ON
				;1314				SET	fg_TimeOut
02DB	7202	set     A_PARPLLFL[1].4
				;1315				CALL	SetTimer2
02DC	23DE	call    SetTimer2
				;1316				SET	TM0C0.3					; TM0C0[3] (T0ON-bit) = 1 as TM0 ON;
02DD	31C3	set     T0ON
				;1317				CALL	ReciPackageDataUnit
02DE	6133	call    ReciPackageDataUnit
				;1318		;;~~~disenable INT for Demodulation SW ~~~			
				;1319		PPT_DemoVI1I2sw4:
				;1320				CALL	DemoVI1I2swDisEN
				PPT_DemoVI1I2sw4:
02DF	26C7	call    DemoVI1I2swDisEN
				;1321				SZ	fg_DemoDetectTimeOut
02E0	7D56	sz      A_LOOPITERATION[5].2
				;1322				JMP	PPT_DemoVI1I2Select2
02E1	2AEE	jmp     PPT_DemoVI1I2Select2
				;1323	
				;1324				SNZ	fg_TimeOut
02E2	7A02	snz     A_PARPLLFL[1].4
				;1325				JMP	Status_PowerDown
02E3	2B0D	jmp     Status_PowerDown
				;1326	
				;1327				CALL	ExtractPacData
02E4	63BB	call    ExtractPacData
				;1328		PPT_ErrDataCheck2:
				;1329				SZ	fg_DataByteCNTFull
				PPT_ErrDataCheck2:
02E5	7E89	sz      A_DEMOV_I1_I2[2].5
				;1330				JMP	PPT_ErrDataCheck3
02E6	2AEA	jmp     PPT_ErrDataCheck3
				;1331				
				;1332				SZ	fg_PacDataOK
02E7	7D89	sz      A_DEMOV_I1_I2[2].3
				;1333				JMP	PPT_DemoVI1I2Select2_1
02E8	2AF1	jmp     PPT_DemoVI1I2Select2_1
				;1334				
				;1335				SET	fg_PacDataOK
02E9	7189	set     A_DEMOV_I1_I2[2].3
				;1336		PPT_ErrDataCheck3:
				;1337				CLR	fg_DataByteCNTFull
				PPT_ErrDataCheck3:
02EA	7689	clr     A_DEMOV_I1_I2[2].5
				;1338				CLR	TM0C0.3					; TM0C0[3] (T0ON-bit) = 0 as TM0 OFF
02EB	35C3	clr     T0ON
				;1339				SET	fg_TimeOut
02EC	7202	set     A_PARPLLFL[1].4
				;1340				JMP	PPT_Command2
02ED	2AF3	jmp     PPT_Command2
				;1341					
				;1342		;;~~~Demodulation SW~~~
				;1343		PPT_DemoVI1I2Select2:
				;1344				CLR	fg_DemoDetectTimeOut
				PPT_DemoVI1I2Select2:
02EE	7556	clr     A_LOOPITERATION[5].2
				;1345				CALL	DemoVI1I2Select
02EF	26B5	call    DemoVI1I2Select
				;1346				JMP	PPT_DemoVI1I2sw3
02F0	2AD3	jmp     PPT_DemoVI1I2sw3
				;1347		
				;1348		PPT_DemoVI1I2Select2_1:
				;1349				CALL	DemoVI1I2Select
				PPT_DemoVI1I2Select2_1:
02F1	26B5	call    DemoVI1I2Select
				;1350				JMP	PPT_NextPac
02F2	2ACA	jmp     PPT_NextPac
				;1351					
				;1352		PPT_Command2:
				;1353				CALL	PT_DecodeCommand
				PPT_Command2:
02F3	6278	call    PT_DecodeCommand
				;1354				CLR	fg_DemoDetectTimeOut
02F4	7556	clr     A_LOOPITERATION[5].2
				;1355				SNZ	fg_0x02PowDownReconfigure
02F5	7A46	snz     A_TEMP0[1].4
				;1356				JMP	PPT_Command21
02F6	2AFA	jmp     PPT_Command21
				;1357	
				;1358				SNZ	fg_VinLow
02F7	7BD4	snz     A_LOOPITERATION[3].7
				;1359				JMP	Phase_IdentConfi
02F8	2987	jmp     Phase_IdentConfi
				;1360	
				;1361				JMP	Status_PowerDown
02F9	2B0D	jmp     Status_PowerDown
				;1362		PPT_Command21:
				;1363				SZ	fg_FODTemp60					; Temp 60 Check
				PPT_Command21:
02FA	7D46	sz      A_TEMP0[1].2
				;1364				JMP	Status_PowerDown
02FB	2B0D	jmp     Status_PowerDown
				;1365	
				;1366				SZ	fg_EndPowDown
02FC	7E52	sz      A_LOOPITERATION[1].4
				;1367				JMP	Status_PowerDown
02FD	2B0D	jmp     Status_PowerDown
				;1368				
				;1369				SZ	fg_FODEfficLow			
02FE	7ED5	sz      A_LOOPITERATION[4].5
				;1370				JMP	Status_PowerDown
02FF	2B0D	jmp     Status_PowerDown
				;1371		Phase_PowerTransEnd:		
				;1372				JMP	PPT_Nor
				Phase_PowerTransEnd:
0300	2A93	jmp     PPT_Nor
				;1373	
				;1374	
				;1375	;---------------------Qi Power Down Status-------------------Go Back to Selection and Power OFF 
				;1376		Status_DetectNoise:
				;1377				CLR WDT
				Status_DetectNoise:
0301	0001	clr     wdt
				;1378				CALL	Delay1
0302	238A	call    Delay1
				;1379				MOV	A, 050H
0303	0F50	mov     a, 50H
				;1380				MOV	PWMC, A
0304	00E3	mov     PWMC, a
				;1381				CLR	INTC0.2					; DEME-bit = 0 as Demodulation OFF
0305	3510	clr     DEME
				;1382				CLR	DEMC0					; Demodulation OFF
0306	1F64	clr     DEMC0
				;1383				CLR	INTC0.5
0307	3690	clr     DEMF
				;1384				MOV	A, 008H
0308	0F08	mov     a, 8H
				;1385				MOV	a_r_DetectCNT, A
0309	40F9	mov     A_R_DETECTCNT, a
				;1386				CLR	CKGEN.7					; 1 as VCO OFF
030A	37E0	clr     PLLEN
				;1387				CLR	INTC0.0					; 0 as EMI OFF
030B	3410	clr     EMI
				;1388				HALT
030C	0002	halt
				;1389		Status_PowerDown:
				;1390				SET	PA.5
				Status_PowerDown:
030D	3292	set     PA5
				;1391				MOV	A, 03EH
030E	0F3E	mov     a, 3EH
				;1392				MOV	PLLFL, A
030F	00E1	mov     PLLFL, a
				;1393				MOV	A, 003H
0310	0F03	mov     a, 3H
				;1394				MOV	PLLFH, A
0311	00E2	mov     PLLFH, a
				;1395				MOV	A, c_IniPIDMutilpleTimeL
0312	0F0A	mov     a, AH
				;1396				MOV	a_MutipleTimeLCTM, A
0313	4083	mov     A_MUTIPLETIMELCTM, a
				;1397				MOV	A, c_IniPIDMutilpleTimeH
0314	0F00	mov     a, 0H
				;1398				MOV	a_MutipleTimeHCTM, A
0315	4084	mov     A_MUTIPLETIMEHCTM, a
				;1399				SZ	a_MutipleTimeHCTM
0316	5084	sz      A_MUTIPLETIMEHCTM
				;1400				SET	fg_MutipleTimeHflagCTM
0317	7082	set     A_PARPLLFL[1].1
				;1401	
				;1402				CALL	DelayTimer
0318	239A	call    DelayTimer
				;1403				CLR WDT
0319	0001	clr     wdt
				;1404				MOV	A, 050H					;  PWM output OFF
031A	0F50	mov     a, 50H
				;1405				MOV	PWMC, A
031B	00E3	mov     PWMC, a
				;1406				CLR	INTC0.2					; DEME-bit = 0 as Demodulation OFF
031C	3510	clr     DEME
				;1407				CLR	DEMC0					; Demodulation OFF
031D	1F64	clr     DEMC0
				;1408				CLR	INTC0.5
031E	3690	clr     DEMF
				;1409				CLR	TM0C0.3					; TM0C0[3] (T0ON-bit) = 0 as TM0 OFF
031F	35C3	clr     T0ON
				;1410				SET	fg_TimeOut
0320	7202	set     A_PARPLLFL[1].4
				;1411				CALL	Delay1
0321	238A	call    Delay1
				;1412				SZ	fg_0x02PowDownChargeComplete
0322	7DC6	sz      A_TEMP0[1].3
				;1413				JMP	PD_AbnormalLight
0323	2B2D	jmp     PD_AbnormalLight
				;1414				
				;1415				SZ	fg_0x02PowDownNoResponse
0324	7EC6	sz      A_TEMP0[1].5
				;1416				JMP	PD_AbnormalLight
0325	2B2D	jmp     PD_AbnormalLight
				;1417				
				;1418				SZ	fg_0x02PowDownReconfigure
0326	7E46	sz      A_TEMP0[1].4
				;1419				JMP	PD_AbnormalLight
0327	2B2D	jmp     PD_AbnormalLight
				;1420				
				;1421				SZ	fg_FODTemp60
0328	7D46	sz      A_TEMP0[1].2
				;1422				JMP   	PD_AbnormalLight
0329	2B2D	jmp     PD_AbnormalLight
				;1423				
				;1424				SZ	fg_FODEfficLow
032A	7ED5	sz      A_LOOPITERATION[4].5
				;1425				JMP	PD_AbnormalLight	
032B	2B2D	jmp     PD_AbnormalLight
				;1426	
				;1427				JMP	PD_PWMDown
032C	2B33	jmp     PD_PWMDown
				;1428		PD_AbnormalLight:
				;1429				SZ	fg_0x02PowDownReconfigure
				PD_AbnormalLight:
032D	7E46	sz      A_TEMP0[1].4
				;1430				JMP	PD_PowerDownEnd
032E	2B3C	jmp     PD_PowerDownEnd
				;1431							
				;1432				SZ	fg_0x02PowDownNoResponse
032F	7EC6	sz      A_TEMP0[1].5
				;1433				JMP	PD_PowerDownEnd
0330	2B3C	jmp     PD_PowerDownEnd
				;1434				
				;1435				CALL	LightDark			
0331	2350	call    LightDark
				;1436				JMP	PD_PowerDownEnd
0332	2B3C	jmp     PD_PowerDownEnd
				;1437		PD_PWMDown:
				;1438				CLR	TM0C0.3					; TM0C0[3] (T0ON-bit) = 0 as TM0 OFF
				PD_PWMDown:
0333	35C3	clr     T0ON
				;1439				SET	fg_TimeOut
0334	7202	set     A_PARPLLFL[1].4
				;1440		PD_LightWarningEnd:
				;1441				CLR WDT
				PD_LightWarningEnd:
0335	0001	clr     wdt
				;1442				CLR	PB.3					;; Red LED
0336	359A	clr     PB3
				;1443				SET	PB.2					;; Green LED
0337	311A	set     PB2
				;1444				CALL	Delay3
0338	2392	call    Delay3
				;1445				CALL	Delay3
0339	2392	call    Delay3
				;1446				SZ	fg_Ping
033A	7E55	sz      A_LOOPITERATION[4].4
				;1447				JMP	PP_Repeat	
033B	2B49	jmp     PP_Repeat
				;1448		PD_PowerDownEnd:
				;1449				CLR WDT
				PD_PowerDownEnd:
033C	0001	clr     wdt
				;1450				CLR	PB.3					;; Red LED
033D	359A	clr     PB3
				;1451				SET	PB.2					;; Green LED
033E	311A	set     PB2
				;1452	
				;1453				;;Detect Object to leave
				;1454				SZ	fg_0x02PowDownChargeComplete
033F	7DC6	sz      A_TEMP0[1].3
				;1455				CALL	ObjectDetectLeave
0340	624A	call    ObjectDetectLeave
				;1456				
				;1457				SZ	fg_0x02PowDownReconfigure
0341	7E46	sz      A_TEMP0[1].4
				;1458				CALL	ObjectDetectLeave
0342	624A	call    ObjectDetectLeave
				;1459				
				;1460				SZ	fg_0x02PowDownNoResponse
0343	7EC6	sz      A_TEMP0[1].5
				;1461				CALL	ObjectDetectLeave
0344	624A	call    ObjectDetectLeave
				;1462	
				;1463				CLR	CKGEN					; 0 as VCO OFF
0345	1F60	clr     CKGEN
				;1464				CLR	INTC0.0					; 0 as EMI OFF
0346	3410	clr     EMI
				;1465				MOV	A, 007H
0347	0F07	mov     a, 7H
				;1466				MOV	WDTC, A
0348	00A3	mov     WDTC, a
				;1467		PP_Repeat:
				;1468				MOV	A, 008H
				PP_Repeat:
0349	0F08	mov     a, 8H
				;1469				MOV	a_r_DetectCNT, A
034A	40F9	mov     A_R_DETECTCNT, a
				;1470				CALL	DemoVI1I2Select
034B	26B5	call    DemoVI1I2Select
				;1471				SET	INTC0.5
034C	3290	set     DEMF
				;1472				CLR	CKGEN.7					; 1 as VCO OFF
034D	37E0	clr     PLLEN
				;1473				CLR	INTC0.0					; 0 as EMI OFF
034E	3410	clr     EMI
				;1474				HALT
034F	0002	halt
				;1475	
				;1476	;========================================================
				;1477	;Function : LightDark
				;1478	;Note     : Call Function Type for Light dark
				;1479	;		input = No Need
				;1480	
				;1481	;		output = No Need
				;1482	;Presetting:
				;1483	;		(1) Setting WDTC reg. for Period Timing
				;1484	;		(2) Setting c_IniDetectMutipleTimeH/L
				;1485	;		(3) Setting OCP INT ON/OFF
				;1486	;========================================================
				;1487		LightDark:
				;1488				MOV	A, 005H;;003h
				LightDark:
0350	0F05	mov     a, 5H
				;1489				MOV	a_com1, A
0351	40AE	mov     A_COM1, a
				;1490		PS_LightDarkRepeat:		
				;1491				CLR	WDT    
				PS_LightDarkRepeat:
0352	0001	clr     wdt
				;1492				SZ	fg_0x02PowDownChargeComplete
0353	7DC6	sz      A_TEMP0[1].3
				;1493				JMP	LightDarkGreen0
0354	2B58	jmp     LightDarkGreen0
				;1494		LightDarkBoth0:
				;1495				CLR	PB.3					;;Red LED
				LightDarkBoth0:
0355	359A	clr     PB3
				;1496				CLR	PB.2					;;Green LED
0356	351A	clr     PB2
				;1497				JMP	LightDarkend0
0357	2B59	jmp     LightDarkend0
				;1498		LightDarkGreen0:
				;1499				CLR	PB.2					;;Green LED
				LightDarkGreen0:
0358	351A	clr     PB2
				;1500			;	CLR	PB.3					;;Red LED
				;1501		LightDarkend0:
				;1502				CALL	Delay3
				LightDarkend0:
0359	2392	call    Delay3
				;1503				SZ	fg_0x02PowDownChargeComplete
035A	7DC6	sz      A_TEMP0[1].3
				;1504				JMP	LightDarkGreen1
035B	2B5F	jmp     LightDarkGreen1
				;1505		LightDarkBoth1:
				;1506				SET	PB.3					;;Red LED
				LightDarkBoth1:
035C	319A	set     PB3
				;1507				SET	PB.2					;;Green LED
035D	311A	set     PB2
				;1508				JMP	LightDarkend1
035E	2B60	jmp     LightDarkend1
				;1509		LightDarkGreen1:
				;1510				SET	PB.2					;;Green LED
				LightDarkGreen1:
035F	311A	set     PB2
				;1511		LightDarkend1:
				;1512				CALL	Delay3
				LightDarkend1:
0360	2392	call    Delay3
				;1513				
				;1514				SDZ	a_com1
0361	57AE	sdz     A_COM1
				;1515				JMP	PS_LightDarkRepeat
0362	2B52	jmp     PS_LightDarkRepeat
				;1516				
				;1517				CLR	a_com1
0363	5F2E	clr     A_COM1
				;1518				RET
0364	0003	ret
				;1519	
				;1520	
				;1521	;========================================================
				;1522	;Function : ISR 
				;1523	;Note     : 
				;1524	;========================================================
				;1525		;---------------------OCP---------------------
				;1526		ISR_OCP:
				;1527				MOV	A, 050H
				ISR_OCP:
0365	0F50	mov     a, 50H
				;1528				MOV	PWMC, A
0366	00E3	mov     PWMC, a
				;1529				NOP
0367	0000	nop
				;1530				RETI
0368	0004	reti
				;1531				
				;1532		;-----------Demodulation Interrupt------------
				;1533		ISR_DeMod:
				;1534				CLR WDT
				ISR_DeMod:
0369	0001	clr     wdt
				;1535				CLR	fg_FlagDemo
036A	7682	clr     A_PARPLLFL[1].5
				;1536				CLR	TM1C0.3					; TM1C0[3] (T1ON-bit) = 0 as TM1 OFF		
036B	35C9	clr     T1ON
				;1537				RETI
036C	0004	reti
				;1538				
				;1539		;------------External Interrupt 0-------------
				;1540		ISR_ExInt0:
				;1541				CLR	fg_INT0
				ISR_ExInt0:
036D	7782	clr     A_PARPLLFL[1].7
				;1542				CLR	TM1C0.3					; TM1C0[3] (T1ON-bit) = 0 as TM1 OFF
036E	35C9	clr     T1ON
				;1543				CLR 	WDT
036F	0001	clr     wdt
				;1544				RETI
0370	0004	reti
				;1545					
				;1546		;--------MultiFunction0 Interrupt for TM0(STM)------
				;1547		ISR_MultiFun_TM0:
				;1548				CLR	MFI0.5					; MFI0[5] (T0AF-bit) = 0 as clear A match interrupt request flag
				ISR_MultiFun_TM0:
0371	36B3	clr     T0AF
				;1549				CLR	fg_BaseTimeSTM				; TM0(STM) basetime flag reset
0372	7502	clr     A_PARPLLFL[1].2
				;1550				CLR	TM0C0.3					; TM0C0[3] (T0ON-bit) = 0 as TM0 OFF
0373	35C3	clr     T0ON
				;1551				CALL	TimeOutTimer
0374	23B0	call    TimeOutTimer
				;1552				SNZ	fg_0x04OutReceiPowTime
0375	78D2	snz     A_LOOPITERATION[1].1
				;1553				RETI
0376	0004	reti
				;1554			
				;1555				CLR	fg_TimeOut
0377	7602	clr     A_PARPLLFL[1].4
				;1556				RETI
0378	0004	reti
				;1557	
				;1558		
				;1559		;--------MultiFunction1 Interrupt for TM1(CTM)------
				;1560		ISR_MultiFun_TM1:
				;1561				CLR	MFI1.5					; MFI1[5] (T1AF-bit) = 0 as clear A match interrupt request flag
				ISR_MultiFun_TM1:
0379	36B4	clr     T1AF
				;1562				CLR	fg_BaseTimeCTM				; TM1(CTM) basetime flag reset
037A	7402	clr     A_PARPLLFL[1].0
				;1563				CLR	TM1C0.3					; TM1C0[3] (T1ON-bit) = 0 as TM1 OFF
037B	35C9	clr     T1ON
				;1564				CLR 	WDT
037C	0001	clr     wdt
				;1565				RETI
037D	0004	reti
				;1566		
				;1567		;---MultiFunction2 Interrupt for LVD / EEPROM---
				;1568		ISR_MultiFun_LVD_EEP:
				;1569				RETI
				ISR_MultiFun_LVD_EEP:
037E	0004	reti
				;1570		
				;1571		;------------------ADC Interrupt----------------
				;1572		ISR_ADC:
				;1573				CLR	fg_INT_AD
				ISR_ADC:
037F	7709	clr     A_DEMOV_I1_I2[2].6
				;1574				CLR 	WDT
0380	0001	clr     wdt
				;1575				RETI
0381	0004	reti
				;1576					
				;1577		;------------------IIC Interrupt----------------
				;1578		ISR_IIC:
				;1579				RETI
				ISR_IIC:
0382	0004	reti
				;1580					
				;1581		;--------------Time Base 0 Interrupt------------
				;1582		ISR_TimeBase0:
				;1583				CLR	TBC0.7					;; Time Base0 OFF
				ISR_TimeBase0:
0383	37A0	clr     TB0EN
				;1584				RETI
0384	0004	reti
				;1585					
				;1586		;--------------Time Base 1 Interrupt------------
				;1587		ISR_TimeBase1:
				;1588				RETI
				ISR_TimeBase1:
0385	0004	reti
				;1589					
				;1590		;--------------External Interrupt 1-------------
				;1591		ISR_ExInt1:
				;1592				CLR	fg_INT1
				ISR_ExInt1:
0386	7702	clr     A_PARPLLFL[1].6
				;1593				CLR	TM1C0.3					; TM1C0[3] (T1ON-bit) = 0 as TM1 OFF
0387	35C9	clr     T1ON
				;1594				CLR 	WDT
0388	0001	clr     wdt
				;1595				RETI
0389	0004	reti
				;1596	
				;1597	
				;1598	end
				;file D:\HOLTEK\C900\C960 Project\Chris負責彙整上網方案\WAS_C2006(HT66FW2230無線充電)\11_Tech_C2006\COD_C2006-A\Delay.asm
				;1	;*******************************************************************************************
				;2	;*****	                               History	                                       *****
				;3	;*******************************************************************************************
				;4	;V1.0 - WPC Qi Certification Source Code by Edward in HOLTEK Semiconductor Inc. on 2014/12/25
				;5	
				;6	
				;7	
				;8	;*******************************************************************************************
				;9	;*****	                           Including File	                               *****
				;10	;*******************************************************************************************
				;11	#INCLUDE 	HT66FW2230.inc
				;12	#INCLUDE	TxUserDEF2230v302.inc
				;13	
				;14	
				;15	;*******************************************************************************************
				;16	;*****	                        Function / Parameter Claim	                       *****
				;17	;*******************************************************************************************
				;18	PUBLIC		Delay1
				;19	PUBLIC		Delay3
				;20	PUBLIC		DelayTimer
				;21	PUBLIC		TimeOutTimer
				;22	PUBLIC		PT_ReceiPowerCNT
				;23	
				;24	EXTERN		a_MutipleTimeLCTM		        :	byte
				;25	EXTERN		a_MutipleTimeHCTM		        :	byte
				;26	EXTERN		fg_MutipleTimeHflagCTM		        :	bit
				;27	EXTERN		fg_BaseTimeCTM				:	bit
				;28	EXTERN		fg_MutipleTimeHflagSTM		        :	bit
				;29	EXTERN		fg_TimeOut			        :	bit
				;30	EXTERN		a_MutipleTimeLSTM		        :	byte
				;31	EXTERN		a_MutipleTimeHSTM		        :	byte
				;32	EXTERN		fg_BaseTimeSTM			        :	bit
				;33	EXTERN		a_0x04ReceiPowCNTL			:	byte
				;34	EXTERN		a_0x04ReceiPowCNTH                      :	byte
				;35	EXTERN		fg_0x04ReceiPowCNTHflag                 :	bit
				;36	EXTERN		fg_RxTI					:	bit
				;37	EXTERN		fg_0x04OutReceiPowTime			:	bit
				;38	
				;39	
				;40	;*******************************************************************************************
				;41	;*****	                            Program Body	                               *****
				;42	;*******************************************************************************************
				;43	Delay		.Section 	'code'
				;44	;========================================================
				;45	;Function : Delay1
				;46	;Note     : Call Function Type for delay timer
				;47	;input    : c_IniTtermiMutipleTimeH
				;48	;	  : c_IniTtermiMutipleTimeL 
				;49	;output   : 
				;50	;========================================================
				;51		Delay1:
				;52				MOV	A, c_IniTtermiMutipleTimeL
				Delay1:
				DELAY:
038A	0FF4	mov     a, F4H
				;53				MOV	a_MutipleTimeLCTM, A
038B	4083	mov     A_MUTIPLETIMELCTM, a
				;54				MOV	A, c_IniTtermiMutipleTimeH
038C	0F01	mov     a, 1H
				;55				MOV	a_MutipleTimeHCTM, A
038D	4084	mov     A_MUTIPLETIMEHCTM, a
				;56				SZ	a_MutipleTimeHCTM
038E	5084	sz      A_MUTIPLETIMEHCTM
				;57				SET	fg_MutipleTimeHflagCTM
038F	7082	set     A_PARPLLFL[1].1
				;58	
				;59				CALL	DelayTimer
0390	239A	call    DelayTimer
				;60				RET
0391	0003	ret
				;61	
				;62	
				;63	;========================================================
				;64	;Function : Delay3
				;65	;Note     : Call Function Type for delay timer
				;66	;input    : Constant
				;67	;output   : 
				;68	;========================================================
				;69		Delay3:
				;70				MOV	A, 0AAh
				Delay3:
0392	0FAA	mov     a, AAH
				;71				MOV	a_MutipleTimeLCTM, A
0393	4083	mov     A_MUTIPLETIMELCTM, a
				;72				MOV	A, 04Ah
0394	0F4A	mov     a, 4AH
				;73				MOV	a_MutipleTimeHCTM, A
0395	4084	mov     A_MUTIPLETIMEHCTM, a
				;74				SZ	a_MutipleTimeHCTM
0396	5084	sz      A_MUTIPLETIMEHCTM
				;75				SET	fg_MutipleTimeHflagCTM
0397	7082	set     A_PARPLLFL[1].1
				;76	
				;77				CALL	DelayTimer
0398	239A	call    DelayTimer
				;78				RET
0399	0003	ret
				;79	
				;80	
				;81	;========================================================
				;82	;Function : DelayTimer  
				;83	;Note     : Call Function Type for Timer of 10-bit TM1(CTM)
				;84	;input    : a_MutipleTimeLCTM
				;85	;	  : a_MutipleTimeHCTM
				;86	;	  : fg_MutipleTimeHflagCTM
				;87	;========================================================
				;88		DelayTimer:
				;89				SET	fg_BaseTimeCTM				; TM1(CTM) basetime flag reset
				DelayTimer:
039A	7002	set     A_PARPLLFL[1].0
				;90		DelayT_Start:
				;91				SET	EMI
				DelayT_Start:
039B	3010	set     EMI
				;92				SET	TM1C0.3					; TM1C0[3] (T1ON-bit) = 1 as TM1 ON
039C	31C9	set     T1ON
				;93				CLR WDT
039D	0001	clr     wdt
				;94				SZ	fg_BaseTimeCTM				; TM1(CTM) basetime stop
039E	7C02	sz      A_PARPLLFL[1].0
				;95				JMP	DelayT_Start
039F	2B9B	jmp     DelayT_Start
				;96		DelayT_RunTimeL0:
				;97				SZ	a_MutipleTimeLCTM
				DelayT_RunTimeL0:
03A0	5083	sz      A_MUTIPLETIMELCTM
				;98				JMP	DelayT_RunTimeL1
03A1	2BA3	jmp     DelayT_RunTimeL1
				;99				JMP	DelayT_RunTimeL2			
03A2	2BA5	jmp     DelayT_RunTimeL2
				;100		DelayT_RunTimeL1:
				;101				SDZ	a_MutipleTimeLCTM
				DelayT_RunTimeL1:
03A3	5783	sdz     A_MUTIPLETIMELCTM
				;102				JMP	DelayTimer
03A4	2B9A	jmp     DelayTimer
				;103		
				;104		DelayT_RunTimeL2:		
				;105				SZ	fg_MutipleTimeHflagCTM
				DelayT_RunTimeL2:
03A5	7C82	sz      A_PARPLLFL[1].1
				;106				JMP	DelayT_RunTimeH0
03A6	2BA8	jmp     DelayT_RunTimeH0
				;107				
				;108				JMP	DelayT_End
03A7	2BAD	jmp     DelayT_End
				;109		DelayT_RunTimeH0:
				;110				SDZ	a_MutipleTimeHCTM
				DelayT_RunTimeH0:
03A8	5784	sdz     A_MUTIPLETIMEHCTM
				;111				JMP	DelayT_RunTimeH1
03A9	2BAB	jmp     DelayT_RunTimeH1
				;112				
				;113				CLR	fg_MutipleTimeHflagCTM
03AA	7482	clr     A_PARPLLFL[1].1
				;114		DelayT_RunTimeH1:
				;115				SET	a_MutipleTimeLCTM
				DelayT_RunTimeH1:
03AB	5F83	set     A_MUTIPLETIMELCTM
				;116				JMP	DelayTimer
03AC	2B9A	jmp     DelayTimer
				;117	
				;118		DelayT_End:
				;119				CLR WDT
				DelayT_End:
03AD	0001	clr     wdt
				;120				CLR	TM1C0.3					; TM1C0[3] (T1ON-bit) = 1 as TM1 ON			
03AE	35C9	clr     T1ON
				;121				RET
03AF	0003	ret
				;122	
				;123	;========================================================
				;124	;Function : TimeOutTimer  
				;125	;Note     : Call Function Type for Timer of 10-bit TM0(STM)
				;126	;input    : a_MutipleTimeLSTM
				;127	;	  : a_MutipleTimeHSTM
				;128	;	  : fg_MutipleTimeHflagSTM
				;129	;output   : fg_TimeOut
				;130	;========================================================
				;131		TimeOutTimer:
				;132				CLR WDT
				TimeOutTimer:
03B0	0001	clr     wdt
				;133		TO_RunTimeL0:
				;134				SZ	a_MutipleTimeLSTM
				TO_RunTimeL0:
03B1	5085	sz      A_MUTIPLETIMELSTM
				;135				JMP	TO_RunTimeL1
03B2	2BB4	jmp     TO_RunTimeL1
				;136	
				;137				JMP	TO_RunTimeL2
03B3	2BB6	jmp     TO_RunTimeL2
				;138		TO_RunTimeL1:
				;139				SDZ	a_MutipleTimeLSTM
				TO_RunTimeL1:
03B4	5785	sdz     A_MUTIPLETIMELSTM
				;140				JMP	TO_Repeat
03B5	2BBD	jmp     TO_Repeat
				;141		TO_RunTimeL2:
				;142				SZ	fg_MutipleTimeHflagSTM
				TO_RunTimeL2:
03B6	7D82	sz      A_PARPLLFL[1].3
				;143				JMP	TO_RunTimeH0
03B7	2BB9	jmp     TO_RunTimeH0
				;144				
				;145				JMP	TO_Check
03B8	2BC1	jmp     TO_Check
				;146		TO_RunTimeH0:
				;147				SDZ	a_MutipleTimeHSTM
				TO_RunTimeH0:
03B9	5786	sdz     A_MUTIPLETIMEHSTM
				;148				JMP	TO_RunTimeH1
03BA	2BBC	jmp     TO_RunTimeH1
				;149				
				;150				CLR	fg_MutipleTimeHflagSTM
03BB	7582	clr     A_PARPLLFL[1].3
				;151		TO_RunTimeH1:
				;152				SET	a_MutipleTimeLSTM
				TO_RunTimeH1:
03BC	5F85	set     A_MUTIPLETIMELSTM
				;153		TO_Repeat:
				;154				CLR WDT
				TO_Repeat:
03BD	0001	clr     wdt
				;155				SET	fg_BaseTimeSTM				; TM0(STM) basetime flag reset
03BE	7102	set     A_PARPLLFL[1].2
				;156				SET	TM0C0.3					; TM0C0[3] (T0ON-bit) = 1 as TM0 ON
03BF	31C3	set     T0ON
				;157				JMP	TO_End
03C0	2BC3	jmp     TO_End
				;158		TO_Check:
				;159				CLR	fg_TimeOut	
				TO_Check:
03C1	7602	clr     A_PARPLLFL[1].4
				;160				CLR	TM0C0.3					; TM0C0[3] (T0ON-bit) = 0 as TM0 OFF
03C2	35C3	clr     T0ON
				;161		TO_End:
				;162				RET
				TO_End:
03C3	0003	ret
				;163	
				;164	
				;165	;========================================================
				;166	;Function : PT_ReceiPowerCNT
				;167	;Note     : Call Function Type for CNT 
				;168	;input    : a_0x04ReceiPowCNTL
				;169	;	  : a_0x04ReceiPowCNTH
				;170	;	  : fg_0x04ReceiPowCNTHflag
				;171	;output   : fg_0x04OutReceiPowTime
				;172	;========================================================
				;173		PT_ReceiPowerCNT:
				;174				CLR WDT
				PT_ReceiPowerCNT:
03C4	0001	clr     wdt
				;175		PT_RunCNTL:
				;176				SZ	a_0x04ReceiPowCNTL
				PT_RunCNTL:
03C5	50F5	sz      A_0X04RECEIPOWCNTL
				;177				JMP	PT_RunCNTL0
03C6	2BC8	jmp     PT_RunCNTL0
				;178				JMP	PT_RunCNTL1
03C7	2BCA	jmp     PT_RunCNTL1
				;179		PT_RunCNTL0:
				;180				SDZ	a_0x04ReceiPowCNTL
				PT_RunCNTL0:
03C8	57F5	sdz     A_0X04RECEIPOWCNTL
				;181				JMP	PT_ReceiPowerCNTEnd
03C9	2BD4	jmp     PT_ReceiPowerCNTEnd
				;182	
				;183		PT_RunCNTL1:		
				;184				SZ	fg_0x04ReceiPowCNTHflag
				PT_RunCNTL1:
03CA	7F52	sz      A_LOOPITERATION[1].6
				;185				JMP	PT_RunCNTH0
03CB	2BCD	jmp     PT_RunCNTH0
				;186				
				;187				JMP	PT_ReceiPowerCNTFlag
03CC	2BD2	jmp     PT_ReceiPowerCNTFlag
				;188		PT_RunCNTH0:
				;189				SDZ	a_0x04ReceiPowCNTH
				PT_RunCNTH0:
03CD	57F4	sdz     A_0X04RECEIPOWCNTH
				;190				JMP	PT_RunCNTH1
03CE	2BD0	jmp     PT_RunCNTH1
				;191				
				;192				CLR	fg_0x04ReceiPowCNTHflag
03CF	7752	clr     A_LOOPITERATION[1].6
				;193		PT_RunCNTH1:
				;194				SET	a_0x04ReceiPowCNTL
				PT_RunCNTH1:
03D0	5FF5	set     A_0X04RECEIPOWCNTL
				;195				JMP	PT_ReceiPowerCNTEnd
03D1	2BD4	jmp     PT_ReceiPowerCNTEnd
				;196		
				;197		PT_ReceiPowerCNTFlag:
				;198				SNZ	fg_RxTI
				PT_ReceiPowerCNTFlag:
03D2	79D6	snz     A_LOOPITERATION[5].3
				;199				SET	fg_0x04OutReceiPowTime
03D3	70D2	set     A_LOOPITERATION[1].1
				;200				
				;201		PT_ReceiPowerCNTEnd:
				;202				CLR 	WDT
				PT_ReceiPowerCNTEnd:
03D4	0001	clr     wdt
				;203				RET
03D5	0003	ret
				;204	
				;205	
				;206	END
				;207	
				;file D:\HOLTEK\C900\C960 Project\Chris負責彙整上網方案\WAS_C2006(HT66FW2230無線充電)\11_Tech_C2006\COD_C2006-A\STMtimer.asm
				;1	;*******************************************************************************************
				;2	;*****	                               History	                                       *****
				;3	;*******************************************************************************************
				;4	;V1.0 - WPC Qi Certification Source Code by Edward in HOLTEK Semiconductor Inc. on 2014/12/25
				;5	
				;6	
				;7	
				;8	;*******************************************************************************************
				;9	;*****	                           Including File	                               *****
				;10	;*******************************************************************************************
				;11	#INCLUDE 	HT66FW2230.inc
				;12	#INCLUDE	TxUserDEF2230v302.inc
				;13	
				;14	
				;15	;*******************************************************************************************
				;16	;*****	                        Function / Parameter Claim	                       *****
				;17	;*******************************************************************************************
				;18	PUBLIC		SetTimer1
				;19	PUBLIC		SetTimer2
				;20	
				;21	EXTERN		a_MutipleTimeLSTM		        :	byte
				;22	EXTERN		a_MutipleTimeHSTM		        :	byte
				;23	EXTERN		fg_MutipleTimeHflagSTM		        :	bit
				;24	EXTERN		fg_BaseTimeSTM				:	bit
				;25	
				;26	;*******************************************************************************************
				;27	;*****	                            Program Body	                               *****
				;28	;*******************************************************************************************
				;29	STMtimer		.Section 	'code'
				;30	;========================================================
				;31	;Function : SetTimer1
				;32	;Note     : Call Function Type for timer
				;33	;========================================================
				;34		SetTimer1:
				;35				MOV	A, c_IniPowTrTtimeoutMutipleTimeL	; Ttimeout <= 1800ms
				SetTimer1:
				STMTIMER:
03D6	0F30	mov     a, 30H
				;36				MOV	a_MutipleTimeLSTM, A
03D7	4085	mov     A_MUTIPLETIMELSTM, a
				;37				MOV	A, c_IniPowTrTtimeoutMutipleTimeH
03D8	0F80	mov     a, 80H
				;38				MOV	a_MutipleTimeHSTM, A
03D9	4086	mov     A_MUTIPLETIMEHSTM, a
				;39				SZ	a_MutipleTimeHSTM
03DA	5086	sz      A_MUTIPLETIMEHSTM
				;40				SET	fg_MutipleTimeHflagSTM
03DB	7182	set     A_PARPLLFL[1].3
				;41	
				;42				SET	fg_BaseTimeSTM				; TM0(STM) basetime flag reset
03DC	7102	set     A_PARPLLFL[1].2
				;43				RET
03DD	0003	ret
				;44	
				;45	;========================================================
				;46	;Function : SetTimer2
				;47	;Note     : Call Function Type for timer
				;48	;========================================================
				;49		SetTimer2:
				;50				MOV	A, c_IniPowTrTtioutMutipleTimeL		; Ttiout = Ttimeout - T(unknown)
				SetTimer2:
03DE	0F7F	mov     a, 7FH
				;51				MOV	a_MutipleTimeLSTM, A
03DF	4085	mov     A_MUTIPLETIMELSTM, a
				;52				MOV	A, c_IniPowTrTtioutMutipleTimeH
03E0	0F80	mov     a, 80H
				;53				MOV	a_MutipleTimeHSTM, A
03E1	4086	mov     A_MUTIPLETIMEHSTM, a
				;54				SZ	a_MutipleTimeHSTM
03E2	5086	sz      A_MUTIPLETIMEHSTM
				;55				SET	fg_MutipleTimeHflagSTM
03E3	7182	set     A_PARPLLFL[1].3
				;56	
				;57				SET	fg_BaseTimeSTM				; TM0(STM) basetime flag reset
03E4	7102	set     A_PARPLLFL[1].2
				;58				RET
03E5	0003	ret
				;59	
				;60	END
				;file D:\HOLTEK\C900\C960 Project\Chris負責彙整上網方案\WAS_C2006(HT66FW2230無線充電)\11_Tech_C2006\COD_C2006-A\PID.asm
				;1	;*******************************************************************************************
				;2	;*****	                               History	                                       *****
				;3	;*******************************************************************************************
				;4	;V1.0 - WPC Qi Certification Source Code by Edward in HOLTEK Semiconductor Inc. on 2014/12/25
				;5	
				;6	
				;7	
				;8	;*******************************************************************************************
				;9	;*****	                           Including File	                               *****
				;10	;*******************************************************************************************
				;11	#INCLUDE 	HT66FW2230.inc
				;12	#INCLUDE	TxUserDEF2230v302.inc
				;13	
				;14	
				;15	;*******************************************************************************************
				;16	;*****	                        Function / Parameter Claim	                       *****
				;17	;*******************************************************************************************
				;18	PUBLIC			PT_PIDandPWM
				;19	PUBLIC			ReSetPLL205
				;20	PUBLIC			DTdecPWinc			
				;21	PUBLIC			DTincPWdec
				;22	PUBLIC			PLLCompare
				;23	
				;24	
				;25	EXTERN			CLRMath					:	near
				;26	EXTERN			SignedSub_8Bit				:	near
				;27	EXTERN			SignedAdd_16Bit				:	near
				;28	EXTERN			SignedMul_16Bit				:	near
				;29	EXTERN			SignedSub_24Bit				:	near
				;30	EXTERN			SignedAdd_24Bit				:	near
				;31	EXTERN			SignedMul_24Bit				:	near
				;32	EXTERN			SignedDiv_24Bit				:	near
				;33	EXTERN			PreCarry				:	near
				;34	EXTERN			PostCarry				:	near
				;35	EXTERN			PID_SenPriCoilCurrWay65Double		:	near
				;36	EXTERN			DetectVin				:	near
				;37	EXTERN			PT_SvParaSelect				:	near
				;38	
				;39	
				;40	EXTERN			a_ParPLLFH				:	byte
				;41	EXTERN			a_ParPLLFL				:	byte
				;42	EXTERN			a_StatusCntInt1				:	byte
				;43	EXTERN			a_ADRHbuffer				:	byte
				;44	EXTERN			a_ADRLbuffer			        :	byte
				;45	EXTERN			a_data0					:	byte
				;46	EXTERN			a_data1				        :	byte
				;47	EXTERN			a_data2					:	byte
				;48	EXTERN			a_data4					:	byte
				;49	EXTERN			a_data5				        :	byte
				;50	EXTERN			a_data6					:	byte
				;51	EXTERN			a_to0					:	byte
				;52	EXTERN			a_to1				        :	byte
				;53	EXTERN			a_to2                                   :	byte
				;54	EXTERN			a_to3                                   :	byte
				;55	EXTERN			a_to4                           	:	byte
				;56	EXTERN			a_to5                           	:	byte
				;57	EXTERN			a_to6                           	:	byte
				;58	EXTERN			a_to7                                   :	byte
				;59	EXTERN			a_temp2                         	:	byte
				;60	EXTERN			a_temp1                                 :	byte
				;61	EXTERN			a_temp0                                 :	byte
				;62	EXTERN			fg_start				:	bit
				;63	EXTERN			fg_IterationStart			:	bit
				;64	EXTERN			a_IL              	   		:	byte
				;65	EXTERN			a_IM0                 		        :	byte
				;66	EXTERN			a_IM1                 		        :	byte
				;67	EXTERN			a_VL				        :	byte
				;68	EXTERN			a_VM0				        :	byte
				;69	EXTERN			a_VM1				        :	byte
				;70	EXTERN			a_EL				        :	byte
				;71	EXTERN			a_EM				        :	byte
				;72	EXTERN			a_EH				        :	byte
				;73	EXTERN			a_Sv				        :	byte
				;74	EXTERN			a_LoopIteration				:	byte
				;75	EXTERN		    	fg_RXCoilD				:	bit
				;76	EXTERN		    	fg_IsenSmall				:	bit
				;77	EXTERN		    	fg_IsenBig				:	bit
				;78	EXTERN		    	fg_CEThr				:	bit
				;79	EXTERN		    	fg_CEThrPana				:	bit
				;80	EXTERN			fg_VinLow				:	bit
				;81	EXTERN			fg_PLL205				:	bit
				;82	EXTERN			fg_DTCPR				:	bit
				;83	EXTERN			fg_DTCPRmin			        :	bit
				;84	EXTERN			fg_PLLThr				:	bit
				;85	EXTERN			a_PCHO0x06_B0				:	byte
				;86	EXTERN			a_ExIP0x81_B4                   	:	byte
				;87	EXTERN			a_ExIP0x81_B5                   	:	byte
				;88	EXTERN			a_ExIP0x81_B6                   	:	byte
				;89	EXTERN			a_ExIP0x81_B7                           :	byte
				;90	EXTERN			a_0x03ContlErr			        :	byte
				;91	EXTERN			a_StatusEndPower			:	byte
				;92	EXTERN			a_OptConfiCNT			        :	byte
				;93	EXTERN			a_ParPLLFHpre				:	byte
				;94	EXTERN			a_ParPLLFLpre			        :	byte
				;95	EXTERN		    	a_Carry					:	byte
				;96	
				;97	;*******************************************************************************************
				;98	;*****	                            Program Body	                               *****
				;99	;*******************************************************************************************
				;100	PID		.Section 	'code'
				;101	;========================================================
				;102	;Function : PT_PIDandPWM
				;103	;Note     : Call Function Type for PID and PWM Control
				;104	;		input = (1) a_0x03ContlErr
				;105	
				;106	;		output = (1) 
				;107	;			 (2) a_CEP0x03_B0
				;108	;			 (3) a_RPP0x04_B0
				;109	;			 (4) a_CSP0x05_B0
				;110	;		Paramenter = 	a_ExIP0x81_B7 (Record)
				;111	;========================================================
				;112		PT_PIDandPWM:
				;113				CLR WDT
				PT_PIDandPWM:
				PID:
03E6	0001	clr     wdt
				;114				CLR	a_StatusCntInt1				;;a_r_Kp10_8_6_4
03E7	5F0A	clr     A_STATUSCNTINT1
				;115	
				;116		;~~~80hTd(j) = [80h + CE(j)]*Ta(j-1)~~~
				;117		PT_PIDCalculation0:
				;118				CLR	a_temp2
				PT_PIDCalculation0:
03E8	5F43	clr     A_TEMP2
				;119				CLR	a_temp1
03E9	5F44	clr     A_TEMP1
				;120				CLR	a_temp0
03EA	5F45	clr     A_TEMP0
				;121				CALL	CLRMath
03EB	60E8	call    CLRMath
				;122				MOV	A, a_0x03ContlErr
03EC	476C	mov     a, A_0X03CONTLERR
				;123				MOV	a_data0, A
03ED	40B2	mov     A_DATA0, a
				;124				MOV	A, 000H
03EE	0F00	mov     a, 0H
				;125				MOV	a_data4, A
03EF	40B6	mov     A_DATA4, a
				;126				CALL	SignedSub_8Bit				; ~~~ CE from 8bit to 16bit ~~~(16us) 
03F0	2744	call    SignedSub_8Bit
				;127				MOV	A, a_to1
03F1	473B	mov     a, A_TO1
				;128				MOV	a_temp1, A
03F2	40C4	mov     A_TEMP1, a
				;129				MOV	A, a_to0
03F3	473A	mov     a, A_TO0
				;130				MOV	a_temp0, A
03F4	40C5	mov     A_TEMP0, a
				;131				
				;132				;~~~~[80h+CE(j)]   (20us)~~~~
				;133				CALL	CLRMath
03F5	60E8	call    CLRMath
				;134				MOV	A, a_temp1
03F6	4744	mov     a, A_TEMP1
				;135				MOV	a_data1, A
03F7	40B3	mov     A_DATA1, a
				;136				MOV	A, a_temp0
03F8	4745	mov     a, A_TEMP0
				;137				MOV	a_data0, A
03F9	40B2	mov     A_DATA0, a
				;138				MOV	A, 000H
03FA	0F00	mov     a, 0H
				;139				MOV	a_data5, A
03FB	40B7	mov     A_DATA5, a
				;140				MOV	A, 080H
03FC	0F80	mov     a, 80H
				;141				MOV	a_data4, A
03FD	40B6	mov     A_DATA4, a
				;142				CALL	SignedAdd_16Bit
03FE	2764	call    SignedAdd_16Bit
				;143				MOV	A, a_to2
03FF	473C	mov     a, A_TO2
				;144				MOV	a_temp2, A
0400	40C3	mov     A_TEMP2, a
				;145				MOV	A, a_to1
0401	473B	mov     a, A_TO1
				;146				MOV	a_temp1, A
0402	40C4	mov     A_TEMP1, a
				;147				MOV	A, a_to0
0403	473A	mov     a, A_TO0
				;148				MOV	a_temp0, A
0404	40C5	mov     A_TEMP0, a
				;149				CALL	CLRMath
0405	60E8	call    CLRMath
				;150				SZ	fg_start
0406	7C46	sz      A_TEMP0[1].0
				;151				JMP	PT_PIDCalc1
0407	2C0D	jmp     PT_PIDCalc1
				;152				
				;153				;JMP	PT_PIDCalc0
				;154		PT_PIDCalc0:
				;155				MOV	A, a_ADRHbuffer 			;;Ta(0) =Ta(1)	;ADRH
				PT_PIDCalc0:
0408	472C	mov     a, A_ADRHBUFFER
				;156				MOV	a_data1, A
0409	40B3	mov     A_DATA1, a
				;157				MOV	A, a_ADRLbuffer
040A	472D	mov     a, A_ADRLBUFFER
				;158				MOV	a_data0, A
040B	40B2	mov     A_DATA0, a
				;159				JMP	PT_PIDCalcEnd
040C	2C11	jmp     PT_PIDCalcEnd
				;160		PT_PIDCalc1:
				;161				MOV	A, a_ExIP0x81_B7 			;;Ta(j-1) 	;ADRH
				PT_PIDCalc1:
040D	476B	mov     a, A_EXIP0X81_B7
				;162				MOV	a_data1, A
040E	40B3	mov     A_DATA1, a
				;163				MOV	A, a_ExIP0x81_B6					;ADRL
040F	476A	mov     a, A_EXIP0X81_B6
				;164				MOV	a_data0, A
0410	40B2	mov     A_DATA0, a
				;165		PT_PIDCalcEnd:
				;166				MOV	A, a_temp1				; ~~~ [80h+CE(j)] ~~~
				PT_PIDCalcEnd:
0411	4744	mov     a, A_TEMP1
				;167				MOV	a_data5, A
0412	40B7	mov     A_DATA5, a
				;168				MOV	A, a_temp0
0413	4745	mov     a, A_TEMP0
				;169				MOV	a_data4, A
0414	40B6	mov     A_DATA4, a
				;170				CALL	SignedMul_16Bit				;; ~~~ Target 80hTd(j) = Ta(j-1)*[80h + CE(j)] ~~~(66us)
0415	27A3	call    SignedMul_16Bit
				;171				MOV	A, a_to2
0416	473C	mov     a, A_TO2
				;172				MOV	a_PCHO0x06_B0, A			; a_PCHO0x06_B0 = 80hTd(j) high byte
0417	40D9	mov     A_PCHO0X06_B0, a
				;173				MOV	A, a_to1
0418	473B	mov     a, A_TO1
				;174				MOV	a_StatusEndPower, A			; a_StatusEndPower = 80hTd(j) Middle byte
0419	40F1	mov     A_STATUSENDPOWER, a
				;175				MOV	A, a_to0
041A	473A	mov     a, A_TO0
				;176				MOV	a_OptConfiCNT, A			; a_OptConfiCNT = 80hTd(j) Low byte
041B	40F2	mov     A_OPTCONFICNT, a
				;177				SNZ	fg_CEThrPana
041C	7954	snz     A_LOOPITERATION[3].2
				;178				JMP	PT_PIDCalcEnd1
041D	2C4F	jmp     PT_PIDCalcEnd1
				;179		
				;180				SNZ	fg_PLLThr
041E	79D5	snz     A_LOOPITERATION[4].3
				;181				JMP	PT_PIDCalcEnd1
041F	2C4F	jmp     PT_PIDCalcEnd1
				;182		     		
				;183		     		MOV		A, 000H				;;200mA=0C8h, 150mA=096h, 110mA=06Eh, 250mA=0FAh
0420	0F00	mov     a, 0H
				;184				MOV	a_to7, A
0421	40C1	mov     A_TO7, a
				;185				MOV	A, 0C8H
0422	0FC8	mov     a, C8H
				;186				MOV	a_to6, A
0423	40C0	mov     A_TO6, a
				;187				SZ	a_0x03ContlErr.7
0424	7FEC	sz      A_0X03CONTLERR.7
				;188				JMP	PT_PIDCalcN
0425	2C2D	jmp     PT_PIDCalcN
				;189				
				;190				;JMP	PT_PIDCalcP
				;191		PT_PIDCalcP:
				;192				MOV	A, a_ExIP0x81_B6			;; Low Byte
				PT_PIDCalcP:
0426	476A	mov     a, A_EXIP0X81_B6
				;193				ADD	A, a_to6
0427	4340	add     a, A_TO6
				;194				MOV	a_data0, A  				;;Saving
0428	40B2	mov     A_DATA0, a
				;195				MOV	A, a_ExIP0x81_B7			;; High Byte
0429	476B	mov     a, A_EXIP0X81_B7
				;196				ADC	A, a_to7
042A	5341	adc     a, A_TO7
				;197				MOV	a_data1, A  				;;Saving
042B	40B3	mov     A_DATA1, a
				;198				JMP	PT_PIDCalcPN
042C	2C33	jmp     PT_PIDCalcPN
				;199		PT_PIDCalcN:				
				;200				MOV	A, a_ExIP0x81_B6			;; Low Byte
				PT_PIDCalcN:
042D	476A	mov     a, A_EXIP0X81_B6
				;201				SUB	A, a_to6
042E	4240	sub     a, A_TO6
				;202				MOV	a_data0, A  				;;Saving
042F	40B2	mov     A_DATA0, a
				;203				MOV	A, a_ExIP0x81_B7			;; High Byte
0430	476B	mov     a, A_EXIP0X81_B7
				;204				SBC	A, a_to7
0431	5241	sbc     a, A_TO7
				;205				MOV	a_data1, A  				;;Saving
0432	40B3	mov     A_DATA1, a
				;206		PT_PIDCalcPN:
				;207				MOV	A, 000H					; ~~~ [80h] ~~~
				PT_PIDCalcPN:
0433	0F00	mov     a, 0H
				;208				MOV	a_data5, A
0434	40B7	mov     A_DATA5, a
				;209				MOV	A, 080H
0435	0F80	mov     a, 80H
				;210				MOV	a_data4, A
0436	40B6	mov     A_DATA4, a
				;211				CALL	SignedMul_16Bit				;; ~~~ Target 80hTd(j) = Ta(j-1)*[80h] ~~~(66us)
0437	27A3	call    SignedMul_16Bit
				;212				CALL	PreCarry
0438	6490	call    PreCarry
				;213				MOV	A, a_OptConfiCNT			;; Low Byte
0439	4772	mov     a, A_OPTCONFICNT
				;214				SUB	A, a_to0
043A	423A	sub     a, A_TO0
				;215				MOV	A, a_StatusEndPower			;; Mid Byte
043B	4771	mov     a, A_STATUSENDPOWER
				;216				SBC	A, a_to1
043C	523B	sbc     a, A_TO1
				;217				MOV	A, a_PCHO0x06_B0			;; High Byte
043D	4759	mov     a, A_PCHO0X06_B0
				;218				SBC	A, a_to2
043E	523C	sbc     a, A_TO2
				;219				CALL	PostCarry
043F	6493	call    PostCarry
				;220				SZ	a_0x03ContlErr.7
0440	7FEC	sz      A_0X03CONTLERR.7
				;221				JMP	PT_PIDCalcNN
0441	2C46	jmp     PT_PIDCalcNN
				;222				
				;223				JMP	PT_PIDCalcPP
0442	2C43	jmp     PT_PIDCalcPP
				;224		PT_PIDCalcPP:
				;225				SZ	a_Carry
				PT_PIDCalcPP:
0443	50F8	sz      A_CARRY
				;226				JMP	PT_PIDCalcEnd1				; < 
0444	2C4F	jmp     PT_PIDCalcEnd1
				;227				
				;228				JMP	PT_PIDCalcEndMax			; >=
0445	2C49	jmp     PT_PIDCalcEndMax
				;229		PT_PIDCalcNN:
				;230				SZ	a_Carry
				PT_PIDCalcNN:
0446	50F8	sz      A_CARRY
				;231				JMP	PT_PIDCalcEndMax			; < 
0447	2C49	jmp     PT_PIDCalcEndMax
				;232				
				;233				JMP	PT_PIDCalcEnd1				; >=
0448	2C4F	jmp     PT_PIDCalcEnd1
				;234		PT_PIDCalcEndMax:
				;235				MOV	A, a_to2
				PT_PIDCalcEndMax:
0449	473C	mov     a, A_TO2
				;236				MOV	a_PCHO0x06_B0, A			; a_PCHO0x06_B0 = 80hTd(j) high byte
044A	40D9	mov     A_PCHO0X06_B0, a
				;237				MOV	A, a_to1
044B	473B	mov     a, A_TO1
				;238				MOV	a_StatusEndPower, A			; a_StatusEndPower = 80hTd(j) Middle byte
044C	40F1	mov     A_STATUSENDPOWER, a
				;239				MOV	A, a_to0
044D	473A	mov     a, A_TO0
				;240				MOV	a_OptConfiCNT, A			; a_OptConfiCNT = 80hTd(j) Low byte
044E	40F2	mov     A_OPTCONFICNT, a
				;241				;JMP	PT_PIDCalcEnd1
				;242		PT_PIDCalcEnd1:
				;243				CALL	PT_SvParaSelect
				PT_PIDCalcEnd1:
044F	64CB	call    L0CCB
				;244				MOV	A, a_ADRHbuffer 			;;;~~~ to as Ta(j-1)~~~
0450	472C	mov     a, A_ADRHBUFFER
				;245				MOV	a_ExIP0x81_B7,A				;ADRH
0451	40EB	mov     A_EXIP0X81_B7, a
				;246				MOV	A, a_ADRLbuffer
0452	472D	mov     a, A_ADRLBUFFER
				;247				MOV	a_ExIP0x81_B6,A				;ADRL
0453	40EA	mov     A_EXIP0X81_B6, a
				;248		
				;249		
				;250		PT_PIDInteration:
				;251				;--80hE(j,i) = [80hTd(j) - 80hTa(j,i-1)] -----
				;252				SNZ	fg_IterationStart
				PT_PIDInteration:
0454	78C6	snz     A_TEMP0[1].1
				;253				JMP	PT_PIDInteration1	
0455	2C58	jmp     PT_PIDInteration1
				;254				
				;255				CALL	PID_SenPriCoilCurrWay65Double
0456	6348	call    PID_SenPriCoilCurrWay65Double
				;256				CALL	PT_SvParaSelect
0457	64CB	call    L0CCB
				;257		PT_PIDInteration1:
				;258				CALL	CLRMath
				PT_PIDInteration1:
0458	60E8	call    CLRMath
				;259				SZ	fg_IterationStart
0459	7CC6	sz      A_TEMP0[1].1
				;260				JMP	PT_PIDIter1
045A	2C60	jmp     PT_PIDIter1
				;261				;JMP	PT_PIDIter0
				;262		PT_PIDIter0:
				;263				MOV	A, a_ADRHbuffer 			;;Ta(j,0)=Ta(j) ;ADRH
				PT_PIDIter0:
045B	472C	mov     a, A_ADRHBUFFER
				;264				MOV	a_data1, A
045C	40B3	mov     A_DATA1, a
				;265				MOV	A, a_ADRLbuffer				;;ADRL
045D	472D	mov     a, A_ADRLBUFFER
				;266				MOV	a_data0, A
045E	40B2	mov     A_DATA0, a
				;267				JMP	PT_PIDIterEnd
045F	2C64	jmp     PT_PIDIterEnd
				;268		PT_PIDIter1:	
				;269				MOV	A, a_ExIP0x81_B5 			;;Ta(j,i-1) ;ADRH
				PT_PIDIter1:
0460	4769	mov     a, A_EXIP0X81_B5
				;270				MOV	a_data1, A
0461	40B3	mov     A_DATA1, a
				;271				MOV	A, a_ExIP0x81_B4			;;ADRL
0462	4768	mov     a, A_EXIP0X81_B4
				;272				MOV	a_data0, A
0463	40B2	mov     A_DATA0, a
				;273				;JMP	PT_PIDIterEnd
				;274		PT_PIDIterEnd:
				;275				MOV	A, 000H
				PT_PIDIterEnd:
0464	0F00	mov     a, 0H
				;276				MOV	a_data5, A
0465	40B7	mov     A_DATA5, a
				;277				MOV	A, 080H
0466	0F80	mov     a, 80H
				;278				MOV	a_data4, A
0467	40B6	mov     A_DATA4, a
				;279				CALL	SignedMul_16Bit				; ~~~ 80h*Ta(j,i-1) ~~~(66us) =>850us
0468	27A3	call    SignedMul_16Bit
				;280				MOV	A, a_to2
0469	473C	mov     a, A_TO2
				;281				MOV	a_temp2, A
046A	40C3	mov     A_TEMP2, a
				;282				MOV	A, a_to1
046B	473B	mov     a, A_TO1
				;283				MOV	a_temp1, A
046C	40C4	mov     A_TEMP1, a
				;284				MOV	A, a_to0
046D	473A	mov     a, A_TO0
				;285				MOV	a_temp0, A
046E	40C5	mov     A_TEMP0, a
				;286				MOV	A, a_ADRHbuffer
046F	472C	mov     a, A_ADRHBUFFER
				;287				MOV	a_ExIP0x81_B5, A
0470	40E9	mov     A_EXIP0X81_B5, a
				;288				MOV	A, a_ADRLbuffer
0471	472D	mov     a, A_ADRLBUFFER
				;289				MOV	a_ExIP0x81_B4, A
0472	40E8	mov     A_EXIP0X81_B4, a
				;290				CALL	CLRMath
0473	60E8	call    CLRMath
				;291				MOV	A, a_PCHO0x06_B0			; ~~~ 80hTd(j) ~~~~
0474	4759	mov     a, A_PCHO0X06_B0
				;292				MOV	a_data2, A
0475	40B4	mov     A_DATA2, a
				;293				MOV	A, a_StatusEndPower
0476	4771	mov     a, A_STATUSENDPOWER
				;294				MOV	a_data1, A
0477	40B3	mov     A_DATA1, a
				;295				MOV	A, a_OptConfiCNT
0478	4772	mov     a, A_OPTCONFICNT
				;296				MOV	a_data0, A
0479	40B2	mov     A_DATA0, a
				;297				MOV	A, a_temp2				; ~~~ 80h*Ta(j,i-1) ~~~
047A	4743	mov     a, A_TEMP2
				;298				MOV	a_data6, A
047B	40B8	mov     A_DATA6, a
				;299				MOV	A, a_temp1
047C	4744	mov     a, A_TEMP1
				;300				MOV	a_data5, A
047D	40B7	mov     A_DATA5, a
				;301				MOV	A, a_temp0
047E	4745	mov     a, A_TEMP0
				;302				MOV	a_data4, A
047F	40B6	mov     A_DATA4, a
				;303				CALL	SignedSub_24Bit				; ~~~80hE(j,i) = [80hTd(j) - 80h*Ta(j,i-1)] ~~~(20us)
0480	6001	call    SignedSub_24Bit
				;304				MOV	A, a_to2
0481	473C	mov     a, A_TO2
				;305				MOV	a_EH, A
0482	40CF	mov     A_EH, a
				;306				MOV	A, a_to1
0483	473B	mov     a, A_TO1
				;307				MOV	a_EM, A
0484	40CE	mov     A_EM, a
				;308				MOV	A, a_to0
0485	473A	mov     a, A_TO0
				;309				MOV	a_EL, A
0486	40CD	mov     A_EL, a
				;310	
				;311				;-------80hI(j,i) = 80hI(j,i-1) + [Ki(0.05)*80hE(j,i)*Tinner] 
				;312				;-------80hI(j,i) = 80hI(j,i-1) + [80hE(j,i)*Tinner]/14h
				;313				;------------  -384000(FA2400h) <= 80hI(j,i) <= +384000(05DC00h)  ---------
				;314				;------------  -3000 <= I(j,i) <= +3000  ---------
				;315				CALL	CLRMath
0487	60E8	call    CLRMath
				;316				MOV	A, a_EH					;~~~ 80hE(j,i)~~~
0488	474F	mov     a, A_EH
				;317				MOV	a_data2, A
0489	40B4	mov     A_DATA2, a
				;318				MOV	A, a_EM
048A	474E	mov     a, A_EM
				;319				MOV	a_data1, A
048B	40B3	mov     A_DATA1, a
				;320				MOV	A, a_EL
048C	474D	mov     a, A_EL
				;321				MOV	a_data0, A
048D	40B2	mov     A_DATA0, a
				;322				MOV	A, 000H					;~~~ Tinner = 2ms~~~
048E	0F00	mov     a, 0H
				;323				MOV	a_data6, A				;~~~ Tinner = 3ms~~~
048F	40B8	mov     A_DATA6, a
				;324				MOV	A, 000H
0490	0F00	mov     a, 0H
				;325				MOV	a_data5, A
0491	40B7	mov     A_DATA5, a
				;326				;MOV	A, 002H
				;327				MOV	A, 003H
0492	0F03	mov     a, 3H
				;328				MOV	a_data4, A
0493	40B6	mov     A_DATA4, a
				;329				CALL	SignedMul_24Bit				;~~~ [80hE(j,i)*Tinner] ~~~(78us)
0494	6027	call    SignedMul_24Bit
				;330				MOV	A, a_to2
0495	473C	mov     a, A_TO2
				;331				MOV	a_temp2, A
0496	40C3	mov     A_TEMP2, a
				;332				MOV	A, a_to1
0497	473B	mov     a, A_TO1
				;333				MOV	a_temp1, A
0498	40C4	mov     A_TEMP1, a
				;334				MOV	A, a_to0
0499	473A	mov     a, A_TO0
				;335				MOV	a_temp0, A
049A	40C5	mov     A_TEMP0, a
				;336	
				;337				CALL	CLRMath
049B	60E8	call    CLRMath
				;338				MOV	A, a_temp2				; ~~~[80hE(j,i)*Tinner] ~~~
049C	4743	mov     a, A_TEMP2
				;339				MOV	a_data2, A
049D	40B4	mov     A_DATA2, a
				;340				MOV	A, a_temp1
049E	4744	mov     a, A_TEMP1
				;341				MOV	a_data1, A
049F	40B3	mov     A_DATA1, a
				;342				MOV	A, a_temp0
04A0	4745	mov     a, A_TEMP0
				;343				MOV	a_data0, A
04A1	40B2	mov     A_DATA0, a
				;344				MOV	A, 000H					; ~~~ /14h~~~
04A2	0F00	mov     a, 0H
				;345				MOV	a_data6, A
04A3	40B8	mov     A_DATA6, a
				;346				MOV	A, 000H
04A4	0F00	mov     a, 0H
				;347				MOV	a_data5, A
04A5	40B7	mov     A_DATA5, a
				;348				MOV	A, 014h
04A6	0F14	mov     a, 14H
				;349				MOV	a_data4, A
04A7	40B6	mov     A_DATA4, a
				;350				CALL	SignedDiv_24Bit				; ~~~~[80hE(j,i)*Tinner]/14h~~~(20us)
04A8	607E	call    SignedDiv_24Bit
				;351				MOV	A, a_to2
04A9	473C	mov     a, A_TO2
				;352				MOV	a_temp2, A
04AA	40C3	mov     A_TEMP2, a
				;353				MOV	A, a_to1
04AB	473B	mov     a, A_TO1
				;354				MOV	a_temp1, A
04AC	40C4	mov     A_TEMP1, a
				;355				MOV	A, a_to0
04AD	473A	mov     a, A_TO0
				;356				MOV	a_temp0, A
04AE	40C5	mov     A_TEMP0, a
				;357	
				;358				CALL	CLRMath
04AF	60E8	call    CLRMath
				;359				SZ	fg_IterationStart
04B0	7CC6	sz      A_TEMP0[1].1
				;360				JMP	PT_PIDIter1I
04B1	2CB9	jmp     PT_PIDIter1I
				;361				;JMP	PT_PIDIter0I
				;362		PT_PIDIter0I:
				;363				MOV	A, 000H					;;80hI(j,0)=0
				PT_PIDIter0I:
04B2	0F00	mov     a, 0H
				;364				MOV	a_data2, A
04B3	40B4	mov     A_DATA2, a
				;365				MOV	A, 000H
04B4	0F00	mov     a, 0H
				;366				MOV	a_data1, A
04B5	40B3	mov     A_DATA1, a
				;367				MOV	A, 000H
04B6	0F00	mov     a, 0H
				;368				MOV	a_data0, A
04B7	40B2	mov     A_DATA0, a
				;369				JMP	PT_PIDIterEndI
04B8	2CBF	jmp     PT_PIDIterEndI
				;370		PT_PIDIter1I:	
				;371				MOV	A, a_IM1 				;;80hI(j,i-1)
				PT_PIDIter1I:
04B9	4749	mov     a, A_IM1
				;372				MOV	a_data2, A
04BA	40B4	mov     A_DATA2, a
				;373				MOV	A, a_IM0
04BB	4748	mov     a, A_IM0
				;374				MOV	a_data1, A
04BC	40B3	mov     A_DATA1, a
				;375				MOV	A, a_IL
04BD	4747	mov     a, A_IL
				;376				MOV	a_data0, A
04BE	40B2	mov     A_DATA0, a
				;377				;JMP	PT_PIDIterEndI
				;378		PT_PIDIterEndI:
				;379				MOV	A, a_temp2
				PT_PIDIterEndI:
04BF	4743	mov     a, A_TEMP2
				;380				MOV	a_data6, A
04C0	40B8	mov     A_DATA6, a
				;381				MOV	A, a_temp1
04C1	4744	mov     a, A_TEMP1
				;382				MOV	a_data5, A
04C2	40B7	mov     A_DATA5, a
				;383				MOV	A, a_temp0
04C3	4745	mov     a, A_TEMP0
				;384				MOV	a_data4, A
04C4	40B6	mov     A_DATA4, a
				;385				CALL	SignedAdd_24Bit				;;80hI(j,i) = 80hI(j,i-1) + [80hE(j,i)*Tinner]/14h~~~
04C5	27E9	call    SignedAdd_24Bit
				;386				MOV	A, a_to2
04C6	473C	mov     a, A_TO2
				;387				MOV	a_temp2, A
04C7	40C3	mov     A_TEMP2, a
				;388				MOV	A, a_to1
04C8	473B	mov     a, A_TO1
				;389				MOV	a_temp1, A
04C9	40C4	mov     A_TEMP1, a
				;390				MOV	A, a_to0
04CA	473A	mov     a, A_TO0
				;391				MOV	a_temp0, A
04CB	40C5	mov     A_TEMP0, a
				;392	
				;393				; 80hI(j,i) <= +384000 = 05DC00h; x - 05DC00h >= 0, 80hI(j,i)=Max=05DC00h; x - 05DC00h < 0 to Check
				;394				; I <= +3000 = BB8h; x - BB8h >= 0, I=Max=BB8h; x - BB8h < 0 to Check
				;395				CALL	CLRMath
04CC	60E8	call    CLRMath
				;396				MOV	A, a_temp2
04CD	4743	mov     a, A_TEMP2
				;397				MOV	a_data2, A
04CE	40B4	mov     A_DATA2, a
				;398				MOV	A, a_temp1
04CF	4744	mov     a, A_TEMP1
				;399				MOV	a_data1, A
04D0	40B3	mov     A_DATA1, a
				;400				MOV	A, a_temp0
04D1	4745	mov     a, A_TEMP0
				;401				MOV	a_data0, A
04D2	40B2	mov     A_DATA0, a
				;402				MOV	A, 005H
04D3	0F05	mov     a, 5H
				;403				MOV	a_data6, A
04D4	40B8	mov     A_DATA6, a
				;404				MOV	A, 0DCH
04D5	0FDC	mov     a, DCH
				;405				MOV	a_data5, A
04D6	40B7	mov     A_DATA5, a
				;406				MOV	A, 000H
04D7	0F00	mov     a, 0H
				;407				MOV	a_data4, A
04D8	40B6	mov     A_DATA4, a
				;408				CALL	SignedSub_24Bit
04D9	6001	call    SignedSub_24Bit
				;409				SNZ	a_to3.7
04DA	7BBD	snz     A_TO3.7
				;410				JMP	PT_PIDC_IiniPlusMax
04DB	2CED	jmp     PT_PIDC_IiniPlusMax
				;411	
				;412				; FA2400h = -384000 <= 80hI(j,i); x - FA2400h >= 0, 80hI(j,i)=I_ini ; x - FA2400h < 0, 80hI(j,i)=Min=FA2400h 
				;413				; F448h = -3000 <= I; x - F448h >= 0, I=I_ini ; x - F448h < 0, I=Min=F448h 
				;414				CALL	CLRMath
04DC	60E8	call    CLRMath
				;415				MOV	A, a_temp2
04DD	4743	mov     a, A_TEMP2
				;416				MOV	a_data2, A
04DE	40B4	mov     A_DATA2, a
				;417				MOV	A, a_temp1
04DF	4744	mov     a, A_TEMP1
				;418				MOV	a_data1, A
04E0	40B3	mov     A_DATA1, a
				;419				MOV	A, a_temp0
04E1	4745	mov     a, A_TEMP0
				;420				MOV	a_data0, A
04E2	40B2	mov     A_DATA0, a
				;421				MOV	A, 0FAH
04E3	0FFA	mov     a, FAH
				;422				MOV	a_data6, A
04E4	40B8	mov     A_DATA6, a
				;423				MOV	A, 024H
04E5	0F24	mov     a, 24H
				;424				MOV	a_data5, A
04E6	40B7	mov     A_DATA5, a
				;425				MOV	A, 000H
04E7	0F00	mov     a, 0H
				;426				MOV	a_data4, A
04E8	40B6	mov     A_DATA4, a
				;427				CALL	SignedSub_24Bit
04E9	6001	call    SignedSub_24Bit
				;428				SNZ	a_to3.7
04EA	7BBD	snz     A_TO3.7
				;429				JMP	PT_PIDC_I_Cal
04EB	2CFB	jmp     PT_PIDC_I_Cal
				;430				JMP	PT_PIDC_IiniMinusMin
04EC	2CF4	jmp     PT_PIDC_IiniMinusMin
				;431				
				;432		; x - 05DC00h >= 0, 80hI(j,i)=Max=05DC00h
				;433		; x - BB8h >= 0, I=Max=BB8h
				;434		PT_PIDC_IiniPlusMax:					
				;435				MOV	A, 005H
				PT_PIDC_IiniPlusMax:
04ED	0F05	mov     a, 5H
				;436				MOV	a_IM1, A
04EE	40C9	mov     A_IM1, a
				;437				MOV	A, 0DCH
04EF	0FDC	mov     a, DCH
				;438				MOV	a_IM0, A
04F0	40C8	mov     A_IM0, a
				;439				MOV	A, 000H
04F1	0F00	mov     a, 0H
				;440				MOV	a_IL, A
04F2	40C7	mov     A_IL, a
				;441				JMP	PT_PIDC_Iend
04F3	2D01	jmp     PT_PIDC_Iend
				;442		
				;443		; x - FA2400h < 0, 80hI(j,i)=Min=FA2400h 
				;444		; x - F448h < 0, I=Min=F448h
				;445		PT_PIDC_IiniMinusMin:					
				;446				MOV	A, 0FAH
				PT_PIDC_IiniMinusMin:
04F4	0FFA	mov     a, FAH
				;447				MOV	a_IM1, A
04F5	40C9	mov     A_IM1, a
				;448				MOV	A, 024H
04F6	0F24	mov     a, 24H
				;449				MOV	a_IM0, A
04F7	40C8	mov     A_IM0, a
				;450				MOV	A, 000H
04F8	0F00	mov     a, 0H
				;451				MOV	a_IL, A
04F9	40C7	mov     A_IL, a
				;452				JMP	PT_PIDC_Iend
04FA	2D01	jmp     PT_PIDC_Iend
				;453		PT_PIDC_I_Cal:
				;454				MOV	A, a_temp2
				PT_PIDC_I_Cal:
04FB	4743	mov     a, A_TEMP2
				;455				MOV	a_IM1, A
04FC	40C9	mov     A_IM1, a
				;456				MOV	A, a_temp1
04FD	4744	mov     a, A_TEMP1
				;457				MOV	a_IM0, A
04FE	40C8	mov     A_IM0, a
				;458				MOV	A, a_temp0
04FF	4745	mov     a, A_TEMP0
				;459				MOV	a_IL, A
0500	40C7	mov     A_IL, a
				;460				;JMP	PT_PIDC_Iend
				;461	
				;462		;-----------------------------
				;463		;--80hP(j,i)=Kp*80hE(j,i)----
				;464		;-----------------------------
				;465		PT_PIDC_Iend:
				;466				CALL	CLRMath
				PT_PIDC_Iend:
0501	60E8	call    CLRMath
				;467				MOV	A, a_EH
0502	474F	mov     a, A_EH
				;468				MOV	a_data2, A
0503	40B4	mov     A_DATA2, a
				;469				MOV	A, a_EM
0504	474E	mov     a, A_EM
				;470				MOV	a_data1, A
0505	40B3	mov     A_DATA1, a
				;471				MOV	A, a_EL
0506	474D	mov     a, A_EL
				;472				MOV	a_data0, A
0507	40B2	mov     A_DATA0, a
				;473				MOV	A, 000H
0508	0F00	mov     a, 0H
				;474				MOV	a_data6, A
0509	40B8	mov     A_DATA6, a
				;475				MOV	A, 000H
050A	0F00	mov     a, 0H
				;476				MOV	a_data5, A
050B	40B7	mov     A_DATA5, a
				;477		PT_PIDC_IendKp4:
				;478				SNZ	a_StatusCntInt1.0
				PT_PIDC_IendKp4:
050C	780A	snz     A_STATUSCNTINT1.0
				;479				JMP	PT_PIDC_IendKp6
050D	2D10	jmp     PT_PIDC_IendKp6
				;480				MOV	A, 003H
050E	0F03	mov     a, 3H
				;481				JMP	PT_PIDC_IendKp
050F	2D19	jmp     PT_PIDC_IendKp
				;482		PT_PIDC_IendKp6:
				;483				SNZ	a_StatusCntInt1.1
				PT_PIDC_IendKp6:
0510	788A	snz     A_STATUSCNTINT1.1
				;484				JMP	PT_PIDC_IendKp8
0511	2D14	jmp     PT_PIDC_IendKp8
				;485				MOV	A, 006H
0512	0F06	mov     a, 6H
				;486				JMP	PT_PIDC_IendKp
0513	2D19	jmp     PT_PIDC_IendKp
				;487		PT_PIDC_IendKp8:
				;488				SNZ	a_StatusCntInt1.2
				PT_PIDC_IendKp8:
0514	790A	snz     A_STATUSCNTINT1.2
				;489				JMP	PT_PIDC_IendKp10
0515	2D18	jmp     PT_PIDC_IendKp10
				;490				MOV	A, 008H
0516	0F08	mov     a, 8H
				;491				JMP	PT_PIDC_IendKp		
0517	2D19	jmp     PT_PIDC_IendKp
				;492		PT_PIDC_IendKp10:
				;493				MOV	A, 00AH
				PT_PIDC_IendKp10:
0518	0F0A	mov     a, AH
				;494		PT_PIDC_IendKp:
				;495				MOV	a_data4, A
				PT_PIDC_IendKp:
0519	40B6	mov     A_DATA4, a
				;496				CALL	SignedMul_24Bit				;~~~ Kp*80hE(j,i) ~~~(78us)
051A	6027	call    SignedMul_24Bit
				;497				MOV	A, a_to2
051B	473C	mov     a, A_TO2
				;498				MOV	a_temp2, A
051C	40C3	mov     A_TEMP2, a
				;499				MOV	A, a_to1
051D	473B	mov     a, A_TO1
				;500				MOV	a_temp1, A
051E	40C4	mov     A_TEMP1, a
				;501				MOV	A, a_to0
051F	473A	mov     a, A_TO0
				;502				MOV	a_temp0, A
0520	40C5	mov     A_TEMP0, a
				;503	                	
				;504				
				;505				;--80hPID(j,i)=80hP(j,i)+80hI(j,i)------
				;506				;--PID(j,i)= [80hP(j,i)+80hI(j,i)] / 80h------
				;507				;----------   -20000(FFB1E0h) <= PID <= +20000(004E20h)
				;508				;~~~ [80hP(j,i)+80hI(j,i)] ~~~(17us)
				;509				CALL	CLRMath
0521	60E8	call    CLRMath
				;510				MOV	A, a_temp2				;~~~ 80hP(j,i) ~~~
0522	4743	mov     a, A_TEMP2
				;511				MOV	a_data2, A
0523	40B4	mov     A_DATA2, a
				;512				MOV	A, a_temp1
0524	4744	mov     a, A_TEMP1
				;513				MOV	a_data1, A
0525	40B3	mov     A_DATA1, a
				;514				MOV	A, a_temp0
0526	4745	mov     a, A_TEMP0
				;515				MOV	a_data0, A
0527	40B2	mov     A_DATA0, a
				;516				MOV	A, a_IM1				;~~~ 80hI(j,i) ~~~
0528	4749	mov     a, A_IM1
				;517				MOV	a_data6, A
0529	40B8	mov     A_DATA6, a
				;518				MOV	A, a_IM0
052A	4748	mov     a, A_IM0
				;519				MOV	a_data5, A
052B	40B7	mov     A_DATA5, a
				;520				MOV	A, a_IL
052C	4747	mov     a, A_IL
				;521				MOV	a_data4, A
052D	40B6	mov     A_DATA4, a
				;522				CALL	SignedAdd_24Bit
052E	27E9	call    SignedAdd_24Bit
				;523				MOV	A, a_to2
052F	473C	mov     a, A_TO2
				;524				MOV	a_temp2, A
0530	40C3	mov     A_TEMP2, a
				;525				MOV	A, a_to1
0531	473B	mov     a, A_TO1
				;526				MOV	a_temp1, A
0532	40C4	mov     A_TEMP1, a
				;527				MOV	A, a_to0
0533	473A	mov     a, A_TO0
				;528				MOV	a_temp0, A
0534	40C5	mov     A_TEMP0, a
				;529	
				;530				; ~~~~PID(j,i)= [80hP(j,i)+80hI(j,i)] / 80h~~~
				;531				CALL	CLRMath
0535	60E8	call    CLRMath
				;532				MOV	A, a_temp2				; ~~~ [80hP(j,i)+80hI(j,i)] ~~~
0536	4743	mov     a, A_TEMP2
				;533				MOV	a_data2, A
0537	40B4	mov     A_DATA2, a
				;534				MOV	A, a_temp1
0538	4744	mov     a, A_TEMP1
				;535				MOV	a_data1, A
0539	40B3	mov     A_DATA1, a
				;536				MOV	A, a_temp0
053A	4745	mov     a, A_TEMP0
				;537				MOV	a_data0, A
053B	40B2	mov     A_DATA0, a
				;538				MOV	A, 000H					; ~~~ /80h~~~
053C	0F00	mov     a, 0H
				;539				MOV	a_data6, A
053D	40B8	mov     A_DATA6, a
				;540				MOV	A, 000H
053E	0F00	mov     a, 0H
				;541				MOV	a_data5, A
053F	40B7	mov     A_DATA5, a
				;542				MOV	A, 080h
0540	0F80	mov     a, 80H
				;543				MOV	a_data4, A
0541	40B6	mov     A_DATA4, a
				;544				CALL	SignedDiv_24Bit					
0542	607E	call    SignedDiv_24Bit
				;545				MOV	A, a_to2
0543	473C	mov     a, A_TO2
				;546				MOV	a_temp2, A
0544	40C3	mov     A_TEMP2, a
				;547				MOV	A, a_to1
0545	473B	mov     a, A_TO1
				;548				MOV	a_temp1, A
0546	40C4	mov     A_TEMP1, a
				;549				MOV	A, a_to0
0547	473A	mov     a, A_TO0
				;550				MOV	a_temp0, A
0548	40C5	mov     A_TEMP0, a
				;551	
				;552				; PID <= +20000 = 4E20h; x - 004E20h >= 0, PID=Max=4E20h ; x - 4E20h < 0 to Check
				;553				CALL	CLRMath
0549	60E8	call    CLRMath
				;554				MOV	A, a_temp2
054A	4743	mov     a, A_TEMP2
				;555				MOV	a_data2, A
054B	40B4	mov     A_DATA2, a
				;556				MOV	A, a_temp1
054C	4744	mov     a, A_TEMP1
				;557				MOV	a_data1, A
054D	40B3	mov     A_DATA1, a
				;558				MOV	A, a_temp0
054E	4745	mov     a, A_TEMP0
				;559				MOV	a_data0, A
054F	40B2	mov     A_DATA0, a
				;560				MOV	A, 000H
0550	0F00	mov     a, 0H
				;561				MOV	a_data6, A
0551	40B8	mov     A_DATA6, a
				;562				MOV	A, 04EH
0552	0F4E	mov     a, 4EH
				;563				MOV	a_data5, A
0553	40B7	mov     A_DATA5, a
				;564				MOV	A, 020H
0554	0F20	mov     a, 20H
				;565				MOV	a_data4, A
0555	40B6	mov     A_DATA4, a
				;566				CALL	SignedSub_24Bit
0556	6001	call    SignedSub_24Bit
				;567				SNZ	a_to3.7
0557	7BBD	snz     A_TO3.7
				;568				JMP	PT_PIDC_PIDiniPlusMax
0558	2D6A	jmp     PT_PIDC_PIDiniPlusMax
				;569				
				;570				; FFB1E0h = -20000 <= PID; x - FFB1E0h >= 0, PID=x ; x - FFB1E0h < 0, PID=Min=FFB1E0h 
				;571				CALL	CLRMath
0559	60E8	call    CLRMath
				;572				MOV	A, a_temp2
055A	4743	mov     a, A_TEMP2
				;573				MOV	a_data2, A
055B	40B4	mov     A_DATA2, a
				;574				MOV	A, a_temp1
055C	4744	mov     a, A_TEMP1
				;575				MOV	a_data1, A
055D	40B3	mov     A_DATA1, a
				;576				MOV	A, a_temp0
055E	4745	mov     a, A_TEMP0
				;577				MOV	a_data0, A
055F	40B2	mov     A_DATA0, a
				;578				MOV	A, 0FFH
0560	0FFF	mov     a, FFH
				;579				MOV	a_data6, A
0561	40B8	mov     A_DATA6, a
				;580				MOV	A, 0B1H
0562	0FB1	mov     a, B1H
				;581				MOV	a_data5, A
0563	40B7	mov     A_DATA5, a
				;582				MOV	A, 0E0H
0564	0FE0	mov     a, E0H
				;583				MOV	a_data4, A
0565	40B6	mov     A_DATA4, a
				;584				CALL	SignedSub_24Bit			
0566	6001	call    SignedSub_24Bit
				;585				SNZ	a_to3.7
0567	7BBD	snz     A_TO3.7
				;586				JMP	PT_PIDC_PIDend
0568	2D77	jmp     PT_PIDC_PIDend
				;587				JMP	PT_PIDC_PIDiniMinusMin
0569	2D71	jmp     PT_PIDC_PIDiniMinusMin
				;588			
				;589		PT_PIDC_PIDiniPlusMax:
				;590				MOV	A, 000H					; x - 004E20h >= 0, PID=Max=4E20h
				PT_PIDC_PIDiniPlusMax:
056A	0F00	mov     a, 0H
				;591				MOV	a_temp2, A
056B	40C3	mov     A_TEMP2, a
				;592				MOV	A, 04EH
056C	0F4E	mov     a, 4EH
				;593				MOV	a_temp1, A
056D	40C4	mov     A_TEMP1, a
				;594				MOV	A, 020H
056E	0F20	mov     a, 20H
				;595				MOV	a_temp0, A
056F	40C5	mov     A_TEMP0, a
				;596				JMP	PT_PIDC_PIDend
0570	2D77	jmp     PT_PIDC_PIDend
				;597	               	
				;598		PT_PIDC_PIDiniMinusMin:
				;599				MOV	A, 0FFH					; x - FFB1E0h < 0, PID=Min=FFB1E0h 
				PT_PIDC_PIDiniMinusMin:
0571	0FFF	mov     a, FFH
				;600				MOV	a_temp2, A
0572	40C3	mov     A_TEMP2, a
				;601				MOV	A, 0B1H
0573	0FB1	mov     a, B1H
				;602				MOV	a_temp1, A
0574	40C4	mov     A_TEMP1, a
				;603				MOV	A, 0E0H
0575	0FE0	mov     a, E0H
				;604				MOV	a_temp0, A
0576	40C5	mov     A_TEMP0, a
				;605				;JMP	PT_PIDC_PIDend
				;606	
				;607				;--V(j,i)=[V(j,i-1)-[Sv*PID(j,i)]]-------
				;608		PT_PIDC_PIDend:
				;609				CALL	CLRMath
				PT_PIDC_PIDend:
0577	60E8	call    CLRMath
				;610				MOV	A, a_temp2				; ~~~PID(j,i) ~~~
0578	4743	mov     a, A_TEMP2
				;611				MOV	a_data2, A
0579	40B4	mov     A_DATA2, a
				;612				MOV	A, a_temp1
057A	4744	mov     a, A_TEMP1
				;613				MOV	a_data1, A
057B	40B3	mov     A_DATA1, a
				;614				MOV	A, a_temp0
057C	4745	mov     a, A_TEMP0
				;615				MOV	a_data0, A
057D	40B2	mov     A_DATA0, a
				;616				MOV	A, 000H					; ~~~ [Sv]~~~
057E	0F00	mov     a, 0H
				;617				MOV	a_data6, A
057F	40B8	mov     A_DATA6, a
				;618				MOV	A, 000H
0580	0F00	mov     a, 0H
				;619				MOV	a_data5, A
0581	40B7	mov     A_DATA5, a
				;620				MOV	A, a_Sv
0582	4750	mov     a, A_SV
				;621				MOV	a_data4, A
0583	40B6	mov     A_DATA4, a
				;622				CALL	SignedMul_24Bit				; ~~~~[Sv*PID(j,i)]~~~(78us)
0584	6027	call    SignedMul_24Bit
				;623				MOV	A, a_to2
0585	473C	mov     a, A_TO2
				;624				MOV	a_temp2, A
0586	40C3	mov     A_TEMP2, a
				;625				MOV	A, a_to1
0587	473B	mov     a, A_TO1
				;626				MOV	a_temp1, A
0588	40C4	mov     A_TEMP1, a
				;627				MOV	A, a_to0
0589	473A	mov     a, A_TO0
				;628				MOV	a_temp0, A
058A	40C5	mov     A_TEMP0, a
				;629	
				;630				CALL	CLRMath
058B	60E8	call    CLRMath
				;631				MOV	A, a_temp2				; ~~~[AhSv*PID(j,i)] ~~~
058C	4743	mov     a, A_TEMP2
				;632				MOV	a_data2, A
058D	40B4	mov     A_DATA2, a
				;633				MOV	A, a_temp1
058E	4744	mov     a, A_TEMP1
				;634				MOV	a_data1, A
058F	40B3	mov     A_DATA1, a
				;635				MOV	A, a_temp0
0590	4745	mov     a, A_TEMP0
				;636				MOV	a_data0, A
0591	40B2	mov     A_DATA0, a
				;637				MOV	A, 000H					; ~~~ /Ah~~~
0592	0F00	mov     a, 0H
				;638				MOV	a_data6, A
0593	40B8	mov     A_DATA6, a
				;639				MOV	A, 000H
0594	0F00	mov     a, 0H
				;640				MOV	a_data5, A
0595	40B7	mov     A_DATA5, a
				;641				MOV	A, 00Ah
0596	0F0A	mov     a, AH
				;642				MOV	a_data4, A
0597	40B6	mov     A_DATA4, a
				;643				CALL	SignedDiv_24Bit				; ~~~~[AhSv*PID(j,i)]/Ah~~~(20us)
0598	607E	call    SignedDiv_24Bit
				;644				MOV	A, a_to2
0599	473C	mov     a, A_TO2
				;645				MOV	a_temp2, A
059A	40C3	mov     A_TEMP2, a
				;646				MOV	A, a_to1
059B	473B	mov     a, A_TO1
				;647				MOV	a_temp1, A
059C	40C4	mov     A_TEMP1, a
				;648				MOV	A, a_to0
059D	473A	mov     a, A_TO0
				;649				MOV	a_temp0, A
059E	40C5	mov     A_TEMP0, a
				;650	
				;651				CALL	CLRMath
059F	60E8	call    CLRMath
				;652				SZ	fg_start
05A0	7C46	sz      A_TEMP0[1].0
				;653				JMP	PT_PIDIter1V
05A1	2DB4	jmp     PT_PIDIter1V
				;654				
				;655				SZ	fg_IterationStart
05A2	7CC6	sz      A_TEMP0[1].1
				;656				JMP	PT_PIDIter1V
05A3	2DB4	jmp     PT_PIDIter1V
				;657				;JMP	PT_PIDIter0V
				;658	
				;659		PT_PIDIter0V:
				;660				SZ	fg_RXCoilD
				PT_PIDIter0V:
05A4	7E53	sz      A_LOOPITERATION[2].4
				;661				JMP	  PT_PIDIter0V1
05A5	2DAD	jmp     PT_PIDIter0V1
				;662				;JMP  PT_PIDIter0V0
				;663		PT_PIDIter0V0:
				;664				;MOV	A, 002H					;~~~ V(0,0) PLL=2EEh, 175kHz=2AB98h
				;665				;MOV	a_data2, A
				;666				;MOV	A, 0ABH
				;667				;MOV	a_data1, A
				;668				;MOV	A, 098H
				;669				;MOV	a_data0, A
				;670				
				;671				;MOV	A, 002H					;~~~ V(0,0) PLL=316h, 179kHz=2BB38h
				;672				;MOV	a_data2, A
				;673				;MOV	A, 0BBH
				;674				;MOV	a_data1, A
				;675				;MOV	A, 038H
				;676				;MOV	a_data0, A
				;677	
				;678				MOV	A, 002H					;~~~ V(0,0) PLL=2D0h, 172kHz=29FE0h
				PT_PIDIter0V0:
05A6	0F02	mov     a, 2H
				;679				MOV	a_data2, A
05A7	40B4	mov     A_DATA2, a
				;680				MOV	A, 09FH
05A8	0F9F	mov     a, 9FH
				;681				MOV	a_data1, A
05A9	40B3	mov     A_DATA1, a
				;682				MOV	A, 0E0H
05AA	0FE0	mov     a, E0H
				;683				MOV	a_data0, A
05AB	40B2	mov     A_DATA0, a
				;684			
				;685				;SET	fg_restart
				;686				JMP	PT_PIDIter0Vend
05AC	2DB3	jmp     PT_PIDIter0Vend
				;687		PT_PIDIter0V1:
				;688				;MOV	A, 002H					;~~~ V(0,0) PLL=2CBh, 171.5kHz=29DECh
				;689				;MOV	a_data2, A
				;690				;MOV	A, 09DH
				;691				;MOV	a_data1, A
				;692				;MOV	A, 0ECH
				;693				;MOV	a_data0, A
				;694	
				;695				;MOV	A, 002H					;~~~ V(0,0) PLL=2EEh, 175kHz=2AB98h
				;696				;MOV	a_data2, A
				;697				;MOV	A, 0ABH
				;698				;MOV	a_data1, A
				;699				;MOV	A, 098H
				;700				;MOV	a_data0, A
				;701	
				;702				MOV	A, 002H					;~~~ V(0,0) PLL=2D0h, 172kHz=29FE0h
				PT_PIDIter0V1:
05AD	0F02	mov     a, 2H
				;703				MOV	a_data2, A
05AE	40B4	mov     A_DATA2, a
				;704				MOV	A, 09FH
05AF	0F9F	mov     a, 9FH
				;705				MOV	a_data1, A
05B0	40B3	mov     A_DATA1, a
				;706				MOV	A, 0E0H
05B1	0FE0	mov     a, E0H
				;707				MOV	a_data0, A
05B2	40B2	mov     A_DATA0, a
				;708				;JMP	PT_PIDIter0Vend
				;709		PT_PIDIter0Vend:
				;710				JMP	PT_PIDIterEndV
				PT_PIDIter0Vend:
05B3	2DBA	jmp     PT_PIDIterEndV
				;711		PT_PIDIter1V:
				;712				;SET	fg_RestartCE00	
				;713				MOV	A, a_VM1				;~~~V(j,i-1)
				PT_PIDIter1V:
05B4	474C	mov     a, A_VM1
				;714				MOV	a_data2, A
05B5	40B4	mov     A_DATA2, a
				;715				MOV	A, a_VM0
05B6	474B	mov     a, A_VM0
				;716				MOV	a_data1, A
05B7	40B3	mov     A_DATA1, a
				;717				MOV	A, a_VL
05B8	474A	mov     a, A_VL
				;718				MOV	a_data0, A
05B9	40B2	mov     A_DATA0, a
				;719				;JMP	PT_PIDIterEndV
				;720		PT_PIDIterEndV:
				;721				MOV	A, a_temp2				; ~~~~[Sv*PID(j,i)]~~~(20us)
				PT_PIDIterEndV:
05BA	4743	mov     a, A_TEMP2
				;722				MOV	a_data6, A
05BB	40B8	mov     A_DATA6, a
				;723				MOV	A, a_temp1
05BC	4744	mov     a, A_TEMP1
				;724				MOV	a_data5, A
05BD	40B7	mov     A_DATA5, a
				;725				MOV	A, a_temp0
05BE	4745	mov     a, A_TEMP0
				;726				MOV	a_data4, A
05BF	40B6	mov     A_DATA4, a
				;727				CALL	SignedSub_24Bit				;~~~ V(j,i)=V(j,i-1)-[Sv*PID(j,i)] ~~~(22us)
05C0	6001	call    SignedSub_24Bit
				;728				MOV	A, a_to2
05C1	473C	mov     a, A_TO2
				;729				MOV	a_VM1, A
05C2	40CC	mov     A_VM1, a
				;730				MOV	A, a_to1
05C3	473B	mov     a, A_TO1
				;731				MOV	a_VM0, A
05C4	40CB	mov     A_VM0, a
				;732				MOV	A, a_to0
05C5	473A	mov     a, A_TO0
				;733				MOV	a_VL, A
05C6	40CA	mov     A_VL, a
				;734	
				;735		PT_PIDVconverPWM:
				;736				;CLR WDT
				;737				CALL	CLRMath
				PT_PIDVconverPWM:
05C7	60E8	call    CLRMath
				;738				MOV	A, a_VM1
05C8	474C	mov     a, A_VM1
				;739				MOV	a_data2, A
05C9	40B4	mov     A_DATA2, a
				;740				MOV	A, a_VM0
05CA	474B	mov     a, A_VM0
				;741				MOV	a_data1, A
05CB	40B3	mov     A_DATA1, a
				;742				MOV	A, a_VL
05CC	474A	mov     a, A_VL
				;743				MOV	a_data0, A
05CD	40B2	mov     A_DATA0, a
				;744				MOV	A, 001H
05CE	0F01	mov     a, 1H
				;745				MOV	a_data6, A
05CF	40B8	mov     A_DATA6, a
				;746				MOV	A, 086H
05D0	0F86	mov     a, 86H
				;747				MOV	a_data5, A
05D1	40B7	mov     A_DATA5, a
				;748				MOV	A, 0A0H
05D2	0FA0	mov     a, A0H
				;749				MOV	a_data4, A
05D3	40B6	mov     A_DATA4, a
				;750				CALL	SignedSub_24Bit
05D4	6001	call    SignedSub_24Bit
				;751				MOV	A, a_to2
05D5	473C	mov     a, A_TO2
				;752				MOV	a_temp2, A
05D6	40C3	mov     A_TEMP2, a
				;753				MOV	A, a_to1
05D7	473B	mov     a, A_TO1
				;754				MOV	a_temp1, A
05D8	40C4	mov     A_TEMP1, a
				;755				MOV	A, a_to0
05D9	473A	mov     a, A_TO0
				;756				MOV	a_temp0, A
05DA	40C5	mov     A_TEMP0, a
				;757				                        
				;758				;CLR WDT
				;759				CALL	CLRMath
05DB	60E8	call    CLRMath
				;760				MOV	A, a_temp2
05DC	4743	mov     a, A_TEMP2
				;761				MOV	a_data2, A
05DD	40B4	mov     A_DATA2, a
				;762				MOV	A, a_temp1
05DE	4744	mov     a, A_TEMP1
				;763				MOV	a_data1, A
05DF	40B3	mov     A_DATA1, a
				;764				MOV	A, a_temp0
05E0	4745	mov     a, A_TEMP0
				;765				MOV	a_data0, A
05E1	40B2	mov     A_DATA0, a
				;766				MOV	A, 000H
05E2	0F00	mov     a, 0H
				;767				MOV	a_data6, A
05E3	40B8	mov     A_DATA6, a
				;768				MOV	A, 000H
05E4	0F00	mov     a, 0H
				;769				MOV	a_data5, A
05E5	40B7	mov     A_DATA5, a
				;770				MOV	A, 064H
05E6	0F64	mov     a, 64H
				;771				MOV	a_data4, A
05E7	40B6	mov     A_DATA4, a
				;772				CALL	SignedDiv_24Bit
05E8	607E	call    SignedDiv_24Bit
				;773				MOV	A, a_to1
05E9	473B	mov     a, A_TO1
				;774				MOV	a_ParPLLFH, A
05EA	4080	mov     A_PARPLLFH, a
				;775				MOV	A, a_to0
05EB	473A	mov     a, A_TO0
				;776				MOV	a_ParPLLFL, A
05EC	4081	mov     A_PARPLLFL, a
				;777	
				;778		PT_PLLProtect:
				;779				MOV	A, c_IniPLLFmaxH110
				PT_PLLProtect:
05ED	0F00	mov     a, 0H
				;780				MOV	a_to7, A
05EE	40C1	mov     A_TO7, a
				;781				MOV	A, c_IniPLLFmaxL110
05EF	0F64	mov     a, 64H
				;782				MOV	a_to6, A
05F0	40C0	mov     A_TO6, a
				;783				CALL	PLLCompare
05F1	26AE	call    PLLCompare
				;784				SZ	a_Carry
05F2	50F8	sz      A_CARRY
				;785				JMP	PT_PLLProtectPLLHset			; < 
05F3	2DF5	jmp     PT_PLLProtectPLLHset
				;786	
				;787				JMP	PT_PLLProtectCheckL			; >=
05F4	2E00	jmp     PT_PLLProtectCheckL
				;788		PT_PLLProtectPLLHset:	
				;789				MOV	A, c_IniPLLFmaxH110
				PT_PLLProtectPLLHset:
05F5	0F00	mov     a, 0H
				;790				MOV	a_ParPLLFH, A
05F6	4080	mov     A_PARPLLFH, a
				;791				MOV	A, c_IniPLLFmaxL110
05F7	0F64	mov     a, 64H
				;792				MOV	a_ParPLLFL, A
05F8	4081	mov     A_PARPLLFL, a
				;793				MOV	A, 001H					;;110kHz
05F9	0F01	mov     a, 1H
				;794				MOV	a_VM1, A
05FA	40CC	mov     A_VM1, a
				;795				MOV	A, 0ADH
05FB	0FAD	mov     a, ADH
				;796				MOV	a_VM0, A
05FC	40CB	mov     A_VM0, a
				;797				MOV	A, 0B0H
05FD	0FB0	mov     a, B0H
				;798				MOV	a_VL, A
05FE	40CA	mov     A_VL, a
				;799				JMP	PPT_PLLSetting
05FF	2E17	jmp     PPT_PLLSetting
				;800				
				;801		PT_PLLProtectCheckL:	
				;802				MOV	A, c_IniPLLFminH205
				PT_PLLProtectCheckL:
0600	0F04	mov     a, 4H
				;803				;MOV	A, c_IniPLLFminH220
				;804				MOV	a_to7, A
0601	40C1	mov     A_TO7, a
				;805				MOV	A, c_IniPLLFminL205
0602	0F1A	mov     a, 1AH
				;806				;MOV	A, c_IniPLLFminL220
				;807				MOV	a_to6, A
0603	40C0	mov     A_TO6, a
				;808	  			CALL	PLLCompare
0604	26AE	call    PLLCompare
				;809				SZ	a_Carry
0605	50F8	sz      A_CARRY
				;810				JMP	PPT_PLLSettingOFF			; <
0606	2E0C	jmp     PPT_PLLSettingOFF
				;811	
				;812				;JMP	PT_PLLProtectPLLLset			; >=
				;813		PT_PLLProtectPLLLset:
				;814				;; Normal 205kHz
				;815				SZ	fg_PLL205
				PT_PLLProtectPLLLset:
0607	7C55	sz      A_LOOPITERATION[4].0
				;816				CALL	DTincPWdec
0608	2674	call    DTincPWdec
				;817			
				;818				CALL	ReSetPLL205
0609	2669	call    ReSetPLL205
				;819				SET	fg_PLL205
060A	7055	set     A_LOOPITERATION[4].0
				;820				JMP	PPT_PLLSetting
060B	2E17	jmp     PPT_PLLSetting
				;821				
				;822		PPT_PLLSettingOFF:
				;823				SNZ	fg_PLL205
				PPT_PLLSettingOFF:
060C	7855	snz     A_LOOPITERATION[4].0
				;824				JMP	PPT_PLLSetting	
060D	2E17	jmp     PPT_PLLSetting
				;825	
				;826				MOV	A, c_IniPLLFH162
060E	0F02	mov     a, 2H
				;827				MOV	a_to7, A
060F	40C1	mov     A_TO7, a
				;828				MOV	A, c_IniPLLFL162
0610	0F6C	mov     a, 6CH
				;829				MOV	a_to6, A
0611	40C0	mov     A_TO6, a
				;830				CALL	PLLCompare
0612	26AE	call    PLLCompare
				;831				SZ	a_Carry
0613	50F8	sz      A_CARRY
				;832				JMP	PPT_PLLSettingOFF1			; < 200kHz, 198kHz...
0614	2E16	jmp     PPT_PLLSettingOFF1
				;833	
				;834				JMP	PPT_PLLSetting				; >= 200kHz, 201kHz...
0615	2E17	jmp     PPT_PLLSetting
				;835		PPT_PLLSettingOFF1:
				;836				CALL	DTdecPWinc
				PPT_PLLSettingOFF1:
0616	2695	call    DTdecPWinc
				;837		PPT_PLLSetting:	
				;838				MOV	A, a_ParPLLFL
				PPT_PLLSetting:
0617	4701	mov     a, A_PARPLLFL
				;839				MOV	PLLFL, A
0618	00E1	mov     PLLFL, a
				;840				MOV	A, a_ParPLLFH
0619	4700	mov     a, A_PARPLLFH
				;841				MOV	PLLFH, A
061A	00E2	mov     PLLFH, a
				;842		PIDandPWMLoopIterCheck:
				;843				SET	fg_IterationStart
				PIDandPWMLoopIterCheck:
061B	70C6	set     A_TEMP0[1].1
				;844				CALL	DetectVin
061C	61E4	call    DetectVin
				;845				SZ	fg_VinLow
061D	7FD4	sz      A_LOOPITERATION[3].7
				;846				JMP	PT_PIDandPWMEnd
061E	2E21	jmp     PT_PIDandPWMEnd
				;847				
				;848				SDZ	a_LoopIteration				; Loop time =1.76ms including AD10次
061F	57D1	sdz     A_LOOPITERATION
				;849				JMP	PT_PIDInteration
0620	2C54	jmp     PT_PIDInteration
				;850		PT_PIDandPWMEnd:
				;851				MOV	A, a_ParPLLFL				;New PLL_L	; Low Byte
				PT_PIDandPWMEnd:
0621	4701	mov     a, A_PARPLLFL
				;852				XOR	A, a_ParPLLFLpre
0622	4477	xor     a, A_PARPLLFLPRE
				;853				SNZ	STATUS.2
0623	390A	snz     Z
				;854				JMP	PPT_PLLSetting0
0624	2E5A	jmp     PPT_PLLSetting0
				;855				;MOV	, A   ;;Saving
				;856				MOV	A, a_ParPLLFH				;New PLL_H	; High Byte
0625	4700	mov     a, A_PARPLLFH
				;857				XOR	A, a_ParPLLFHpre
0626	4476	xor     a, A_PARPLLFHPRE
				;858				SNZ	STATUS.2
0627	390A	snz     Z
				;859				JMP	PPT_PLLSetting0
0628	2E5A	jmp     PPT_PLLSetting0
				;860	
				;861				MOV	A, 000H
0629	0F00	mov     a, 0H
				;862				MOV	a_to7, A
062A	40C1	mov     A_TO7, a
				;863				;MOV	A, 001H
				;864				MOV	A, 008H
062B	0F08	mov     a, 8H
				;865				MOV	a_to6, A
062C	40C0	mov     A_TO6, a
				;866				
				;867				SZ	a_0x03ContlErr.7
062D	7FEC	sz      A_0X03CONTLERR.7
				;868				JMP	PLLINC
062E	2E45	jmp     PLLINC
				;869				;JMP	PLLDEC
				;870		PLLDEC:
				;871				MOV	A, a_ParPLLFL
				PLLDEC:
062F	4701	mov     a, A_PARPLLFL
				;872				SUB	A, a_to6
0630	4240	sub     a, A_TO6
				;873				MOV	a_ParPLLFL, A
0631	4081	mov     A_PARPLLFL, a
				;874				MOV	A, a_ParPLLFH
0632	4700	mov     a, A_PARPLLFH
				;875				SBC	A, a_to7
0633	5241	sbc     a, A_TO7
				;876				MOV	a_ParPLLFH, A
0634	4080	mov     A_PARPLLFH, a
				;877				MOV	A, 000H
0635	0F00	mov     a, 0H
				;878				MOV	a_to7, A
0636	40C1	mov     A_TO7, a
				;879				MOV	A, 003H
0637	0F03	mov     a, 3H
				;880				MOV	a_to6, A
0638	40C0	mov     A_TO6, a
				;881				MOV	A, 020H
0639	0F20	mov     a, 20H
				;882				MOV	a_to5, A
063A	40BF	mov     A_TO5, a
				;883				MOV	A, a_VL
063B	474A	mov     a, A_VL
				;884				SUB	A, a_to5
063C	423F	sub     a, A_TO5
				;885				MOV	a_VL, A
063D	40CA	mov     A_VL, a
				;886				MOV	A, a_VM0
063E	474B	mov     a, A_VM0
				;887				SBC	A, a_to6
063F	5240	sbc     a, A_TO6
				;888				MOV	a_VM0, A
0640	40CB	mov     A_VM0, a
				;889				MOV	A, a_VM1
0641	474C	mov     a, A_VM1
				;890				SBC	A, a_to7
0642	5241	sbc     a, A_TO7
				;891				MOV	a_VM1, A
0643	40CC	mov     A_VM1, a
				;892				JMP	PPT_PLLSetting0
0644	2E5A	jmp     PPT_PLLSetting0
				;893		PLLINC:
				;894				MOV	A, a_ParPLLFL
				PLLINC:
0645	4701	mov     a, A_PARPLLFL
				;895				ADD	A, a_to6
0646	4340	add     a, A_TO6
				;896				MOV	a_ParPLLFL, A
0647	4081	mov     A_PARPLLFL, a
				;897				MOV	A, a_ParPLLFH
0648	4700	mov     a, A_PARPLLFH
				;898				ADC	A, a_to7
0649	5341	adc     a, A_TO7
				;899				MOV	a_ParPLLFH, A
064A	4080	mov     A_PARPLLFH, a
				;900				MOV	A, 000H
064B	0F00	mov     a, 0H
				;901				MOV	a_to7, A
064C	40C1	mov     A_TO7, a
				;902				MOV	A, 003H
064D	0F03	mov     a, 3H
				;903				MOV	a_to6, A
064E	40C0	mov     A_TO6, a
				;904				MOV	A, 020H
064F	0F20	mov     a, 20H
				;905				MOV	a_to5, A
0650	40BF	mov     A_TO5, a
				;906				MOV	A, a_VL
0651	474A	mov     a, A_VL
				;907				ADD	A, a_to5
0652	433F	add     a, A_TO5
				;908				MOV	a_VL, A
0653	40CA	mov     A_VL, a
				;909				MOV	A, a_VM0
0654	474B	mov     a, A_VM0
				;910				ADC	A, a_to6
0655	5340	adc     a, A_TO6
				;911				MOV	a_VM0, A
0656	40CB	mov     A_VM0, a
				;912				MOV	A, a_VM1
0657	474C	mov     a, A_VM1
				;913				ADC	A, a_to7
0658	5341	adc     a, A_TO7
				;914				MOV	a_VM1, A
0659	40CC	mov     A_VM1, a
				;915		PPT_PLLSetting0:
				;916				MOV	A, a_ParPLLFL
				PPT_PLLSetting0:
065A	4701	mov     a, A_PARPLLFL
				;917				MOV	PLLFL, A
065B	00E1	mov     PLLFL, a
				;918				MOV	a_ParPLLFLpre, A			
065C	40F7	mov     A_PARPLLFLPRE, a
				;919				MOV	A, a_ParPLLFH
065D	4700	mov     a, A_PARPLLFH
				;920				MOV	PLLFH, A
065E	00E2	mov     PLLFH, a
				;921				MOV	a_ParPLLFHpre, A
065F	40F6	mov     A_PARPLLFHPRE, a
				;922				SET	fg_start
0660	7046	set     A_TEMP0[1].0
				;923				CLR	fg_IterationStart
0661	74C6	clr     A_TEMP0[1].1
				;924	 			;MOV	A, 00AH
				;925	 			MOV	A, 009H
0662	0F09	mov     a, 9H
				;926				MOV	a_LoopIteration, A
0663	40D1	mov     A_LOOPITERATION, a
				;927				MOV	A, 005H
0664	0F05	mov     a, 5H
				;928				MOV	a_PCHO0x06_B0, A
0665	40D9	mov     A_PCHO0X06_B0, a
				;929				SET	a_StatusEndPower
0666	5FF1	set     A_STATUSENDPOWER
				;930				CLR	a_OptConfiCNT
0667	5F72	clr     A_OPTCONFICNT
				;931				RET
0668	0003	ret
				;932	
				;933	
				;934	;========================================================
				;935	;Function : ReSetPLL205
				;936	;Note     : Call Function Type for 205kHz
				;937	;		input = 
				;938	;(1)
				;939	;		output = 
				;940	;(1)
				;941	;========================================================
				;942		ReSetPLL205:
				;943				MOV	A, c_IniPLLFminH205
				ReSetPLL205:
0669	0F04	mov     a, 4H
				;944				MOV	a_ParPLLFH, A
066A	4080	mov     A_PARPLLFH, a
				;945				MOV	A, c_IniPLLFminL205
066B	0F1A	mov     a, 1AH
				;946				MOV	a_ParPLLFL, A
066C	4081	mov     A_PARPLLFL, a
				;947				MOV	A, 003H					;;205kHz
066D	0F03	mov     a, 3H
				;948				MOV	a_VM1, A
066E	40CC	mov     A_VM1, a
				;949				MOV	A, 020H
066F	0F20	mov     a, 20H
				;950				MOV	a_VM0, A
0670	40CB	mov     A_VM0, a
				;951				MOV	A, 0C8H
0671	0FC8	mov     a, C8H
				;952				MOV	a_VL, A
0672	40CA	mov     A_VL, a
				;953				RET
0673	0003	ret
				;954	
				;955	
				;956	;========================================================
				;957	;Function : DTincPWdec
				;958	;Note     : Call Function Type for 205kHz
				;959	;input 	  : 
				;960	;output	  :  
				;961	;========================================================
				;962		DTincPWdec:
				;963				SZ	CPR
				DTincPWdec:
0674	10F2	sz      CPR
				;964				JMP	DTi2
0675	2E78	jmp     DTi2
				;965				;JMP	DTi1
				;966		DTi1:	
				;967				MOV	A, 050H
				DTi1:
0676	0F50	mov     a, 50H
				;968				MOV	PWMC, A
0677	00E3	mov     PWMC, a
				;969		DTi2:	
				;970				MOV	A, CPR
				DTi2:
0678	0772	mov     a, CPR
				;971				XOR	A, 007H					;;SC=00, DT=111
0679	0C07	xor     a, 7H
				;972				SZ	STATUS.2
067A	3D0A	sz      Z
				;973				JMP	DTiSet1
067B	2E85	jmp     DTiSet1
				;974				
				;975				MOV	A, CPR
067C	0772	mov     a, CPR
				;976				XOR	A, 00FH					;;SC=01, DT=111
067D	0C0F	xor     a, FH
				;977				SZ	STATUS.2
067E	3D0A	sz      Z
				;978				JMP	DTiSet2
067F	2E88	jmp     DTiSet2
				;979	
				;980				MOV	A, CPR
0680	0772	mov     a, CPR
				;981				XOR	A, 017H					;;SC=10, DT=111
0681	0C17	xor     a, 17H
				;982				SZ	STATUS.2
0682	3D0A	sz      Z
				;983				JMP	DTiSetEnd1				;;True => Zreo-bit=1
0683	2E8B	jmp     DTiSetEnd1
				;984	
				;985				JMP	DTiSetEnd
0684	2E8A	jmp     DTiSetEnd
				;986		DTiSet1:
				;987				MOV	A, 00BH					;;SC=01, DT=011
				DTiSet1:
0685	0F0B	mov     a, BH
				;988				MOV 	CPR, A
0686	00F2	mov     CPR, a
				;989				JMP	DTiSetEnd
0687	2E8A	jmp     DTiSetEnd
				;990		DTiSet2:		
				;991				MOV	A, 013H					;;SC=10, DT=011
				DTiSet2:
0688	0F13	mov     a, 13H
				;992				MOV 	CPR, A
0689	00F2	mov     CPR, a
				;993				;JMP	DTiSetEnd
				;994		DTiSetEnd:		
				;995				INC		CPR
				DTiSetEnd:
068A	14F2	inc     CPR
				;996		DTiSetEnd1:		
				;997				MOV	A, 0A3H
				DTiSetEnd1:
068B	0FA3	mov     a, A3H
				;998				MOV	PWMC, A
068C	00E3	mov     PWMC, a
				;999				RET
068D	0003	ret
				;1000				
				;1001				
				;1002	;;;=============================================================
				;1003	;						MOV	A, 050H
				;1004	;						MOV	PWMC, A
				;1005	;
				;1006	;						SZ	fg_DTCPRmin
				;1007	;						RET
				;1008	;						
				;1009	;						SZ	fg_DTCPR
				;1010	;						JMP	DTincPWdecDTmin
				;1011	;						;JMP		DTincPWdecDTde
				;1012	;			DTincPWdecDTde:			
				;1013	;						MOV	A, 001H			;;SC=00, DT=001
				;1014	;						MOV CPR, A
				;1015	;						SET	fg_DTCPR
				;1016	;						JMP	DTincPWdecEND
				;1017	;
				;1018	;			DTincPWdecDTmin:			
				;1019	;						MOV	A, 017H			;;SC=10, DT=111
				;1020	;						MOV CPR, A
				;1021	;						SET	fg_DTCPRmin
				;1022	;						;JMP	DTincPWdecEND
				;1023	;			DTincPWdecEND:
				;1024	;						MOV	A, 0A3H
				;1025	;						MOV	PWMC, A
				;1026	;
				;1027	;			RET
				;1028	
				;1029	
				;1030	;;========================================================
				;1031	;;Function : DTincPWdec1
				;1032	;;Note     : Call Function Type for 205kHz
				;1033	;;		input = 
				;1034	;;(1)
				;1035	;;		output = 
				;1036	;;(1)
				;1037	;;========================================================
				;1038		DTincPWdec1:
				;1039				MOV	A, 050H
				DTincPWdec1:
068E	0F50	mov     a, 50H
				;1040				MOV	PWMC, A
068F	00E3	mov     PWMC, a
				;1041				MOV	A, 017H					;;SC=10, DT=111
0690	0F17	mov     a, 17H
				;1042				MOV 	CPR, A
0691	00F2	mov     CPR, a
				;1043				MOV	A, 0A3H
0692	0FA3	mov     a, A3H
				;1044				MOV	PWMC, A
0693	00E3	mov     PWMC, a
				;1045				RET
0694	0003	ret
				;1046	
				;1047	;========================================================
				;1048	;Function : DTdecPWinc
				;1049	;Note     : Call Function Type for 205kHz
				;1050	;input 	  :
				;1051	;output	  : 
				;1052	;========================================================
				;1053		DTdecPWinc:
				;1054				MOV	A, CPR
				DTdecPWinc:
0695	0772	mov     a, CPR
				;1055				XOR	A, 014H					;;SC=10, DT=100
0696	0C14	xor     a, 14H
				;1056				SZ	STATUS.2
0697	3D0A	sz      Z
				;1057				JMP	DTdSet1
0698	2EA7	jmp     DTdSet1
				;1058				
				;1059				MOV	A, CPR
0699	0772	mov     a, CPR
				;1060				XOR	A, 00CH					;;SC=01, DT=100
069A	0C0C	xor     a, CH
				;1061				SZ	STATUS.2
069B	3D0A	sz      Z
				;1062				JMP	DTdSet2
069C	2EAA	jmp     DTdSet2
				;1063	       
				;1064				SZ CPR						;;SC=00, DT=000
069D	10F2	sz      CPR
				;1065				JMP	DTdSetEnd
069E	2EAC	jmp     DTdSetEnd
				;1066	       
				;1067				CLR	fg_PLL205
069F	7455	clr     A_LOOPITERATION[4].0
				;1068				MOV	A, 0A0H
06A0	0FA0	mov     a, A0H
				;1069				MOV	PWMC, A
06A1	00E3	mov     PWMC, a
				;1070				CLR	fg_DTCPR
06A2	74D5	clr     A_LOOPITERATION[4].1
				;1071				CLR	fg_DTCPRmin
06A3	7555	clr     A_LOOPITERATION[4].2
				;1072				MOV	A, 053H
06A4	0F53	mov     a, 53H
				;1073				MOV	PWMC, A
06A5	00E3	mov     PWMC, a
				;1074				;JMP	DTdSetEnd1
				;1075				RET
06A6	0003	ret
				;1076		 			
				;1077		DTdSet1:
				;1078				MOV	A, 010H					;;SC=10, DT=000
				DTdSet1:
06A7	0F10	mov     a, 10H
				;1079				MOV 	CPR, A
06A8	00F2	mov     CPR, a
				;1080				JMP	DTdSetEnd
06A9	2EAC	jmp     DTdSetEnd
				;1081		DTdSet2:		
				;1082				MOV	A, 008H					;;SC=01, DT=000
				DTdSet2:
06AA	0F08	mov     a, 8H
				;1083				MOV 	CPR, A
06AB	00F2	mov     CPR, a
				;1084				;JMP	DTdSetEnd
				;1085		DTdSetEnd:		
				;1086				DEC	CPR
				DTdSetEnd:
06AC	15F2	dec     CPR
				;1087	               
				;1088	;			CLR	CPR
				;1089	;			CLR	fg_PLL205
				;1090	;			MOV	A, 0A0H
				;1091	;			MOV	PWMC, A
				;1092				
				;1093	;			MOV	A, 053H
				;1094	;			MOV	PWMC, A
				;1095				
				;1096	;			CALL	ReSetPLL205
				;1097				
				;1098				RET
06AD	0003	ret
				;1099						
				;1100	
				;1101	
				;1102	;========================================================
				;1103	;Function 	: PLLCompare  (  us)
				;1104	;Note     	: Call Function Type for FOD Isen 
				;1105	;input 		:  	
				;1106	;output 	: 	
				;1107	;parameter	:
				;1108	;PreSetting	:
				;1109	;========================================================
				;1110		PLLCompare:
				;1111				CALL	PreCarry
				PLLCompare:
06AE	6490	call    PreCarry
				;1112				MOV		A, a_ParPLLFL			;New PLL_L	; Low Byte
06AF	4701	mov     a, A_PARPLLFL
				;1113				SUB		A, a_to6
06B0	4240	sub     a, A_TO6
				;1114				MOV		A, a_ParPLLFH			;New PLL_H	; High Byte
06B1	4700	mov     a, A_PARPLLFH
				;1115				SBC		A, a_to7
06B2	5241	sbc     a, A_TO7
				;1116				CALL	PostCarry
06B3	6493	call    PostCarry
				;1117				RET
06B4	0003	ret
				;1118	
				;1119	
				;1120	END
				;file D:\HOLTEK\C900\C960 Project\Chris負責彙整上網方案\WAS_C2006(HT66FW2230無線充電)\11_Tech_C2006\COD_C2006-A\DemoFun.asm
				;1	;*******************************************************************************************
				;2	;*****	                               History	                                       *****
				;3	;*******************************************************************************************
				;4	;V1.0 - WPC Qi Certification Source Code by Edward in HOLTEK Semiconductor Inc. on 2014/12/25
				;5	
				;6	
				;7	
				;8	;*******************************************************************************************
				;9	;*****	                           Including File	                               *****
				;10	;*******************************************************************************************
				;11	#INCLUDE 	HT66FW2230.inc
				;12	#INCLUDE	TxUserDEF2230v302.inc
				;13	
				;14	
				;15	;*******************************************************************************************
				;16	;*****	                        Function / Parameter Claim	                       *****
				;17	;*******************************************************************************************
				;18	PUBLIC		DemoVI1I2Select
				;19	PUBLIC		DemoVI1I2swEN
				;20	PUBLIC		DemoVI1I2swDisEN
				;21	PUBLIC		INTCheck
				;22	PUBLIC		INTTimer
				;23	
				;24	EXTERN		fg_BaseTimeCTM				:	bit
				;25	EXTERN		fg_MutipleTimeHflagCTM			:	bit
				;26	EXTERN		a_MutipleTimeLCTM			:	byte
				;27	EXTERN		a_MutipleTimeHCTM			:	byte
				;28	EXTERN		fg_TimeOut				:	bit
				;29	EXTERN		fg_FlagDemo				:	bit
				;30	EXTERN		a_DemoV_I1_I2				:	byte
				;31	EXTERN		fg_INT1					:	bit
				;32	
				;33	
				;34	;*******************************************************************************************
				;35	;*****	                            Program Body	                               *****
				;36	;*******************************************************************************************
				;37	DemoFun		.Section 	'code'
				;38	;========================================================
				;39	;Function : DemoVI1I2Select
				;40	;Note     : Call Function Type for Demo Selection
				;41	;input    :  
				;42	;output   : a_DemoV_I1_I2
				;43	;========================================================
				;44		DemoVI1I2Select:
				;45				CLR 	WDT
				DemoVI1I2Select:
				DEMOFUN:
06B5	0001	clr     wdt
				;46		DemoVI1I2Select11:
				;47				;SNZ	a_DemoV_I1_I2.2				; enable when having PPT_DemoVI1I2Select13
				;48				SNZ	a_DemoV_I1_I2.1				; disenable when having PPT_DemoVI1I2Select13
				DemoVI1I2Select11:
06B6	7887	snz     A_DEMOV_I1_I2.1
				;49				JMP	DemoVI1I2Select12
06B7	2EBB	jmp     DemoVI1I2Select12
				;50	
				;51				MOV	A, 001H
06B8	0F01	mov     a, 1H
				;52				MOV	a_DemoV_I1_I2, A
06B9	4087	mov     A_DEMOV_I1_I2, a
				;53				RET
06BA	0003	ret
				;54		
				;55		DemoVI1I2Select12:
				;56				;SNZ	a_DemoV_I1_I2.0				; enable when having PPT_DemoVI1I2Select13
				;57				;JMP	DemoVI1I2Select13			; enable when having PPT_DemoVI1I2Select13
				;58				RL	a_DemoV_I1_I2
				DemoVI1I2Select12:
06BB	5887	rl      A_DEMOV_I1_I2
				;59				RET
06BC	0003	ret
				;60			
				;61		;DemoVI1I2Select13:
				;62		;		RL	a_DemoV_I1_I2
				;63		;		RET
				;64	
				;65	
				;66	;========================================================
				;67	;Function : DemoVI1I2swEN
				;68	;Note     : Call Function Type for Demo Enable
				;69	;input    : a_DemoV_I1_I2
				;70	;output   : 
				;71	;========================================================
				;72		DemoVI1I2swEN:
				;73				CLR	WDT
				DemoVI1I2swEN:
06BD	0001	clr     wdt
				;74		DemoVI1I2sw11:				
				;75				SNZ	a_DemoV_I1_I2.0
				DemoVI1I2sw11:
06BE	7807	snz     A_DEMOV_I1_I2.0
				;76				JMP	DemoVI1I2sw12
06BF	2EC2	jmp     DemoVI1I2sw12
				;77				SET	INTC0.2					; DEME-bit = 1 as Demodulation INT ON
06C0	3110	set     DEME
				;78				;CLR	INTC2.3					; INT1E=1 as INT1 OFF
				;79				RET
06C1	0003	ret
				;80		DemoVI1I2sw12:
				;81				;SNZ	a_DemoV_I1_I2.1				; enable when having PPT_DemoVI1I2sw13
				;82				;JMP	DemoVI1I2sw13				; enable when having PPT_DemoVI1I2sw13
				;83				
				;84				CLR	INTC2.7
				DemoVI1I2sw12:
06C2	37B2	clr     INT1F
				;85				MOV	A, 00CH					; set INTEG = 0000_1100 = 0Ch
06C3	0F0C	mov     a, CH
				;86				MOV	INTEG, A				; INTEG @SPDM 30H (POR=----_0000, WDT Out=----_0000)
06C4	00B0	mov     INTEG, a
				;87				SET	INTC2.3					; INT1E=1 as INT1 ON
06C5	31B2	set     INT1E
				;88				;CLR	INTC0.2					; DEME-bit = 1 as Demodulation INT OFF
				;89				RET
06C6	0003	ret
				;90		;DemoVI1I2sw13:	;;Need to check pin setting
				;91		;		CLR	INTC0.6
				;92		;		MOV	A, 003H					; set INTEG = 0000_0011 = 03h
				;93		;		MOV	INTEG, A				; INTEG @SPDM 30H (POR=----_0000, WDT Out=----_0000)
				;94		;		SET	INTC0.3					; INT0E=1 as INT0 ON
				;95		;		RET
				;96	
				;97	;========================================================
				;98	;Function : DemoVI1I2swDisEN
				;99	;Note     : Call Function Type for Demo Disenable
				;100	;input    : a_DemoV_I1_I2
				;101	;output   : 
				;102	;========================================================
				;103		DemoVI1I2swDisEN:
				;104				CLR	WDT
				DemoVI1I2swDisEN:
06C7	0001	clr     wdt
				;105		DemoVI1I2sw21:				
				;106				SNZ	a_DemoV_I1_I2.0
				DemoVI1I2sw21:
06C8	7807	snz     A_DEMOV_I1_I2.0
				;107				JMP	DemoVI1I2sw22
06C9	2ECC	jmp     DemoVI1I2sw22
				;108				CLR	INTC0.2					; DEME-bit = 1 as Demodulation INT ON
06CA	3510	clr     DEME
				;109				RET
06CB	0003	ret
				;110		DemoVI1I2sw22:
				;111				;SNZ	a_DemoV_I1_I2.1				; enable when having PPT_DemoVI1I2sw13
				;112				;JMP	PPT_DemoVI1I2sw23			; enable when having PPT_DemoVI1I2sw13
				;113				CLR	INTC2.3					; INT1E=1 as INT1 ON
				DemoVI1I2sw22:
06CC	35B2	clr     INT1E
				;114				MOV	A, 000H					; set INTEG = 0000_0000 = 00h
06CD	0F00	mov     a, 0H
				;115				MOV	INTEG, A				; INTEG @SPDM 30H (POR=----_0000, WDT Out=----_0000)
06CE	00B0	mov     INTEG, a
				;116				CLR	INTC2.7
06CF	37B2	clr     INT1F
				;117				RET
06D0	0003	ret
				;118		;DemoVI1I2sw23:							;;Need to check pin setting
				;119		;		CLR	INTC0.6
				;120		;		MOV	A, 000H					; set INTEG = 0000_0000 = 00h
				;121		;		MOV	INTEG, A				; INTEG @SPDM 30H (POR=----_0000, WDT Out=----_0000)
				;122		;		CLR	INTC0.3					; INT0E=1 as INT0 ON
				;123		;		RET
				;124		;		RET
				;125	
				;126	
				;127	;========================================================
				;128	;Function : INTCheck  
				;129	;Note     : Call Function Type for INT Capture
				;130	;input    : c_IniComByMutipleTimeL
				;131	;	  : c_IniComByMutipleTimeH
				;132	;output   : 
				;133	;========================================================
				;134		INTCheck:
				;135				MOV	A, c_IniComByMutipleTimeL		; 300us   (100us + 300us = 400us)
				INTCheck:
06D1	0F07	mov     a, 7H
				;136				MOV	a_MutipleTimeLCTM, A
06D2	4083	mov     A_MUTIPLETIMELCTM, a
				;137				MOV	A, c_IniComByMutipleTimeH
06D3	0F00	mov     a, 0H
				;138				MOV	a_MutipleTimeHCTM, A
06D4	4084	mov     A_MUTIPLETIMEHCTM, a
				;139				SZ	a_MutipleTimeHCTM
06D5	5084	sz      A_MUTIPLETIMEHCTM
				;140				SET	fg_MutipleTimeHflagCTM
06D6	7082	set     A_PARPLLFL[1].1
				;141				CALL	INTTimer
06D7	26D9	call    INTTimer
				;142				RET
06D8	0003	ret
				;143				
				;144	
				;145	;========================================================
				;146	;Function : INTTimer  
				;147	;Note     : Call Function Type for Timer of 10-bit TM1(CTM)
				;148	;input 	  : a_MutipleTimeLCTM
				;149	;	  : a_MutipleTimeHCTM
				;150	;	  : fg_MutipleTimeHflagCTM
				;151	;	  : fg_INT1
				;152	;	  : fg_FlagDemo
				;153	;output   : 
				;154	;========================================================
				;155		INTTimer:
				;156				SET	fg_BaseTimeCTM				; TM1(CTM) basetime flag reset
				INTTimer:
06D9	7002	set     A_PARPLLFL[1].0
				;157				SET	TM1C0.3					; TM1C0[3] (T1ON-bit) = 1 as TM1 ON
06DA	31C9	set     T1ON
				;158	
				;159		CT_Start:
				;160				CLR WDT
				CT_Start:
06DB	0001	clr     wdt
				;161				SNZ	fg_TimeOut
06DC	7A02	snz     A_PARPLLFL[1].4
				;162				JMP	CT_End
06DD	2EF4	jmp     CT_End
				;163		CT_Start_DEMO1:		
				;164				SNZ	a_DemoV_I1_I2.0
				CT_Start_DEMO1:
06DE	7807	snz     A_DEMOV_I1_I2.0
				;165				JMP	CT_Start_DEMO2
06DF	2EE3	jmp     CT_Start_DEMO2
				;166				
				;167				SNZ	fg_FlagDemo
06E0	7A82	snz     A_PARPLLFL[1].5
				;168				JMP	CT_End
06E1	2EF4	jmp     CT_End
				;169	
				;170				JMP	CT_Start_DEMOEnd
06E2	2EE5	jmp     CT_Start_DEMOEnd
				;171		CT_Start_DEMO2:
				;172				;SNZ	a_DemoV_I1_I2.1				;enable when having CT_Start_DEMO3
				;173				;JMP	CT_Start_DEMO2				;enable when having CT_Start_DEMO3
				;174				
				;175				SNZ	fg_INT1
				CT_Start_DEMO2:
06E3	7B02	snz     A_PARPLLFL[1].6
				;176				JMP	CT_End
06E4	2EF4	jmp     CT_End
				;177				;JMP	CT_Start_DEMOEnd			;enable when having CT_Start_DEMO3
				;178					
				;179		;CT_Start_DEMO3:
				;180		;		SNZ	a_DemoV_I1_I2.2
				;181		;		JMP	CT_Start_DEMO2
				;182	  	;
				;183		;		SNZ	fg_INT0
				;184		;		JMP	CT_End
				;185		;		;JMP	CT_Start_DEMOEnd
				;186				
				;187				
				;188		CT_Start_DEMOEnd:
				;189				SZ	fg_BaseTimeCTM				; TM1(CTM) basetime stop
				CT_Start_DEMOEnd:
06E5	7C02	sz      A_PARPLLFL[1].0
				;190				JMP	CT_Start
06E6	2EDB	jmp     CT_Start
				;191		CT_RunTimeL0:
				;192				SZ	a_MutipleTimeLCTM
				CT_RunTimeL0:
06E7	5083	sz      A_MUTIPLETIMELCTM
				;193				JMP	CT_RunTimeL1
06E8	2EEA	jmp     CT_RunTimeL1
				;194	
				;195				JMP	CT_RunTimeL2
06E9	2EEC	jmp     CT_RunTimeL2
				;196		CT_RunTimeL1:
				;197				SDZ	a_MutipleTimeLCTM
				CT_RunTimeL1:
06EA	5783	sdz     A_MUTIPLETIMELCTM
				;198				JMP	INTTimer
06EB	2ED9	jmp     INTTimer
				;199		CT_RunTimeL2:		
				;200				SZ	fg_MutipleTimeHflagCTM
				CT_RunTimeL2:
06EC	7C82	sz      A_PARPLLFL[1].1
				;201				JMP	CT_RunTimeH0
06ED	2EEF	jmp     CT_RunTimeH0
				;202				
				;203				JMP	CT_End
06EE	2EF4	jmp     CT_End
				;204		CT_RunTimeH0:
				;205				SDZ	a_MutipleTimeHCTM
				CT_RunTimeH0:
06EF	5784	sdz     A_MUTIPLETIMEHCTM
				;206				JMP	CT_RunTimeH1
06F0	2EF2	jmp     CT_RunTimeH1
				;207				
				;208				CLR	fg_MutipleTimeHflagCTM
06F1	7482	clr     A_PARPLLFL[1].1
				;209		CT_RunTimeH1:
				;210				SET	a_MutipleTimeLCTM
				CT_RunTimeH1:
06F2	5F83	set     A_MUTIPLETIMELCTM
				;211				JMP	INTTimer
06F3	2ED9	jmp     INTTimer
				;212		CT_End:
				;213				CLR WDT
				CT_End:
06F4	0001	clr     wdt
				;214				CLR	TM1C0.3					; TM1C0[3] (T1ON-bit) = 1 as TM1 OFF
06F5	35C9	clr     T1ON
				;215				RET		
06F6	0003	ret
				;216	
				;217	
				;218	
				;219	END
				;file D:\HOLTEK\C900\C960 Project\Chris負責彙整上網方案\WAS_C2006(HT66FW2230無線充電)\11_Tech_C2006\COD_C2006-A\Math.asm
				;1	;*******************************************************************************************
				;2	;*****	                               History	                                       *****
				;3	;*******************************************************************************************
				;4	;V1.0 - WPC Qi Certification Source Code by Edward in HOLTEK Semiconductor Inc. on 2014/12/25
				;5	
				;6	
				;7	
				;8	;*******************************************************************************************
				;9	;*****	                           Including File	                               *****
				;10	;*******************************************************************************************
				;11	#INCLUDE 	HT66FW2230.inc
				;12	#INCLUDE	TxUserDEF2230v302.inc
				;13	
				;14	
				;15	;*******************************************************************************************
				;16	;*****	                        Function / Parameter Claim	                       *****
				;17	;*******************************************************************************************
				;18	PUBLIC		sum_ADC_value
				;19	PUBLIC		avg_ADC_value
				;20	PUBLIC		SignedSub_8Bit
				;21	PUBLIC		bin_add_8
				;22	PUBLIC		SignedAdd_16Bit
				;23	PUBLIC		SignedSub_16Bit
				;24	PUBLIC		bin_add_16
				;25	PUBLIC		SignedMul_16Bit
				;26	PUBLIC		unbin_mul_16
				;27	PUBLIC		SignedAdd_24Bit
				;28	PUBLIC		SignedSub_24Bit
				;29	PUBLIC		SignedMul_24Bit
				;30	PUBLIC		unbin_mul_24
				;31	PUBLIC		SignedDiv_24Bit
				;32	PUBLIC		unbin_div_24
				;33	PUBLIC		CLRMath
				;34	
				;35	EXTERN		a_com1					:	byte			
				;36	EXTERN		a_com2				        :	byte
				;37	EXTERN		a_com3				        :	byte
				;38	EXTERN		a_com4					:	byte
				;39	EXTERN		a_data0					:	byte
				;40	EXTERN		a_data1				        :	byte
				;41	EXTERN		a_data2					:	byte
				;42	EXTERN		a_data3					:	byte
				;43	EXTERN		a_data4					:	byte
				;44	EXTERN		a_data5				        :	byte
				;45	EXTERN		a_data6					:	byte
				;46	EXTERN		a_data7					:	byte
				;47	EXTERN		a_to0					:	byte
				;48	EXTERN		a_to1				        :	byte
				;49	EXTERN		a_to2                                   :	byte
				;50	EXTERN		a_to3                                   :	byte
				;51	EXTERN		a_to4                           	:	byte
				;52	EXTERN		a_to5                           	:	byte
				;53	EXTERN		a_to6                           	:	byte
				;54	EXTERN		a_to7                                   :	byte
				;55	EXTERN		a_count0				:	byte
				;56	EXTERN		a_temp2                         	:	byte
				;57	EXTERN		a_temp1                                 :	byte
				;58	EXTERN		a_temp0                                 :	byte
				;59	EXTERN		fg_adc_avg_cnt				:	bit
				;60	
				;61	
				;62	;*******************************************************************************************
				;63	;*****	                            Program Body	                               *****
				;64	;*******************************************************************************************
				;65	Math		.Section 	'code'
				;66	;=================================================================;
				;67	; Function Name  : sum_ADC_value
				;68	; Input          : adc_value[0..1],adc_sum[0..2], fg_adc_avg_cnt
				;69	; Output         : adc_sum[0..2],adc_max[0..1],adc_min[0..1]
				;70	; Description    : delet max and min and sum others
				;71	;=================================================================;
				;72		sum_ADC_value:		
				;73		       		CLR WDT
				sum_ADC_value:
				MATH:
06F7	0001	clr     wdt
				;74		       		mov	a,r0					; low byte
06F8	0700	mov     a, [00H]
				;75		        	addm	a,a_to0
06F9	43BA	addm    a, A_TO0
				;76		        	mov	a,r1					; high byte
06FA	0702	mov     a, [02H]
				;77		        	adcm	a,a_to1
06FB	53BB	adcm    a, A_TO1
				;78		        	mov	a,00h
06FC	0F00	mov     a, 0H
				;79		        	adcm	a,a_to2		
06FD	53BC	adcm    a, A_TO2
				;80				SZ	fg_adc_avg_cnt
06FE	7DD3	sz      A_LOOPITERATION[2].3
				;81				jmp	det_ADC_MaxMin
06FF	2F08	jmp     det_ADC_Max
				;82		rst_ADC_MaxMin:
				;83				mov	a,r0					; low byte
				rst_ADC_MaxMin:
0700	0700	mov     a, [00H]
				;84				mov	a_to3,a
0701	40BD	mov     A_TO3, a
				;85				mov	a_to5,a
0702	40BF	mov     A_TO5, a
				;86				mov	a,r1					; high byte
0703	0702	mov     a, [02H]
				;87				mov	a_to4,a
0704	40BE	mov     A_TO4, a
				;88				mov	a_to6,a
0705	40C0	mov     A_TO6, a
				;89				SET	fg_adc_avg_cnt
0706	71D3	set     A_LOOPITERATION[2].3
				;90				ret
0707	0003	ret
				;91		det_ADC_MaxMin:
				;92		det_ADC_Max:
				;93				; adc_value - adc_max 
				;94				clr	a_temp0
				det_ADC_Max:
				det_ADC_MaxMin:
0708	5F45	clr     A_TEMP0
				;95				mov	a, r0					; low byte
0709	0700	mov     a, [00H]
				;96				sub	a, a_to3
070A	423D	sub     a, A_TO3
				;97				mov	a_to7, a
070B	40C1	mov     A_TO7, a
				;98				mov	a, r1					; high byte
070C	0702	mov     a, [02H]
				;99				sbc	a, a_to4
070D	523E	sbc     a, A_TO4
				;100				mov	a_temp1, a
070E	40C4	mov     A_TEMP1, a
				;101				mov	a, 00h
070F	0F00	mov     a, 0H
				;102				sbcm	a, a_temp0
0710	52C5	sbcm    a, A_TEMP0
				;103				sz	a_temp0		
0711	50C5	sz      A_TEMP0
				;104				jmp	det_ADC_Min
0712	2F18	jmp     det_ADC_Min
				;105		update_ADC_Max:
				;106				mov	a,r0					; low byte
				update_ADC_Max:
0713	0700	mov     a, [00H]
				;107				mov	a_to3, a
0714	40BD	mov     A_TO3, a
				;108				mov	a,r1					; high byte
0715	0702	mov     a, [02H]
				;109				mov	a_to4, a
0716	40BE	mov     A_TO4, a
				;110				ret			
0717	0003	ret
				;111		det_ADC_Min:
				;112				; adc_min - adc_value
				;113				clr	a_temp0
				det_ADC_Min:
0718	5F45	clr     A_TEMP0
				;114				mov	a, a_to5
0719	473F	mov     a, A_TO5
				;115				SUB	a,r0	 				; low byte
071A	0200	sub     a, [00H]
				;116				mov	a_to7, a
071B	40C1	mov     A_TO7, a
				;117				mov	a, a_to6
071C	4740	mov     a, A_TO6
				;118				SBC	a,r1					; high byte
071D	1202	sbc     a, [02H]
				;119				mov	a_temp1, a
071E	40C4	mov     A_TEMP1, a
				;120				mov	a, 00h
071F	0F00	mov     a, 0H
				;121				sbcm	a, a_temp0
0720	52C5	sbcm    a, A_TEMP0
				;122				sz	a_temp0		
0721	50C5	sz      A_TEMP0
				;123				ret			
0722	0003	ret
				;124		update_ADC_Min:
				;125				mov	a,r0					; low byte
				update_ADC_Min:
0723	0700	mov     a, [00H]
				;126				mov	a_to5,a
0724	40BF	mov     A_TO5, a
				;127				mov	a,r1					; high byte
0725	0702	mov     a, [02H]
				;128				mov	a_to6,a
0726	40C0	mov     A_TO6, a
				;129				ret
0727	0003	ret
				;130	;=================================================================;
				;131	; Function Name  : avg_ADC_value
				;132	; Input          : adc_sum[0..2],adc_max[0..1],adc_min[0..1]
				;133	; Output         : adc_temp[0..2]
				;134	; Description    : Sum_ADC_Value /8
				;135	;=================================================================;
				;136		avg_ADC_value:		
				;137				; adc_sum - adc_max
				;138				CLR WDT
				avg_ADC_value:
0728	0001	clr     wdt
				;139				clr	a_temp0
0729	5F45	clr     A_TEMP0
				;140				mov	a, a_to0				;;Sum_Low
072A	473A	mov     a, A_TO0
				;141				sub	a, a_to3				;;Max_Low
072B	423D	sub     a, A_TO3
				;142				mov	a_to7, a				;;Rol_Low
072C	40C1	mov     A_TO7, a
				;143				mov	a, a_to1				;;Sum_Mid
072D	473B	mov     a, A_TO1
				;144				sbc	a, a_to4				;;Max_High
072E	523E	sbc     a, A_TO4
				;145				mov	a_temp1, a				;;Rol_High
072F	40C4	mov     A_TEMP1, a
				;146				mov	a, 00h
0730	0F00	mov     a, 0H
				;147				sbcm	a,a_temp0
0731	52C5	sbcm    a, A_TEMP0
				;148				; adc_sum - adc_max - adc_min
				;149				mov	a, a_to7				;;Rol_Low
0732	4741	mov     a, A_TO7
				;150				sub	a, a_to5				;;Min_Low
0733	423F	sub     a, A_TO5
				;151				mov	a_to7, a				;;TRol_Low
0734	40C1	mov     A_TO7, a
				;152				mov	a, a_temp1				;;Rol_High
0735	4744	mov     a, A_TEMP1
				;153				sbc	a, a_to6				;;Min_High
0736	5240	sbc     a, A_TO6
				;154				mov	a_temp1, a				;;TRol_High
0737	40C4	mov     A_TEMP1, a
				;155				mov	a, 00h
0738	0F00	mov     a, 0H
				;156				sbcm	a, a_temp0
0739	52C5	sbcm    a, A_TEMP0
				;157				; /8=2e3 
				;158				clr	c
073A	340A	clr     C
				;159				rrc	a_temp1
073B	5BC4	rrc     A_TEMP1
				;160				rrc	a_to7	
073C	5BC1	rrc     A_TO7
				;161				clr	c
073D	340A	clr     C
				;162				rrc	a_temp1
073E	5BC4	rrc     A_TEMP1
				;163				rrc	a_to7
073F	5BC1	rrc     A_TO7
				;164				clr	c
0740	340A	clr     C
				;165				rrc	a_temp1
0741	5BC4	rrc     A_TEMP1
				;166				rrc	a_to7		
0742	5BC1	rrc     A_TO7
				;167				ret		
0743	0003	ret
				;168	
				;169	
				;170	;========================================================
				;171	;Function : SignedSub_8Bit(16us @20MHz)
				;172	;Note     : Call Function Type for Math of Substration  
				;173	;input    : a_data0
				;174	;	  : a_data4
				;175	;output   : a_to1(H)_to0(L)
				;176	;========================================================
				;177		SignedSub_8Bit:
				;178				CLR 	WDT					;a_data0-a_data4
				SignedSub_8Bit:
0744	0001	clr     wdt
				;179		        	clr	a_com3	
0745	5F30	clr     A_COM3
				;180				cpl	a_data4
0746	41B6	cpl     A_DATA4
				;181				mov	a, 01h
0747	0F01	mov     a, 1H
				;182				addm	a, a_data4
0748	43B6	addm    a, A_DATA4
				;183		        	mov	a, 80h		
0749	0F80	mov     a, 80H
				;184		        	sub	a, a_data4
074A	4236	sub     a, A_DATA4
				;185		        	sz	acc
074B	1085	sz      ACC
				;186		        	jmp	begins
074C	2F50	jmp     begins
				;187		        	
				;188		        	mov	a, 7fh
074D	0F7F	mov     a, 7FH
				;189		        	mov	a_data4, a
074E	40B6	mov     A_DATA4, a
				;190		        	inc	a_com3
074F	54B0	inc     A_COM3
				;191		begins:
				;192		 		call	bin_add_8
				begins:
0750	2756	call    bin_add_8
				;193		 		mov	a, a_com3
0751	4730	mov     a, A_COM3
				;194		 		addm	a, a_to0
0752	43BA	addm    a, A_TO0
				;195		        	mov	a, 00h
0753	0F00	mov     a, 0H
				;196		        	adcm	a, a_to1
0754	53BB	adcm    a, A_TO1
				;197				ret 	
0755	0003	ret
				;198	
				;199	;========================================================
				;200	;Function : bin_add_8
				;201	;Note     : Call Function Type for Math of Addtion
				;202	;input    : a_data0
				;203	;	  : a_data4
				;204	;output   : a_to1(H)_to0(L)
				;205	;========================================================
				;206		bin_add_8:
				;207				clr	a_com1					;a_data0+a_data4
				bin_add_8:
0756	5F2E	clr     A_COM1
				;208				clr	a_com2
0757	5F2F	clr     A_COM2
				;209				sz	a_data0.7          
0758	7FB2	sz      A_DATA0.7
				;210				set	a_com1
0759	5FAE	set     A_COM1
				;211				sz	a_data4.7
075A	7FB6	sz      A_DATA4.7
				;212				set	a_com2
075B	5FAF	set     A_COM2
				;213				mov	a, a_data0
075C	4732	mov     a, A_DATA0
				;214				add	a, a_data4
075D	4336	add     a, A_DATA4
				;215		        	mov	a_to0, a
075E	40BA	mov     A_TO0, a
				;216				mov	a, a_com1
075F	472E	mov     a, A_COM1
				;217				adc	a, a_com2
0760	532F	adc     a, A_COM2
				;218		        	mov	a_to1, a
0761	40BB	mov     A_TO1, a
				;219		        	CLR 	WDT
0762	0001	clr     wdt
				;220				ret
0763	0003	ret
				;221	
				;222	
				;223	;========================================================
				;224	;Function : SignedAdd_16Bit
				;225	;Note     : Call Function Type for Math of Addtion
				;226	;		input = a_data1(H)_data0(L)
				;227	;			a_data5(H)_data4(L)
				;228	;		output = a_to2(H)_to1(M)_to0(L)
				;229	;========================================================
				;230		SignedAdd_16Bit:
				;231		     		CLR WDT
				SignedAdd_16Bit:
0764	0001	clr     wdt
				;232		     		clr	a_com1					;data0data1+data4data5
0765	5F2E	clr     A_COM1
				;233		     		clr	a_com2
0766	5F2F	clr     A_COM2
				;234		    		sz	a_data1.7
0767	7FB3	sz      A_DATA1.7
				;235				set	a_com1
0768	5FAE	set     A_COM1
				;236		     		sz	a_data5.7
0769	7FB7	sz      A_DATA5.7
				;237				set	a_com2
076A	5FAF	set     A_COM2
				;238				mov	a, a_data0
076B	4732	mov     a, A_DATA0
				;239				add	a, a_data4
076C	4336	add     a, A_DATA4
				;240		    		mov	a_to0, a
076D	40BA	mov     A_TO0, a
				;241		    		mov	a, a_data1
076E	4733	mov     a, A_DATA1
				;242		    		adc	a, a_data5
076F	5337	adc     a, A_DATA5
				;243		    		mov	a_to1, a
0770	40BB	mov     A_TO1, a
				;244		     		mov	a, a_com1
0771	472E	mov     a, A_COM1
				;245		      		adc	a, a_com2
0772	532F	adc     a, A_COM2
				;246		        	mov	a_to2, a
0773	40BC	mov     A_TO2, a
				;247				ret
0774	0003	ret
				;248	
				;249	
				;250	;========================================================
				;251	;Function : SignedSub_16Bit
				;252	;Note     : Call Function Type for Math of Substration
				;253	;input    : a_data1(H)_data0(L)
				;254	;	  : a_data5(H)_data4(L)
				;255	;output   : a_to2(H)_to1(M)_to0(L)
				;256	;========================================================
				;257		SignedSub_16Bit:
				;258				CLR WDT
				SignedSub_16Bit:
0775	0001	clr     wdt
				;259				clr	a_com3					;data0data1-data4data5
0776	5F30	clr     A_COM3
				;260				cpl	a_data4
0777	41B6	cpl     A_DATA4
				;261		        	cpl	a_data5    
0778	41B7	cpl     A_DATA5
				;262				mov	a, 01h
0779	0F01	mov     a, 1H
				;263				addm	a, a_data4
077A	43B6	addm    a, A_DATA4
				;264		        	mov	a, 00h
077B	0F00	mov     a, 0H
				;265		        	adcm	a, a_data5
077C	53B7	adcm    a, A_DATA5
				;266		        	
				;267		        	mov	a, 80h		
077D	0F80	mov     a, 80H
				;268		        	sub	a, a_data5
077E	4237	sub     a, A_DATA5
				;269		        	sz	acc
077F	1085	sz      ACC
				;270		        	jmp	begins16
0780	2F8A	jmp     begins16
				;271		        	
				;272		        	mov	a, 00h
0781	0F00	mov     a, 0H
				;273		        	sub	a, a_data4
0782	4236	sub     a, A_DATA4
				;274		        	sz	acc
0783	1085	sz      ACC
				;275		        	jmp	begins16
0784	2F8A	jmp     begins16
				;276		        	
				;277		        	mov	a, 0ffh
0785	0FFF	mov     a, FFH
				;278		        	mov	a_data4, a
0786	40B6	mov     A_DATA4, a
				;279		        	mov	a, 7fh
0787	0F7F	mov     a, 7FH
				;280		        	mov	a_data5, a
0788	40B7	mov     A_DATA5, a
				;281		        	inc	a_com3
0789	54B0	inc     A_COM3
				;282		begins16:
				;283		 		call	bin_add_16
				begins16:
078A	2792	call    bin_add_16
				;284		        	mov	a, a_to0
078B	473A	mov     a, A_TO0
				;285		        	add	a, a_com3
078C	4330	add     a, A_COM3
				;286		        	mov	a_to0, a
078D	40BA	mov     A_TO0, a
				;287		        	mov	a, 00h
078E	0F00	mov     a, 0H
				;288		        	adcm	a, a_to1
078F	53BB	adcm    a, A_TO1
				;289		        	adcm	a, a_to2
0790	53BC	adcm    a, A_TO2
				;290				ret
0791	0003	ret
				;291	
				;292	;========================================================
				;293	;Function : bin_add_16
				;294	;Note     : Call Function Type for Math
				;295	;input    : a_data1(H)_data0(L)
				;296	;	  : a_data5(H)_data4(L)
				;297	;output   : a_to2(H)_to1(M)_to0(L)
				;298	;========================================================
				;299		bin_add_16:
				;300		     		clr	a_com1					;data0data1+data4data5
				bin_add_16:
0792	5F2E	clr     A_COM1
				;301		     		clr	a_com2
0793	5F2F	clr     A_COM2
				;302		    		sz	a_data1.7
0794	7FB3	sz      A_DATA1.7
				;303				set	a_com1
0795	5FAE	set     A_COM1
				;304		     		sz	a_data5.7
0796	7FB7	sz      A_DATA5.7
				;305				set	a_com2
0797	5FAF	set     A_COM2
				;306				mov	a, a_data0
0798	4732	mov     a, A_DATA0
				;307				add	a, a_data4
0799	4336	add     a, A_DATA4
				;308		    		mov	a_to0, a
079A	40BA	mov     A_TO0, a
				;309		    		mov	a, a_data1
079B	4733	mov     a, A_DATA1
				;310		    		adc	a, a_data5
079C	5337	adc     a, A_DATA5
				;311		    		mov	a_to1, a
079D	40BB	mov     A_TO1, a
				;312		     		mov	a, a_com1
079E	472E	mov     a, A_COM1
				;313		      		adc	a, a_com2
079F	532F	adc     a, A_COM2
				;314		        	mov	a_to2, a
07A0	40BC	mov     A_TO2, a
				;315		        	CLR 	WDT
07A1	0001	clr     wdt
				;316				ret
07A2	0003	ret
				;317	
				;318	
				;319	;========================================================
				;320	;Function : SignedMul_16Bit(66us@20MHz)
				;321	;Note     : Call Function Type for Math of Multiple
				;322	;input 	  : a_data1(H)_data0(L)
				;323	;	  : a_data5(H)_data4(L)
				;324	;output   : a_to3(H)_to2(M2)_to1(M1)_to0(L)
				;325	;========================================================
				;326		SignedMul_16Bit:
				;327				CLR WDT
				SignedMul_16Bit:
07A3	0001	clr     wdt
				;328		        	clr	a_com1					;data0data1*data4data5
07A4	5F2E	clr     A_COM1
				;329		        	clr	a_com2		
07A5	5F2F	clr     A_COM2
				;330		        	clr	[0Ah].0
07A6	340A	clr     C
				;331		        	rlca	a_data1
07A7	5A33	rlca    A_DATA1
				;332		        	rlc	a_com1
07A8	5AAE	rlc     A_COM1
				;333		        	snz	a_com1.0
07A9	782E	snz     A_COM1.0
				;334		        	jmp	chu16
07AA	2FB1	jmp     chu16
				;335		        	
				;336		        	cpl	a_data0
07AB	41B2	cpl     A_DATA0
				;337		        	cpl	a_data1
07AC	41B3	cpl     A_DATA1
				;338		        	mov	a, 01h
07AD	0F01	mov     a, 1H
				;339		        	addm	a, a_data0
07AE	43B2	addm    a, A_DATA0
				;340		        	mov	a, 00h
07AF	0F00	mov     a, 0H
				;341		        	adcm	a, a_data1  
07B0	53B3	adcm    a, A_DATA1
				;342		chu16:  
				;343				clr	[0Ah].0
				chu16:
07B1	340A	clr     C
				;344		        	rlca	a_data5
07B2	5A37	rlca    A_DATA5
				;345		        	rlc	a_com2
07B3	5AAF	rlc     A_COM2
				;346		        	snz	a_com2.0
07B4	782F	snz     A_COM2.0
				;347		        	jmp	unmul16
07B5	2FBC	jmp     unmul16
				;348		        	
				;349		        	cpl	a_data4
07B6	41B6	cpl     A_DATA4
				;350		        	cpl	a_data5
07B7	41B7	cpl     A_DATA5
				;351		        	mov	a, 01h
07B8	0F01	mov     a, 1H
				;352		        	addm	a, a_data4
07B9	43B6	addm    a, A_DATA4
				;353		        	mov	a, 00h
07BA	0F00	mov     a, 0H
				;354		        	adcm	a, a_data5
07BB	53B7	adcm    a, A_DATA5
				;355		unmul16:
				;356				call	unbin_mul_16	
				unmul16:
07BC	27D0	call    unbin_mul_16
				;357		        	mov	a, a_com1
07BD	472E	mov     a, A_COM1
				;358		        	or	a, a_com2
07BE	452F	or      a, A_COM2
				;359		        	snz	acc.0
07BF	3805	snz     ACC.0
				;360		        	jmp	dismul16	
07C0	2FCF	jmp     dismul16
				;361		        	
				;362		        	mov	a, a_com1
07C1	472E	mov     a, A_COM1
				;363		        	and	a, a_com2
07C2	462F	and     a, A_COM2
				;364		       		sz	acc.0
07C3	3C05	sz      ACC.0
				;365		       		jmp	dismul16	
07C4	2FCF	jmp     dismul16
				;366		        	
				;367		        	cpl	a_to0		
07C5	41BA	cpl     A_TO0
				;368		        	cpl	a_to1
07C6	41BB	cpl     A_TO1
				;369		        	cpl	a_to2
07C7	41BC	cpl     A_TO2
				;370		        	cpl	a_to3
07C8	41BD	cpl     A_TO3
				;371		        	mov	a, 01h
07C9	0F01	mov     a, 1H
				;372		        	addm	a, a_to0
07CA	43BA	addm    a, A_TO0
				;373		        	mov	a, 00h
07CB	0F00	mov     a, 0H
				;374		        	adcm	a, a_to1
07CC	53BB	adcm    a, A_TO1
				;375		        	adcm	a, a_to2
07CD	53BC	adcm    a, A_TO2
				;376		        	adcm	a, a_to3
07CE	53BD	adcm    a, A_TO3
				;377		dismul16:
				;378				ret
				dismul16:
07CF	0003	ret
				;379	
				;380	
				;381	;========================================================
				;382	;Function : unbin_mul_16
				;383	;Note     : Call Function Type for Math
				;384	;input    : a_data1(H)_data0(L)
				;385	;	  : a_data5(H)_data4(L)
				;386	;output   : a_to3(H)_to2(M2)_to1(M1)_to0(L)
				;387	;========================================================
				;388		unbin_mul_16:
				;389				CLR WDT
				unbin_mul_16:
07D0	0001	clr     wdt
				;390				mov	a, 10h					;data0data1*data4data5
07D1	0F10	mov     a, 10H
				;391				mov	a_count0, a    
07D2	40C2	mov     A_COUNT0, a
				;392		    		clr	[0ah].0  
07D3	340A	clr     C
				;393		rradd16:
				;394		        	rrc	a_to3
				rradd16:
07D4	5BBD	rrc     A_TO3
				;395		        	rrc	a_to2
07D5	5BBC	rrc     A_TO2
				;396		        	rrc	a_data5         
07D6	5BB7	rrc     A_DATA5
				;397		        	rrc	a_data4
07D7	5BB6	rrc     A_DATA4
				;398		        	snz	[0ah].0      
07D8	380A	snz     C
				;399		        	jmp	rr116
07D9	2FDE	jmp     rr116
				;400		        	
				;401		        	mov	a, a_data0
07DA	4732	mov     a, A_DATA0
				;402		        	addm	a, a_to2
07DB	43BC	addm    a, A_TO2
				;403		        	mov	a, a_data1
07DC	4733	mov     a, A_DATA1
				;404		        	adcm	a, a_to3
07DD	53BD	adcm    a, A_TO3
				;405		rr116:
				;406				sdz	a_count0
				rr116:
07DE	57C2	sdz     A_COUNT0
				;407		        	jmp	rradd16     
07DF	2FD4	jmp     rradd16
				;408		        	
				;409		        	rrc	a_to3
07E0	5BBD	rrc     A_TO3
				;410		        	rrc	a_to2
07E1	5BBC	rrc     A_TO2
				;411		        	rrc	a_data5
07E2	5BB7	rrc     A_DATA5
				;412		        	rrc	a_data4
07E3	5BB6	rrc     A_DATA4
				;413		        	mov	a, a_data4
07E4	4736	mov     a, A_DATA4
				;414		        	mov	a_to0, a
07E5	40BA	mov     A_TO0, a
				;415		        	mov	a, a_data5
07E6	4737	mov     a, A_DATA5
				;416		        	mov	a_to1, a
07E7	40BB	mov     A_TO1, a
				;417				ret
07E8	0003	ret
				;418	
				;419	
				;420	;========================================================
				;421	;Function : SignedAdd_24Bit
				;422	;Note     : Call Function Type for Math of Addtion
				;423	;input    : a_data2(H)_data1(M)_data0(L)
				;424	;	  : a_data6(H)_data5(M)_data4(L)
				;425	;output   : a_to3(H)_to2(M2)_to1(M1)_to0(L)
				;426	;========================================================
				;427		SignedAdd_24Bit:
				;428			        CLR WDT
				SignedAdd_24Bit:
07E9	0001	clr     wdt
				;429			        mov	a, 00h    				;data0data1data2+data4data5data6
07EA	0F00	mov     a, 0H
				;430			        mov	a_com1, a
07EB	40AE	mov     A_COM1, a
				;431			     	mov	a_com2, a
07EC	40AF	mov     A_COM2, a
				;432			    	sz	a_data2.7
07ED	7FB4	sz      A_DATA2.7
				;433			    	mov	a, 0ffh
07EE	0FFF	mov     a, FFH
				;434	
				;435				mov	a_com1, a
07EF	40AE	mov     A_COM1, a
				;436				mov	a, 00h
07F0	0F00	mov     a, 0H
				;437			     	sz	a_data6.7
07F1	7FB8	sz      A_DATA6.7
				;438				mov	a, 0ffh
07F2	0FFF	mov     a, FFH
				;439	
				;440				mov	a_com2, a
07F3	40AF	mov     A_COM2, a
				;441				mov	a, a_data0
07F4	4732	mov     a, A_DATA0
				;442				add	a, a_data4
07F5	4336	add     a, A_DATA4
				;443			        mov	a_to0, a
07F6	40BA	mov     A_TO0, a
				;444			        mov	a, a_data1
07F7	4733	mov     a, A_DATA1
				;445			        adc	a, a_data5
07F8	5337	adc     a, A_DATA5
				;446			        mov	a_to1, a
07F9	40BB	mov     A_TO1, a
				;447			        mov	a, a_data2
07FA	4734	mov     a, A_DATA2
				;448			        adc	a, a_data6
07FB	5338	adc     a, A_DATA6
				;449			        mov	a_to2, a
07FC	40BC	mov     A_TO2, a
				;450			     	mov	a, a_com1
07FD	472E	mov     a, A_COM1
				;451			      	adc	a, a_com2
07FE	532F	adc     a, A_COM2
				;452			        mov	a_to3, a
07FF	40BD	mov     A_TO3, a
				;453				ret
0800	0003	ret
				;454	
				;455	
				;456	;========================================================
				;457	;Function : SignedSub_24Bit(20us@20MHz)
				;458	;Note     : Call Function Type for Math of Substration          
				;459	;input    : a_data2(H)_data1(M)_data0(L)
				;460	;	  : a_data6(H)_data5(M)_data4(L)
				;461	;output   : a_to3(H)_to2(M2)_to1(M1)_to0(L)
				;462	;========================================================
				;463		SignedSub_24Bit:
				;464				CLR WDT						;data0data1data2-data4data5data6
				SignedSub_24Bit:
0801	0001	clr     wdt
				;465				mov	a, 00h
0802	0F00	mov     a, 0H
				;466		        	mov	a_com3, a
0803	40B0	mov     A_COM3, a
				;467				cpl	a_data4
0804	41B6	cpl     A_DATA4
				;468		        	cpl	a_data5
0805	41B7	cpl     A_DATA5
				;469		        	cpl	a_data6    
0806	41B8	cpl     A_DATA6
				;470				mov	a, 01h
0807	0F01	mov     a, 1H
				;471				addm	a, a_data4
0808	43B6	addm    a, A_DATA4
				;472		        	mov	a, 00h
0809	0F00	mov     a, 0H
				;473		        	adcm	a, a_data5
080A	53B7	adcm    a, A_DATA5
				;474		        	adcm	a, a_data6
080B	53B8	adcm    a, A_DATA6
				;475		        	
				;476		        	mov	a, 80h        
080C	0F80	mov     a, 80H
				;477				sub	a, a_data6
080D	4238	sub     a, A_DATA6
				;478		        	sz	acc
080E	1085	sz      ACC
				;479		        	jmp	begins24
080F	681E	jmp     begins24
				;480		        	
				;481		        	mov	a, 00h
0810	0F00	mov     a, 0H
				;482		        	sub	a, a_data5
0811	4237	sub     a, A_DATA5
				;483		        	sz	acc
0812	1085	sz      ACC
				;484		        	jmp	begins24
0813	681E	jmp     begins24
				;485		        	
				;486		        	mov	a, 00h
0814	0F00	mov     a, 0H
				;487		        	sub	a, a_data4   
0815	4236	sub     a, A_DATA4
				;488		        	sz	acc
0816	1085	sz      ACC
				;489		        	jmp	begins24                  
0817	681E	jmp     begins24
				;490		        	
				;491		        	mov	a, 0ffh
0818	0FFF	mov     a, FFH
				;492		        	mov	a_data4, a
0819	40B6	mov     A_DATA4, a
				;493		        	mov	a_data5, a
081A	40B7	mov     A_DATA5, a
				;494		        	mov	a, 07fh
081B	0F7F	mov     a, 7FH
				;495		        	mov	a_data6, a
081C	40B8	mov     A_DATA6, a
				;496		        	inc	a_com3
081D	54B0	inc     A_COM3
				;497		begins24:
				;498				call	SignedAdd_24Bit
				begins24:
081E	27E9	call    SignedAdd_24Bit
				;499		        	mov	a, a_to0
081F	473A	mov     a, A_TO0
				;500		        	add	a, a_com3
0820	4330	add     a, A_COM3
				;501		        	mov	a_to0, a
0821	40BA	mov     A_TO0, a
				;502		        	mov	a, 00h
0822	0F00	mov     a, 0H
				;503		        	adcm	a, a_to1
0823	53BB	adcm    a, A_TO1
				;504		        	adcm	a, a_to2
0824	53BC	adcm    a, A_TO2
				;505		        	adcm	a, a_to3
0825	53BD	adcm    a, A_TO3
				;506				ret
0826	0003	ret
				;507	
				;508	
				;509	;========================================================
				;510	;Function : SignedMul_24Bit(78us@20MHz)
				;511	;Note     : Call Function Type for Math of Multiple	
				;512	;input 	  : a_data2(H)_data1(M)_data0(L)
				;513	;	  : a_data6(H)_data5(M)_data4(L)
				;514	;output   : a_to5(H)_to4(M3)_to3(M2)_to2(M1)_to1(M0)_to0(L)
				;515	;========================================================
				;516		SignedMul_24Bit:
				;517		        	mov	a, 00h					;data0data1data2*data4data5data6
				SignedMul_24Bit:
0827	0F00	mov     a, 0H
				;518		        	mov	a_com1, a	
0828	40AE	mov     A_COM1, a
				;519		        	mov	a_com2, a
0829	40AF	mov     A_COM2, a
				;520		        	clr	[0Ah].0
082A	340A	clr     C
				;521		        	rlca	a_data2
082B	5A34	rlca    A_DATA2
				;522		        	rlc	a_com1
082C	5AAE	rlc     A_COM1
				;523		        	snz	a_com1.0
082D	782E	snz     A_COM1.0
				;524		        	jmp	chu24
082E	6837	jmp     chu24
				;525		        	
				;526		        	cpl	a_data0
082F	41B2	cpl     A_DATA0
				;527		        	cpl	a_data1
0830	41B3	cpl     A_DATA1
				;528		        	cpl	a_data2
0831	41B4	cpl     A_DATA2
				;529		        	mov	a, 01h
0832	0F01	mov     a, 1H
				;530		        	addm	a, a_data0
0833	43B2	addm    a, A_DATA0
				;531		        	mov	a, 00h
0834	0F00	mov     a, 0H
				;532		        	adcm	a, a_data1
0835	53B3	adcm    a, A_DATA1
				;533		        	adcm	a, a_data2 
0836	53B4	adcm    a, A_DATA2
				;534		chu24:  
				;535				CLR WDT
				chu24:
0837	0001	clr     wdt
				;536				clr	[0Ah].0
0838	340A	clr     C
				;537		        	rlca	a_data6
0839	5A38	rlca    A_DATA6
				;538		        	rlc	a_com2
083A	5AAF	rlc     A_COM2
				;539		        	snz	a_com2.0
083B	782F	snz     A_COM2.0
				;540		        	jmp	unmul24
083C	6845	jmp     unmul24
				;541		        	
				;542		        	cpl	a_data4
083D	41B6	cpl     A_DATA4
				;543		        	cpl	a_data5
083E	41B7	cpl     A_DATA5
				;544		        	cpl	a_data6
083F	41B8	cpl     A_DATA6
				;545		        	mov	a, 01h
0840	0F01	mov     a, 1H
				;546		        	addm	a, a_data4
0841	43B6	addm    a, A_DATA4
				;547		        	mov	a, 00h
0842	0F00	mov     a, 0H
				;548		        	adcm	a, a_data5
0843	53B7	adcm    a, A_DATA5
				;549		        	adcm	a, a_data6
0844	53B8	adcm    a, A_DATA6
				;550		unmul24:
				;551				call	unbin_mul_24
				unmul24:
0845	605D	call    unbin_mul_24
				;552		        	mov	a, a_com1
0846	472E	mov     a, A_COM1
				;553		        	or	a, a_com2
0847	452F	or      a, A_COM2
				;554		        	snz	acc.0
0848	3805	snz     ACC.0
				;555		        	jmp	dismul24	
0849	685C	jmp     dismul24
				;556		        	
				;557		        	mov	a, a_com1
084A	472E	mov     a, A_COM1
				;558		        	and	a, a_com2
084B	462F	and     a, A_COM2
				;559		       		sz	acc.0
084C	3C05	sz      ACC.0
				;560		       		jmp	dismul24	
084D	685C	jmp     dismul24
				;561		        	
				;562		        	cpl	a_to0		
084E	41BA	cpl     A_TO0
				;563		        	cpl	a_to1
084F	41BB	cpl     A_TO1
				;564		        	cpl	a_to2
0850	41BC	cpl     A_TO2
				;565		        	cpl	a_to3
0851	41BD	cpl     A_TO3
				;566		        	cpl	a_to4
0852	41BE	cpl     A_TO4
				;567		        	cpl	a_to5
0853	41BF	cpl     A_TO5
				;568		        	mov	a, 01h
0854	0F01	mov     a, 1H
				;569		        	addm	a, a_to0
0855	43BA	addm    a, A_TO0
				;570		        	mov	a, 00h
0856	0F00	mov     a, 0H
				;571		        	adcm	a, a_to1
0857	53BB	adcm    a, A_TO1
				;572		        	adcm	a, a_to2
0858	53BC	adcm    a, A_TO2
				;573		        	adcm	a, a_to3
0859	53BD	adcm    a, A_TO3
				;574		        	adcm	a, a_to4
085A	53BE	adcm    a, A_TO4
				;575		        	adcm	a, a_to5
085B	53BF	adcm    a, A_TO5
				;576		dismul24:
				;577				ret
				dismul24:
085C	0003	ret
				;578	
				;579	;========================================================
				;580	;Function : unbin_mul_24
				;581	;Note     : Call Function Type for Math of Multiple	
				;582	;input    : a_data2(H)_data1(M)_data0(L)
				;583	; 	  : a_data6(H)_data5(M)_data4(L)
				;584	;output   : a_to5(H)_to4(M3)_to3(M2)_to2(M1)_to1(M0)_to0(L)
				;585	;========================================================
				;586		unbin_mul_24:
				;587				mov	a, 18h					;data0data1data2*data4data5data6
				unbin_mul_24:
085D	0F18	mov     a, 18H
				;588				mov	a_count0, a    
085E	40C2	mov     A_COUNT0, a
				;589		    		clr	[0ah].0  
085F	340A	clr     C
				;590		rradd24:
				;591				CLR WDT
				rradd24:
0860	0001	clr     wdt
				;592				rrc	a_to5
0861	5BBF	rrc     A_TO5
				;593		        	rrc	a_to4
0862	5BBE	rrc     A_TO4
				;594		        	rrc	a_to3
0863	5BBD	rrc     A_TO3
				;595		        	rrc	a_data6
0864	5BB8	rrc     A_DATA6
				;596		        	rrc	a_data5         
0865	5BB7	rrc     A_DATA5
				;597		        	rrc	a_data4
0866	5BB6	rrc     A_DATA4
				;598		        	snz	[0ah].0      
0867	380A	snz     C
				;599		        	jmp	rr124
0868	686F	jmp     rr124
				;600		        	
				;601		        	mov	a, a_data0
0869	4732	mov     a, A_DATA0
				;602		        	addm	a, a_to3
086A	43BD	addm    a, A_TO3
				;603		        	mov	a, a_data1
086B	4733	mov     a, A_DATA1
				;604		        	adcm	a, a_to4
086C	53BE	adcm    a, A_TO4
				;605		        	mov	a, a_data2
086D	4734	mov     a, A_DATA2
				;606		        	adcm	a, a_to5
086E	53BF	adcm    a, A_TO5
				;607		rr124: 
				;608		 		sdz	a_count0
				rr124:
086F	57C2	sdz     A_COUNT0
				;609		        	jmp	rradd24
0870	6860	jmp     rradd24
				;610		        	
				;611		        	rrc	a_to5     
0871	5BBF	rrc     A_TO5
				;612		        	rrc	a_to4
0872	5BBE	rrc     A_TO4
				;613		        	rrc	a_to3
0873	5BBD	rrc     A_TO3
				;614		        	rrc	a_data6
0874	5BB8	rrc     A_DATA6
				;615		        	rrc	a_data5
0875	5BB7	rrc     A_DATA5
				;616		        	rrc	a_data4
0876	5BB6	rrc     A_DATA4
				;617		        	mov	a, a_data4
0877	4736	mov     a, A_DATA4
				;618		        	mov	a_to0, a
0878	40BA	mov     A_TO0, a
				;619		        	mov	a, a_data5
0879	4737	mov     a, A_DATA5
				;620		        	mov	a_to1, a
087A	40BB	mov     A_TO1, a
				;621		        	mov	a, a_data6
087B	4738	mov     a, A_DATA6
				;622		        	mov	a_to2, a
087C	40BC	mov     A_TO2, a
				;623				ret
087D	0003	ret
				;624	
				;625	
				;626	;========================================================
				;627	;Function : SignedDiv_24Bit(20us@20MHz)
				;628	;Note     : Call Function Type for Math of Substration   	
				;629	;input    : a_data2(H)_data1(M)_data0(L)
				;630	;	  : a_data6(H)_data5(M)_data4(L)
				;631	;output   : a_to2(H)_to1(M)_to0(L)
				;632	;========================================================
				;633		SignedDiv_24Bit:
				;634		        	mov	a, 00h					;data0data1data2/data4data5data6
				SignedDiv_24Bit:
087E	0F00	mov     a, 0H
				;635		        	mov	a_com1, a	
087F	40AE	mov     A_COM1, a
				;636		        	mov	a_com2, a 
0880	40AF	mov     A_COM2, a
				;637		        	clr	[0Ah].0
0881	340A	clr     C
				;638		        	rlca	a_data2
0882	5A34	rlca    A_DATA2
				;639		        	rlc	a_com1
0883	5AAE	rlc     A_COM1
				;640		        	snz	a_com1.0
0884	782E	snz     A_COM1.0
				;641		        	jmp	chu124
0885	688E	jmp     chu124
				;642		        	cpl	a_data0
0886	41B2	cpl     A_DATA0
				;643		        	cpl	a_data1
0887	41B3	cpl     A_DATA1
				;644		        	cpl	a_data2
0888	41B4	cpl     A_DATA2
				;645		        	mov	a, 01h
0889	0F01	mov     a, 1H
				;646		        	addm	a, a_data0
088A	43B2	addm    a, A_DATA0
				;647		        	mov	a, 00h
088B	0F00	mov     a, 0H
				;648		        	adcm	a, a_data1 
088C	53B3	adcm    a, A_DATA1
				;649		        	adcm	a, a_data2
088D	53B4	adcm    a, A_DATA2
				;650		chu124: 
				;651				CLR WDT
				chu124:
088E	0001	clr     wdt
				;652				clr	[0Ah].0
088F	340A	clr     C
				;653		        	rlca	a_data6
0890	5A38	rlca    A_DATA6
				;654		        	rlc	a_com2
0891	5AAF	rlc     A_COM2
				;655		        	snz	a_com2.0
0892	782F	snz     A_COM2.0
				;656		        	jmp	undiv24
0893	689C	jmp     undiv24
				;657		        	cpl	a_data4
0894	41B6	cpl     A_DATA4
				;658		        	cpl	a_data5
0895	41B7	cpl     A_DATA5
				;659		        	cpl	a_data6
0896	41B8	cpl     A_DATA6
				;660		        	mov	a, 01h
0897	0F01	mov     a, 1H
				;661		        	addm	a, a_data4
0898	43B6	addm    a, A_DATA4
				;662		        	mov	a, 00h
0899	0F00	mov     a, 0H
				;663		        	adcm	a, a_data5
089A	53B7	adcm    a, A_DATA5
				;664		        	adcm	a, a_data6
089B	53B8	adcm    a, A_DATA6
				;665		undiv24:
				;666				call unbin_div_24
				undiv24:
089C	60B0	call    unbin_div_24
				;667		        	mov	a, a_com1
089D	472E	mov     a, A_COM1
				;668		        	or	a, a_com2
089E	452F	or      a, A_COM2
				;669		        	snz	acc.0
089F	3805	snz     ACC.0
				;670		        	jmp	disdiv24	
08A0	68AF	jmp     disdiv24
				;671		        	mov	a, a_com1
08A1	472E	mov     a, A_COM1
				;672		        	and	a, a_com2
08A2	462F	and     a, A_COM2
				;673		        	sz	acc.0
08A3	3C05	sz      ACC.0
				;674		        	jmp	disdiv24	
08A4	68AF	jmp     disdiv24
				;675		        	
				;676		        	cpl	a_to0		
08A5	41BA	cpl     A_TO0
				;677		        	cpl	a_to1
08A6	41BB	cpl     A_TO1
				;678		        	cpl	a_to2
08A7	41BC	cpl     A_TO2
				;679		        	cpl	a_to3
08A8	41BD	cpl     A_TO3
				;680		        	mov	a, 01h
08A9	0F01	mov     a, 1H
				;681		        	addm	a, a_to0
08AA	43BA	addm    a, A_TO0
				;682		        	mov	a, 00h
08AB	0F00	mov     a, 0H
				;683		        	adcm	a, a_to1
08AC	53BB	adcm    a, A_TO1
				;684		        	adcm	a, a_to2
08AD	53BC	adcm    a, A_TO2
				;685		        	adcm	a, a_to3
08AE	53BD	adcm    a, A_TO3
				;686		disdiv24: 
				;687				ret
				disdiv24:
08AF	0003	ret
				;688	
				;689	
				;690	;========================================================
				;691	;Function : unbin_div_24
				;692	;Note     : Call Function Type for Math of Substration   	
				;693	;input    : a_data2(H)_data1(M)_data0(L)
				;694	;	  : a_data6(H)_data5(M)_data4(L)
				;695	;output   : a_to2(H)_to1(M)_to0(L)
				;696	;========================================================
				;697		unbin_div_24:
				;698				CLR 	WDT					;data0data1data2/data4data5data6
				unbin_div_24:
08B0	0001	clr     wdt
				;699		        	mov	a,18h	
08B1	0F18	mov     a, 18H
				;700		        	mov	a_count0, a 
08B2	40C2	mov     A_COUNT0, a
				;701		        	sz	a_data6	
08B3	50B8	sz      A_DATA6
				;702		        	jmp	start24
08B4	68BA	jmp     start24
				;703		        	
				;704		        	sz	a_data5
08B5	50B7	sz      A_DATA5
				;705		        	jmp	start24
08B6	68BA	jmp     start24
				;706		        	
				;707		        	sz	a_data4           
08B7	50B6	sz      A_DATA4
				;708		        	jmp	start24
08B8	68BA	jmp     start24
				;709		        	
				;710		        	jmp	over24
08B9	68E7	jmp     over24
				;711		start24:
				;712				sz	a_data2	
				start24:
08BA	50B4	sz      A_DATA2
				;713		        	jmp	div24
08BB	68C1	jmp     div24
				;714		        	
				;715		        	sz	a_data1
08BC	50B3	sz      A_DATA1
				;716		        	jmp	div24
08BD	68C1	jmp     div24
				;717		        	
				;718		        	sz	a_data0
08BE	50B2	sz      A_DATA0
				;719		        	jmp	div24
08BF	68C1	jmp     div24
				;720		        	
				;721		        	jmp	dispa24
08C0	68DE	jmp     dispa24
				;722		div24:  
				;723				clr	[0Ah].0	
				div24:
08C1	340A	clr     C
				;724		        	rlc	a_data0
08C2	5AB2	rlc     A_DATA0
				;725		        	rlc	a_data1
08C3	5AB3	rlc     A_DATA1
				;726		        	rlc	a_data2
08C4	5AB4	rlc     A_DATA2
				;727		        	rlc	a_to4
08C5	5ABE	rlc     A_TO4
				;728		        	rlc	a_to5  
08C6	5ABF	rlc     A_TO5
				;729		        	rlc	a_to6	
08C7	5AC0	rlc     A_TO6
				;730		        	mov	a, a_to4	
08C8	473E	mov     a, A_TO4
				;731		        	sub	a, a_data4
08C9	4236	sub     a, A_DATA4
				;732		        	mov	a_com3, a
08CA	40B0	mov     A_COM3, a
				;733		        	mov	a, a_to5
08CB	473F	mov     a, A_TO5
				;734		        	sbc	a, a_data5
08CC	5237	sbc     a, A_DATA5
				;735		        	mov	a_com4, a
08CD	40B1	mov     A_COM4, a
				;736		        	mov	a, a_to6
08CE	4740	mov     a, A_TO6
				;737		        	sbc	a, a_data6
08CF	5238	sbc     a, A_DATA6
				;738		        	snz	[0Ah].0        
08D0	380A	snz     C
				;739		        	jmp	next24	
08D1	68DC	jmp     next24
				;740		        	
				;741		        	mov	a_to6, a
08D2	40C0	mov     A_TO6, a
				;742		        	mov	a, a_com3
08D3	4730	mov     a, A_COM3
				;743		        	mov	a_to4, a
08D4	40BE	mov     A_TO4, a
				;744		        	mov	a, a_com4
08D5	4731	mov     a, A_COM4
				;745		        	mov	a_to5, a	
08D6	40BF	mov     A_TO5, a
				;746		        	mov	a, 01h
08D7	0F01	mov     a, 1H
				;747		        	addm	a, a_data0
08D8	43B2	addm    a, A_DATA0
				;748		        	mov	a, 00h
08D9	0F00	mov     a, 0H
				;749		        	adcm	a, a_data1
08DA	53B3	adcm    a, A_DATA1
				;750		        	adcm	a, a_data2
08DB	53B4	adcm    a, A_DATA2
				;751		next24:  
				;752				sdz	a_count0
				next24:
08DC	57C2	sdz     A_COUNT0
				;753		        	jmp	div24
08DD	68C1	jmp     div24
				;754		dispa24:
				;755				mov	a, a_data0
				dispa24:
08DE	4732	mov     a, A_DATA0
				;756		        	mov	a_to0, a 
08DF	40BA	mov     A_TO0, a
				;757		        	mov	a, a_data1
08E0	4733	mov     a, A_DATA1
				;758		        	mov	a_to1, a   
08E1	40BB	mov     A_TO1, a
				;759		        	mov	a, a_data2
08E2	4734	mov     a, A_DATA2
				;760		        	mov	a_to2, a              
08E3	40BC	mov     A_TO2, a
				;761				mov	a, 00h
08E4	0F00	mov     a, 0H
				;762				mov	a_to3, a
08E5	40BD	mov     A_TO3, a
				;763		      		ret
08E6	0003	ret
				;764		over24:
				;765			       	ret	
				over24:
08E7	0003	ret
				;766	
				;767	
				;768	;========================================================
				;769	;Function : CLRMath 
				;770	;Note     : 
				;771	;========================================================
				;772			CLRMath:
				;773				CLR	a_com1
				CLRMath:
08E8	5F2E	clr     A_COM1
				;774				CLR	a_com2
08E9	5F2F	clr     A_COM2
				;775				CLR	a_com3
08EA	5F30	clr     A_COM3
				;776				CLR	a_com4
08EB	5F31	clr     A_COM4
				;777				
				;778				CLR	a_data0
08EC	5F32	clr     A_DATA0
				;779				CLR	a_data1
08ED	5F33	clr     A_DATA1
				;780				CLR	a_data2
08EE	5F34	clr     A_DATA2
				;781				CLR	a_data3
08EF	5F35	clr     A_DATA3
				;782				CLR	a_data4
08F0	5F36	clr     A_DATA4
				;783				CLR	a_data5
08F1	5F37	clr     A_DATA5
				;784				CLR	a_data6
08F2	5F38	clr     A_DATA6
				;785				CLR	a_data7
08F3	5F39	clr     A_DATA7
				;786	
				;787				CLR	a_to0
08F4	5F3A	clr     A_TO0
				;788				CLR	a_to1
08F5	5F3B	clr     A_TO1
				;789				CLR	a_to2
08F6	5F3C	clr     A_TO2
				;790				CLR	a_to3
08F7	5F3D	clr     A_TO3
				;791				CLR	a_to4
08F8	5F3E	clr     A_TO4
				;792				CLR	a_to5
08F9	5F3F	clr     A_TO5
				;793				CLR	a_to6
08FA	5F40	clr     A_TO6
				;794				CLR	a_to7
08FB	5F41	clr     A_TO7
				;795	
				;796				CLR	a_count0
08FC	5F42	clr     A_COUNT0
				;797				CLR 	WDT
08FD	0001	clr     wdt
				;798				RET
08FE	0003	ret
				;799	
				;800	END
				;file D:\HOLTEK\C900\C960 Project\Chris負責彙整上網方案\WAS_C2006(HT66FW2230無線充電)\11_Tech_C2006\COD_C2006-A\ReciPackageDataUnit.asm
				;1	;*******************************************************************************************
				;2	;*****	                               History	                                       *****
				;3	;*******************************************************************************************
				;4	;V1.0 - WPC Qi Certification Source Code by Edward in HOLTEK Semiconductor Inc. on 2014/12/25
				;5	
				;6	
				;7	
				;8	;*******************************************************************************************
				;9	;*****	                           Including File	                               *****
				;10	;*******************************************************************************************
				;11	#INCLUDE 	HT66FW2230.inc
				;12	#INCLUDE	TxUserDEF2230v302.inc
				;13	
				;14	
				;15	;*******************************************************************************************
				;16	;*****	                        Function / Parameter Claim	                       *****
				;17	;*******************************************************************************************
				;18	PUBLIC		ReciPackageDataUnitPreee1
				;19	PUBLIC		ReciPackageDataUnit
				;20	
				;21	EXTERN		DelayTimer				:	near
				;22	EXTERN		INTTimer				:	near
				;23	EXTERN		INTCheck				:	near
				;24	
				;25	EXTERN		a_r_DetectCNT			        :	byte
				;26	EXTERN		a_MutipleTimeLCTM		        :	byte
				;27	EXTERN		a_MutipleTimeHCTM		        :	byte
				;28	EXTERN		a_DemoV_I1_I2			        :	byte
				;29	EXTERN		a_MutipleTimeLSTM		        :	byte
				;30	EXTERN		a_MutipleTimeHSTM		        :	byte
				;31	EXTERN		fg_FlagDemo			        :	bit
				;32	EXTERN		fg_INT1				        :	bit
				;33	EXTERN		fg_DemoDetect			        :	bit
				;34	EXTERN		fg_DemoDetectTimeOut			:	bit		
				;35	EXTERN		fg_TimeOut			        :	bit
				;36	EXTERN		fg_MutipleTimeHflagCTM		        :	bit
				;37	
				;38	EXTERN		fg_DUDataStart				:	bit
				;39	EXTERN		fg_DU					:	bit
				;40	EXTERN		fg_StartBit				:	bit
				;41	EXTERN		fg_ParityBit				:	bit
				;42	EXTERN		fg_ParityErr				:	bit
				;43	EXTERN		fg_StopBit				:	bit
				;44	EXTERN		fg_WaitDataOut				:	bit
				;45	EXTERN		fg_StopBitPre				:	bit
				;46	EXTERN		fg_DataFirst				:	bit
				;47	EXTERN		fg_Preamble				:	bit
				;48	EXTERN		fg_ChecksumBit				:	bit
				;49	EXTERN		fg_StartReci				:	bit
				;50	EXTERN		fg_DataByteCNTFull			:	bit
				;51	EXTERN		a_StatusCntInt1				:	byte
				;52	EXTERN		a_DataOUTtemp				:	byte
				;53	EXTERN		a_DataParityCNT				:	byte
				;54	EXTERN		a_TimeOutCNT				:	byte
				;55	EXTERN		a_DataOUT				:	byte
				;56	EXTERN		a_DataCNT				:	byte
				;57	EXTERN		a_Preamble4BitCNT			:	byte
				;58	EXTERN		a_Preamble25BitCNT			:	byte
				;59	EXTERN		a_NoToggleCNT				:	byte
				;60	EXTERN		a_DataByteCNT				:	byte
				;61	EXTERN		a_DataByteCNTtemp			:	byte
				;62	EXTERN		a_AddrDataOUT				:	byte
				;63	
				;64	
				;65	;*******************************************************************************************
				;66	;*****	                            Program Body	                               *****
				;67	;*******************************************************************************************
				;68	ReciPackageDataUnit		.Section 	'code'
				;69	;========================================================
				;70	;Function : ReciPackageDataUnitPreee1
				;71	;Note     : Call Function Type for Detection
				;72	;input    : 
				;73	;output   : 
				;74	;========================================================
				;75		ReciPackageDataUnitPreee1:
				;76				MOV	A, 00EH					;; without ReciPackageDataUnitPre
				ReciPackageDataUnitPreee1:
				RECIPACKAGEDATAUNIT:
08FF	0F0E	mov     a, EH
				;77				MOV	a_r_DetectCNT, A
0900	40F9	mov     A_R_DETECTCNT, a
				;78		RPDUP_INTcheck:
				;79				CLR WDT
				RPDUP_INTcheck:
0901	0001	clr     wdt
				;80				MOV	A, c_IniComBy0MutipleTimeL		; 100us
0902	0F02	mov     a, 2H
				;81				MOV	a_MutipleTimeLCTM, A
0903	4083	mov     A_MUTIPLETIMELCTM, a
				;82				MOV	A, c_IniComBy0MutipleTimeH
0904	0F00	mov     a, 0H
				;83				MOV	a_MutipleTimeHCTM, A
0905	4084	mov     A_MUTIPLETIMEHCTM, a
				;84				SZ	a_MutipleTimeHCTM
0906	5084	sz      A_MUTIPLETIMEHCTM
				;85				SET	fg_MutipleTimeHflagCTM
0907	7082	set     A_PARPLLFL[1].1
				;86	
				;87				CALL	DelayTimer
0908	239A	call    DelayTimer
				;88				SET	fg_INT1
0909	7302	set     A_PARPLLFL[1].6
				;89				;SET	fg_INT0
				;90				SET	fg_FlagDemo	;3
090A	7282	set     A_PARPLLFL[1].5
				;91				MOV	A, c_IniComByMutipleTimeL0		; 250us
090B	0F05	mov     a, 5H
				;92				MOV	a_MutipleTimeLCTM, A
090C	4083	mov     A_MUTIPLETIMELCTM, a
				;93				MOV	A, c_IniComByMutipleTimeH0
090D	0F00	mov     a, 0H
				;94				MOV	a_MutipleTimeHCTM, A
090E	4084	mov     A_MUTIPLETIMEHCTM, a
				;95				SZ	a_MutipleTimeHCTM
090F	5084	sz      A_MUTIPLETIMEHCTM
				;96				SET	fg_MutipleTimeHflagCTM
0910	7082	set     A_PARPLLFL[1].1
				;97	
				;98				CALL	INTTimer
0911	26D9	call    INTTimer
				;99				SNZ	fg_TimeOut
0912	7A02	snz     A_PARPLLFL[1].4
				;100				RET
0913	0003	ret
				;101		RPDUP_INT_DEMO1:;;;
				;102				SNZ	a_DemoV_I1_I2.0
				RPDUP_INT_DEMO1:
0914	7807	snz     A_DEMOV_I1_I2.0
				;103				JMP	RPDUP_INT_DEMO2;;;
0915	6919	jmp     RPDUP_INT_DEMO2
				;104				
				;105				SZ	fg_FlagDemo	;4	
0916	7E82	sz      A_PARPLLFL[1].5
				;106				JMP	RPDUP_Recheck;;;
0917	6921	jmp     RPDUP_Recheck
				;107				JMP	RPDUP_INT;;;
0918	691B	jmp     RPDUP_INT
				;108		RPDUP_INT_DEMO2:;;;
				;109				SZ	fg_INT1	;4
				RPDUP_INT_DEMO2:
0919	7F02	sz      A_PARPLLFL[1].6
				;110				JMP	RPDUP_Recheck;;;
091A	6921	jmp     RPDUP_Recheck
				;111	
				;112				;JMP	RPDUP_INT;;;
				;113		RPDUP_INT:		
				;114				CLR	TM1C0.3					; TM1C0[3] (T1ON-bit) = 0 as TM1 OFF
				RPDUP_INT:
091B	35C9	clr     T1ON
				;115				SET	fg_INT1
091C	7302	set     A_PARPLLFL[1].6
				;116				;SET	fg_INT0
				;117				SET	fg_FlagDemo	;5
091D	7282	set     A_PARPLLFL[1].5
				;118				SDZ	a_r_DetectCNT
091E	57F9	sdz     A_R_DETECTCNT
				;119				JMP	RPDUP_INTcheck
091F	6901	jmp     RPDUP_INTcheck
				;120	
				;121				RET
0920	0003	ret
				;122		RPDUP_Recheck:
				;123				MOV	A, 00EH
				RPDUP_Recheck:
0921	0F0E	mov     a, EH
				;124				MOV	a_r_DetectCNT, A
0922	40F9	mov     A_R_DETECTCNT, a
				;125				CLR	TM1C0.3					; TM1C0[3] (T1ON-bit) = 0 as TM1 OFF
0923	35C9	clr     T1ON
				;126				SET	fg_INT1
0924	7302	set     A_PARPLLFL[1].6
				;127				;SET	fg_INT0
				;128				SET	fg_FlagDemo
0925	7282	set     A_PARPLLFL[1].5
				;129				SNZ	fg_DemoDetect
0926	78D6	snz     A_LOOPITERATION[5].1
				;130				JMP	RPDUP_INTcheck
0927	6901	jmp     RPDUP_INTcheck
				;131		
				;132				MOV	A, a_MutipleTimeHSTM
0928	4706	mov     a, A_MUTIPLETIMEHSTM
				;133				SUB	A, 053H					;;53F7h   807Fh-2C88h(570ms)=53F7h
0929	0A53	sub     a, 53H
				;134				SZ	STATUS.0
092A	3C0A	sz      C
				;135				JMP	RPDUP_INTcheck
092B	6901	jmp     RPDUP_INTcheck
				;136				;JMP	TO_Repeat_L1
				;137		TO_Repeat_L1:
				;138				MOV	A, a_MutipleTimeLSTM
				TO_Repeat_L1:
092C	4705	mov     a, A_MUTIPLETIMELSTM
				;139				SUB	A, 0F7H					;;53F7h   807Fh-2C88h(570ms)=53F7h
092D	0AF7	sub     a, F7H
				;140				SZ	STATUS.0
092E	3C0A	sz      C
				;141				JMP	RPDUP_INTcheck
092F	6901	jmp     RPDUP_INTcheck
				;142		TO_Repeat_H:
				;143				SET	fg_DemoDetectTimeOut
				TO_Repeat_H:
0930	7156	set     A_LOOPITERATION[5].2
				;144				CLR	fg_DemoDetect
0931	74D6	clr     A_LOOPITERATION[5].1
				;145				RET
0932	0003	ret
				;146	
				;147	;========================================================
				;148	;Function : ReciPackageDataUnit
				;149	;Note     : Call Function Type for Package Data 
				;150	;input    : (1) INT signal Rising/Falling
				;151	;output   : (1) a_DataOUT by IAR0 for Header, Message, checksum
				;152	;	    (2) a_DataByteCNTtemp for CNT Header, Message, checksum data byte times
				;153	;	    (3) a_AddrDataOUT for MP0
				;154	;	    (4) fg_ChecksumBit(to detect checksum stop)(Default=0, True(OK)=1)
				;155	;========================================================
				;156		ReciPackageDataUnit:
				;157				MOV	A, 001H
				ReciPackageDataUnit:
0933	0F01	mov     a, 1H
				;158				MOV	a_StatusCntInt1, A
0934	408A	mov     A_STATUSCNTINT1, a
				;159		;--------------------Data Latch-------------------------
				;160		DU_DataLatch:
				;161				CLR WDT
				DU_DataLatch:
0935	0001	clr     wdt
				;162				SET	fg_INT1
0936	7302	set     A_PARPLLFL[1].6
				;163				;SET	fg_INT0
				;164				SET	fg_FlagDemo
0937	7282	set     A_PARPLLFL[1].5
				;165				SNZ	fg_StopBitPre				;;default=1
0938	7B88	snz     A_DEMOV_I1_I2[1].7
				;166				CLR	fg_StopBit
0939	7688	clr     A_DEMOV_I1_I2[1].5
				;167				
				;168				SZ	fg_DUDataStart				;;default=1
093A	7C08	sz      A_DEMOV_I1_I2[1].0
				;169				JMP	DU_DataLatchCheck
093B	693F	jmp     DU_DataLatchCheck
				;170				
				;171				MOV	A, a_StatusCntInt1
093C	470A	mov     a, A_STATUSCNTINT1
				;172				XOR	A, 001H
093D	0C01	xor     a, 1H
				;173				MOV	a_StatusCntInt1, A
093E	408A	mov     A_STATUSCNTINT1, a
				;174		DU_DataLatchCheck:
				;175				CLR WDT
				DU_DataLatchCheck:
093F	0001	clr     wdt
				;176				SZ	a_StatusCntInt1				;;default=1
0940	508A	sz      A_STATUSCNTINT1
				;177				JMP	DU_DataLatchCheck1
0941	6974	jmp     DU_DataLatchCheck1
				;178				
				;179				SNZ	fg_StopBit				;;default=1
0942	7A88	snz     A_DEMOV_I1_I2[1].5
				;180				JMP	DU_DataLatchCheck1
0943	6974	jmp     DU_DataLatchCheck1
				;181				
				;182				SZ	fg_StartBit				;;default=1
0944	7D08	sz      A_DEMOV_I1_I2[1].2
				;183				JMP	DU_DataStart
0945	6947	jmp     DU_DataStart
				;184	
				;185				JMP	DU_DataOUTcnt
0946	694B	jmp     DU_DataOUTcnt
				;186		DU_DataStart:
				;187				CLR WDT
				DU_DataStart:
0947	0001	clr     wdt
				;188				CLR	fg_StartBit
0948	7508	clr     A_DEMOV_I1_I2[1].2
				;189				CLR	fg_WaitDataOut
0949	7708	clr     A_DEMOV_I1_I2[1].6
				;190				JMP	DU_DataLatchCheck
094A	693F	jmp     DU_DataLatchCheck
				;191		DU_DataOUTcnt:
				;192				SZ	fg_WaitDataOut
				DU_DataOUTcnt:
094B	7F08	sz      A_DEMOV_I1_I2[1].6
				;193				JMP	DU_DataLatchCheck1
094C	6974	jmp     DU_DataLatchCheck1
				;194	
				;195				SET	fg_WaitDataOut
094D	7308	set     A_DEMOV_I1_I2[1].6
				;196				SDZ	a_DataCNT
094E	5798	sdz     A_DATACNT
				;197				JMP	DU_DataOUT
094F	6962	jmp     DU_DataOUT
				;198				
				;199				;JMP	DU_DataOUTParCheck
				;200		DU_DataOUTParCheck:
				;201				SZ	fg_DU
				DU_DataOUTParCheck:
0950	7C88	sz      A_DEMOV_I1_I2[1].1
				;202				SET	fg_ParityBit
0951	7188	set     A_DEMOV_I1_I2[1].3
				;203				
				;204				SZ	a_DataParityCNT.0
0952	7C0C	sz      A_DATAPARITYCNT.0
				;205				JMP	DU_DataOUTParCheckOd			;fg_ParityBit=0
0953	6955	jmp     DU_DataOUTParCheckOd
				;206		
				;207				JMP	DU_DataOUTParCheckEv			;fg_ParityBit=1
0954	6959	jmp     DU_DataOUTParCheckEv
				;208		DU_DataOUTParCheckOd:
				;209				SNZ	fg_ParityBit
				DU_DataOUTParCheckOd:
0955	7988	snz     A_DEMOV_I1_I2[1].3
				;210				JMP	DU_DataOUTParCheck0
0956	695D	jmp     DU_DataOUTParCheck0
				;211		
				;212				SET	fg_ParityErr
0957	7208	set     A_DEMOV_I1_I2[1].4
				;213				JMP	DU_DataOUTParCheck0
0958	695D	jmp     DU_DataOUTParCheck0
				;214		DU_DataOUTParCheckEv:
				;215				SZ	fg_ParityBit
				DU_DataOUTParCheckEv:
0959	7D88	sz      A_DEMOV_I1_I2[1].3
				;216				JMP	DU_DataOUTParCheck0
095A	695D	jmp     DU_DataOUTParCheck0
				;217		
				;218				SET	fg_ParityErr
095B	7208	set     A_DEMOV_I1_I2[1].4
				;219				JMP	DU_DataOUTParCheck0
095C	695D	jmp     DU_DataOUTParCheck0
				;220		DU_DataOUTParCheck0:
				;221				CLR WDT
				DU_DataOUTParCheck0:
095D	0001	clr     wdt
				;222				SET	fg_DU
095E	7088	set     A_DEMOV_I1_I2[1].1
				;223				CLR	a_DataParityCNT
095F	5F0C	clr     A_DATAPARITYCNT
				;224				CLR	fg_StopBitPre
0960	7788	clr     A_DEMOV_I1_I2[1].7
				;225				JMP	DU_DataLatchCheck1
0961	6974	jmp     DU_DataLatchCheck1
				;226		DU_DataOUT:
				;227				CLR WDT
				DU_DataOUT:
0962	0001	clr     wdt
				;228				SZ	fg_DU
0963	7C88	sz      A_DEMOV_I1_I2[1].1
				;229				JMP	DU_DataOUThigh
0964	6966	jmp     DU_DataOUThigh
				;230		
				;231				JMP	DU_DataOUTlow
0965	696B	jmp     DU_DataOUTlow
				;232		DU_DataOUThigh:
				;233				SET	a_DataOUTtemp.7
				DU_DataOUThigh:
0966	738B	set     A_DATAOUTTEMP.7
				;234				INC	a_DataParityCNT
0967	548C	inc     A_DATAPARITYCNT
				;235				MOV	A, 00BH
0968	0F0B	mov     a, BH
				;236				MOV	a_TimeOutCNT, A
0969	408D	mov     A_TIMEOUTCNT, a
				;237				JMP	DU_DataOUTRR			
096A	696F	jmp     DU_DataOUTRR
				;238		DU_DataOUTlow:
				;239				CLR	a_DataOUTtemp.7
				DU_DataOUTlow:
096B	778B	clr     A_DATAOUTTEMP.7
				;240	
				;241				SDZ	a_TimeOutCNT
096C	578D	sdz     A_TIMEOUTCNT
				;242				JMP	DU_DataOUTRR
096D	696F	jmp     DU_DataOUTRR
				;243	
				;244				JMP	DU_End
096E	69C9	jmp     DU_End
				;245		DU_DataOUTRR:				
				;246				MOV	A, a_DataCNT
				DU_DataOUTRR:
096F	4718	mov     a, A_DATACNT
				;247				XOR	A, 001H
0970	0C01	xor     a, 1H
				;248				SNZ	STATUS.2 				;;1=True
0971	390A	snz     Z
				;249				RR	a_DataOUTtemp
0972	598B	rr      A_DATAOUTTEMP
				;250	
				;251				SET	fg_DU
0973	7088	set     A_DEMOV_I1_I2[1].1
				;252				;JMP	DU_DataLatchCheck1
				;253		DU_DataLatchCheck1:					
				;254				CLR WDT
				DU_DataLatchCheck1:
0974	0001	clr     wdt
				;255		
				;256		;--------------------INT Capture & Time-------------------------
				;257		DU_TimerINT:
				;258				SET	fg_INT1
				DU_TimerINT:
0975	7302	set     A_PARPLLFL[1].6
				;259				;SET	fg_INT0
				;260				SET	fg_FlagDemo
0976	7282	set     A_PARPLLFL[1].5
				;261				CALL	INTCheck
0977	26D1	call    INTCheck
				;262				SNZ	fg_TimeOut
0978	7A02	snz     A_PARPLLFL[1].4
				;263				JMP	DU_End
0979	69C9	jmp     DU_End
				;264	
				;265				;SZ	fg_INT1
				;266		DU_INT_DEMO1:
				;267				SNZ	a_DemoV_I1_I2.0
				DU_INT_DEMO1:
097A	7807	snz     A_DEMOV_I1_I2.0
				;268				JMP	DU_INT_DEMO2
097B	697F	jmp     DU_INT_DEMO2
				;269				
				;270				SZ	fg_FlagDemo
097C	7E82	sz      A_PARPLLFL[1].5
				;271				JMP	DU_Out
097D	69B8	jmp     DU_Out
				;272	
				;273				JMP	DU_INT
097E	6981	jmp     DU_INT
				;274		DU_INT_DEMO2:
				;275				SZ	fg_INT1	;4
				DU_INT_DEMO2:
097F	7F02	sz      A_PARPLLFL[1].6
				;276				JMP	DU_Out
0980	69B8	jmp     DU_Out
				;277				;JMP	DU_INT					;enable when having DU_INT_DEMO3
				;278		
				;279		;DU_INT_DEMO3:
				;280		;		SNZ	a_DemoV_I1_I2.2
				;281		;		JMP	DU_INT_DEMO2
				;282		;		
				;283		;		SZ	fg_INT0	;4
				;284		;		JMP	DU_Out
				;285		;		;JMP	DU_INT
				;286		DU_INT:		
				;287				CLR	TM1C0.3					; TM1C0[3] (T1ON-bit) = 0 as TM1 OFF
				DU_INT:
0981	35C9	clr     T1ON
				;288	
				;289		DU_INT_1:
				;290				SET	fg_INT1
				DU_INT_1:
0982	7302	set     A_PARPLLFL[1].6
				;291				;SET	fg_INT0
				;292				SET	fg_FlagDemo
0983	7282	set     A_PARPLLFL[1].5
				;293				;------------------Preamble CNT 4bit----------------
				;294				CLR WDT
0984	0001	clr     wdt
				;295				SNZ	fg_Preamble				;;default=1
0985	7889	snz     A_DEMOV_I1_I2[2].1
				;296				JMP	DU_INTcheck0
0986	698A	jmp     DU_INTcheck0
				;297		
				;298				SDZ	a_Preamble4BitCNT			;;default=7
0987	5799	sdz     A_PREAMBLE4BITCNT
				;299				JMP	DU_DataLatch
0988	6935	jmp     DU_DataLatch
				;300	
				;301				CLR	fg_Preamble
0989	7489	clr     A_DEMOV_I1_I2[2].1
				;302		DU_INTcheck0:				
				;303				MOV	A, 002H
				DU_INTcheck0:
098A	0F02	mov     a, 2H
				;304				MOV	a_NoToggleCNT, A
098B	409B	mov     A_NOTOGGLECNT, a
				;305				SZ	fg_StartReci				;;default=1
098C	7E09	sz      A_DEMOV_I1_I2[2].4
				;306				JMP	DU_INTcheck01
098D	698F	jmp     DU_INTcheck01
				;307	
				;308				JMP	DU_INTcheck02
098E	6992	jmp     DU_INTcheck02
				;309		DU_INTcheck01:
				;310				SDZ	a_Preamble25BitCNT
				DU_INTcheck01:
098F	579A	sdz     A_PREAMBLE25BITCNT
				;311				JMP	DU_INTcheck02
0990	6992	jmp     DU_INTcheck02
				;312	
				;313				JMP	DU_End
0991	69C9	jmp     DU_End
				;314		DU_INTcheck02:
				;315				SZ	fg_StartBit				;;default=1
				DU_INTcheck02:
0992	7D08	sz      A_DEMOV_I1_I2[1].2
				;316				JMP	DU_INTcheck1
0993	6996	jmp     DU_INTcheck1
				;317	
				;318				CLR	fg_WaitDataOut
0994	7708	clr     A_DEMOV_I1_I2[1].6
				;319				CLR	fg_StartReci
0995	7609	clr     A_DEMOV_I1_I2[2].4
				;320		DU_INTcheck1:		
				;321				SZ	fg_StopBit				; default=1
				DU_INTcheck1:
0996	7E88	sz      A_DEMOV_I1_I2[1].5
				;322				JMP	DU_DataLatch
0997	6935	jmp     DU_DataLatch
				;323				;--------------------Data OUT-------------------------
				;324				SNZ	fg_DataFirst				; default=1
0998	7809	snz     A_DEMOV_I1_I2[2].0
				;325				JMP	DU_INTcheck2
0999	699E	jmp     DU_INTcheck2
				;326				
				;327				MOV	A, offset a_DataOUT
099A	0F8E	mov     a, 8EH
				;328				MOV	a_AddrDataOUT, A
099B	409E	mov     A_ADDRDATAOUT, a
				;329				MOV	MP0, A
099C	0081	mov     MP0, a
				;330				CLR	fg_DataFirst
099D	7409	clr     A_DEMOV_I1_I2[2].0
				;331		DU_INTcheck2:		
				;332				CLR WDT
				DU_INTcheck2:
099E	0001	clr     wdt
				;333				SZ	fg_DataByteCNTFull
099F	7E89	sz      A_DEMOV_I1_I2[2].5
				;334				JMP	DU_INTcheck3
09A0	69AB	jmp     DU_INTcheck3
				;335					
				;336				MOV	A, a_DataOUTtemp
09A1	470B	mov     a, A_DATAOUTTEMP
				;337				MOV	IAR0, A
09A2	0080	mov     [00H], a
				;338				INC	a_DataByteCNT
09A3	549C	inc     A_DATABYTECNT
				;339				MOV	A, a_DataByteCNT
09A4	471C	mov     a, A_DATABYTECNT
				;340				MOV	a_DataByteCNTtemp, A
09A5	409D	mov     A_DATABYTECNTTEMP, a
				;341				INC	MP0
09A6	1481	inc     MP0
				;342				MOV	A, a_DataByteCNT
09A7	471C	mov     a, A_DATABYTECNT
				;343				XOR	A, 00BH
09A8	0C0B	xor     a, BH
				;344				SZ	STATUS.2
09A9	3D0A	sz      Z
				;345				SET	fg_DataByteCNTFull
09AA	7289	set     A_DEMOV_I1_I2[2].5
				;346		DU_INTcheck3:	
				;347				SET	fg_DUDataStart
				DU_INTcheck3:
09AB	7008	set     A_DEMOV_I1_I2[1].0
				;348				SET	fg_StartBit
09AC	7108	set     A_DEMOV_I1_I2[1].2
				;349				SET	fg_StopBit
09AD	7288	set     A_DEMOV_I1_I2[1].5
				;350				SET	fg_StopBitPre
09AE	7388	set     A_DEMOV_I1_I2[1].7
				;351				CLR	fg_ParityBit
09AF	7588	clr     A_DEMOV_I1_I2[1].3
				;352				CLR	fg_ParityErr
09B0	7608	clr     A_DEMOV_I1_I2[1].4
				;353				CLR	a_DataParityCNT
09B1	5F0C	clr     A_DATAPARITYCNT
				;354				CLR	a_DataOUTtemp
09B2	5F0B	clr     A_DATAOUTTEMP
				;355				MOV	A, 00BH
09B3	0F0B	mov     a, BH
				;356				MOV	a_TimeOutCNT, A
09B4	408D	mov     A_TIMEOUTCNT, a
				;357				MOV	A, 00AH
09B5	0F0A	mov     a, AH
				;358				MOV	a_DataCNT, A
09B6	4098	mov     A_DATACNT, a
				;359				JMP	DU_DataLatch
09B7	6935	jmp     DU_DataLatch
				;360		DU_Out:		
				;361				CLR WDT
				DU_Out:
09B8	0001	clr     wdt
				;362		DU_Out_1:		
				;363				SZ	fg_Preamble
				DU_Out_1:
09B9	7C89	sz      A_DEMOV_I1_I2[2].1
				;364				JMP	DU_OutPre0
09BA	69BC	jmp     DU_OutPre0
				;365	
				;366				JMP	DU_OutPre1
09BB	69BD	jmp     DU_OutPre1
				;367		DU_OutPre0:		
				;368				JMP	DU_DataLatch
				DU_OutPre0:
09BC	6935	jmp     DU_DataLatch
				;369		DU_OutPre1:		
				;370				SDZ	a_NoToggleCNT
				DU_OutPre1:
09BD	579B	sdz     A_NOTOGGLECNT
				;371				JMP	DU_Out0
09BE	69C2	jmp     DU_Out0
				;372	      	
				;373				SZ	a_DataByteCNTtemp
09BF	509D	sz      A_DATABYTECNTTEMP
				;374				SET	fg_ChecksumBit				;Mark checksum stop-bit
09C0	7109	set     A_DEMOV_I1_I2[2].2
				;375	
				;376				JMP	DU_End
09C1	69C9	jmp     DU_End
				;377		DU_Out0:
				;378				CLR	fg_DU
				DU_Out0:
09C2	7488	clr     A_DEMOV_I1_I2[1].1
				;379				SZ	fg_StartBit				;;defualt=1
09C3	7D08	sz      A_DEMOV_I1_I2[1].2
				;380				JMP	DU_Out1
09C4	69C6	jmp     DU_Out1
				;381	
				;382				CLR	fg_WaitDataOut
09C5	7708	clr     A_DEMOV_I1_I2[1].6
				;383		DU_Out1:
				;384				CLR	fg_DUDataStart
				DU_Out1:
09C6	7408	clr     A_DEMOV_I1_I2[1].0
				;385				SZ	fg_StopBit				;;default=1
09C7	7E88	sz      A_DEMOV_I1_I2[1].5
				;386				JMP	DU_DataLatch
09C8	6935	jmp     DU_DataLatch
				;387		DU_End:
				;388				CLR WDT
				DU_End:
09C9	0001	clr     wdt
				;389				SET	fg_DUDataStart
09CA	7008	set     A_DEMOV_I1_I2[1].0
				;390				SET	fg_StartBit
09CB	7108	set     A_DEMOV_I1_I2[1].2
				;391				CLR	fg_ParityBit
09CC	7588	clr     A_DEMOV_I1_I2[1].3
				;392				CLR	fg_ParityErr
09CD	7608	clr     A_DEMOV_I1_I2[1].4
				;393				CLR	a_DataParityCNT
09CE	5F0C	clr     A_DATAPARITYCNT
				;394				SET	fg_StopBit
09CF	7288	set     A_DEMOV_I1_I2[1].5
				;395				SET	fg_StopBitPre
09D0	7388	set     A_DEMOV_I1_I2[1].7
				;396				CLR	a_DataOUTtemp
09D1	5F0B	clr     A_DATAOUTTEMP
				;397				CLR	a_DataOUTtemp.7
09D2	778B	clr     A_DATAOUTTEMP.7
				;398				SET	fg_WaitDataOut
09D3	7308	set     A_DEMOV_I1_I2[1].6
				;399				SET	fg_DU
09D4	7088	set     A_DEMOV_I1_I2[1].1
				;400				MOV	A, 002H
09D5	0F02	mov     a, 2H
				;401				MOV	a_NoToggleCNT, A
09D6	409B	mov     A_NOTOGGLECNT, a
				;402				MOV	A, 00BH
09D7	0F0B	mov     a, BH
				;403				MOV	a_TimeOutCNT, A
09D8	408D	mov     A_TIMEOUTCNT, a
				;404				MOV	A, 00AH
09D9	0F0A	mov     a, AH
				;405				MOV	a_DataCNT, A
09DA	4098	mov     A_DATACNT, a
				;406				SET	fg_DataFirst
09DB	7009	set     A_DEMOV_I1_I2[2].0
				;407				SET	fg_Preamble
09DC	7089	set     A_DEMOV_I1_I2[2].1
				;408				MOV	A, 007H
09DD	0F07	mov     a, 7H
				;409				MOV	a_Preamble4BitCNT, A
09DE	4099	mov     A_PREAMBLE4BITCNT, a
				;410				CLR	a_DataByteCNT
09DF	5F1C	clr     A_DATABYTECNT
				;411				MOV	A, 01DH
09E0	0F1D	mov     a, 1DH
				;412				MOV	a_Preamble25BitCNT, A
09E1	409A	mov     A_PREAMBLE25BITCNT, a
				;413				SET	fg_StartReci
09E2	7209	set     A_DEMOV_I1_I2[2].4
				;414				RET
09E3	0003	ret
				;415	
				;416	
				;417	
				;418	END
				;file D:\HOLTEK\C900\C960 Project\Chris負責彙整上網方案\WAS_C2006(HT66FW2230無線充電)\11_Tech_C2006\COD_C2006-A\Detection.asm
				;1	;*******************************************************************************************
				;2	;*****	                               History	                                       *****
				;3	;*******************************************************************************************
				;4	;V1.0 - WPC Qi Certification Source Code by Edward in HOLTEK Semiconductor Inc. on 2014/12/25
				;5	
				;6	
				;7	
				;8	;*******************************************************************************************
				;9	;*****	                           Including File	                               *****
				;10	;*******************************************************************************************
				;11	#INCLUDE 	HT66FW2230.inc
				;12	#INCLUDE	TxUserDEF2230v302.inc
				;13	
				;14	
				;15	;*******************************************************************************************
				;16	;*****	                        Function / Parameter Claim	                       *****
				;17	;*******************************************************************************************
				;18	PUBLIC		DetectVin
				;19	PUBLIC		ObjectDetection
				;20	PUBLIC		ObjectDetectLeave
				;21	PUBLIC		ObjDetLeaveIni
				;22	PUBLIC		ObjDetLeavePowe
				;23	PUBLIC		ObjDetLeaveDetect
				;24	PUBLIC		ObjDetLeaveCheck
				;25	
				;26	EXTERN		Sensoring10_8					:	near
				;27	EXTERN		PreCarry					:	near
				;28	EXTERN		PostCarry					:	near
				;29	EXTERN		ADCData						:	near
				;30	EXTERN		DelayTimer					:	near
				;31	EXTERN		Delay3						:	near
				;32	
				;33	EXTERN		fg_MutipleTimeHflagCTM				:	bit
				;34	EXTERN		a_MutipleTimeLCTM				:	byte
				;35	EXTERN		a_MutipleTimeHCTM				:	byte
				;36	EXTERN		a_data0						:	byte
				;37	EXTERN		a_data1				        	:	byte
				;38	EXTERN		a_data2						:	byte
				;39	EXTERN		a_data3						:	byte				
				;40	EXTERN		a_to1				        	:	byte
				;41	EXTERN		a_to2                                   	:	byte
				;42	EXTERN		a_to3                                   	:	byte
				;43	EXTERN		a_to4                           		:	byte
				;44	EXTERN		a_to5                           		:	byte
				;45	EXTERN		a_to7                                   	:	byte
				;46	EXTERN		a_temp1                                 	:	byte
				;47	EXTERN		fg_PSVin					:	bit
				;48	EXTERN		fg_RXCoilD					:	bit
				;49	EXTERN		fg_DetectVin					:	bit
				;50	EXTERN		fg_VinLow					:	bit
				;51	EXTERN		a_Carry						:	byte
				;52	
				;53	
				;54	;*******************************************************************************************
				;55	;*****	                            Program Body	                               *****
				;56	;*******************************************************************************************
				;57	Detection		.Section 	'code'
				;58	;========================================================
				;59	;Function : DetectVin
				;60	;Note     : Call Function Type for Obfject Detection
				;61	;input    : 
				;62	;output   : 
				;63	;setting  : (1) Setting WDTC reg. for Period Timing
				;64	;	  : (2) Setting c_IniDetectMutipleTimeH/L
				;65	;	  : (3) Setting OCP INT ON/OFF
				;66	;========================================================
				;67		DetectVin:
				;68				MOV	A, 003H					; set ADCR0 = 0000_0011 = 003h, AN3
				DetectVin:
				DETECTION:
09E4	0F03	mov     a, 3H
				;69				MOV	ADCR0, A				; ADCR0 @SPDM 2AH (POR=0110_0000, WDT Out=0110_0000)
09E5	00AA	mov     ADCR0, a
				;70				CALL	Sensoring10_8
09E6	640C	call    Sensoring10_8
				;71				SZ	fg_PSVin
09E7	7FD2	sz      A_LOOPITERATION[1].7
				;72				JMP	DetectVinSet1
09E8	69F3	jmp     DetectVinSet1
				;73	
				;74				;JMP	DetectVinSet0
				;75		DetectVinSet0:
				;76				MOV	A, c_IniVinMaxH
				DetectVinSet0:
09E9	0F0D	mov     a, DH
				;77				MOV	a_to2, A
09EA	40BC	mov     A_TO2, a
				;78				MOV	A, c_IniVinMaxL
09EB	0F75	mov     a, 75H
				;79				MOV	a_to1, A
09EC	40BB	mov     A_TO1, a
				;80	
				;81				MOV	A, c_IniVinMinH
09ED	0F0B	mov     a, BH
				;82				MOV	a_to5, A
09EE	40BF	mov     A_TO5, a
				;83				MOV	A, c_IniVinMinL
09EF	0F0F	mov     a, FH
				;84				MOV	a_to4, A
09F0	40BE	mov     A_TO4, a
				;85				CLR	a_to3.7
09F1	77BD	clr     A_TO3.7
				;86				JMP	PS_VinCheckmax
09F2	69FC	jmp     PS_VinCheckmax
				;87		DetectVinSet1:		
				;88				MOV	A, c_IniPTVinLowH
				DetectVinSet1:
09F3	0F0B	mov     a, BH
				;89				MOV	a_to2, A
09F4	40BC	mov     A_TO2, a
				;90				MOV	A, c_IniPTVinLowL
09F5	0FB0	mov     a, B0H
				;91				MOV	a_to1, A
09F6	40BB	mov     A_TO1, a
				;92	
				;93				MOV	A, c_IniPTVinMinH
09F7	0F0A	mov     a, AH
				;94				MOV	a_to5, A
09F8	40BF	mov     A_TO5, a
				;95				MOV	A, c_IniPTVinMinL
09F9	0F13	mov     a, 13H
				;96				MOV	a_to4, A
09FA	40BE	mov     A_TO4, a
				;97				CLR	a_to3.7
09FB	77BD	clr     A_TO3.7
				;98				;JMP	PS_VinCheckmax
				;99		PS_VinCheckmax:							; DetectVin max = 3D8h
				;100				CALL	PreCarry
				PS_VinCheckmax:
09FC	6490	call    PreCarry
				;101				MOV	A, a_to7				; Low Byte
09FD	4741	mov     a, A_TO7
				;102				SUB	A, a_to1
09FE	423B	sub     a, A_TO1
				;103				MOV	A, a_temp1				; High Byte
09FF	4744	mov     a, A_TEMP1
				;104				SBC	A, a_to2
0A00	523C	sbc     a, A_TO2
				;105				CALL	PostCarry
0A01	6493	call    PostCarry
				;106				SZ	a_Carry
0A02	50F8	sz      A_CARRY
				;107				JMP	PS_VinCheckmin				; < 
0A03	6A05	jmp     PS_VinCheckmin
				;108	
				;109				JMP	PS_LightDark				; >=
0A04	6A0F	jmp     PS_LightDark
				;110		PS_VinCheckmin:							; DetectVin min = 325h
				;111				CALL	PreCarry
				PS_VinCheckmin:
0A05	6490	call    PreCarry
				;112				SET	a_to3.7
0A06	73BD	set     A_TO3.7
				;113				MOV	A, a_to7                   		; Low Byte
0A07	4741	mov     a, A_TO7
				;114				SUB	A, a_to4
0A08	423E	sub     a, A_TO4
				;115				MOV	A, a_temp1                   		; High Byte
0A09	4744	mov     a, A_TEMP1
				;116				SBC	A, a_to5
0A0A	523F	sbc     a, A_TO5
				;117				CALL	PostCarry
0A0B	6493	call    PostCarry
				;118				SZ	a_Carry
0A0C	50F8	sz      A_CARRY
				;119				JMP	PS_LightDark				; < 
0A0D	6A0F	jmp     PS_LightDark
				;120	
				;121				JMP	DetectVinEnd				; >=
0A0E	6A18	jmp     DetectVinEnd
				;122		PS_LightDark:	
				;123				SZ	fg_PSVin
				PS_LightDark:
0A0F	7FD2	sz      A_LOOPITERATION[1].7
				;124				JMP	PS_LightDark1
0A10	6A13	jmp     PS_LightDark1
				;125				;JMP	PS_LightDark0
				;126		PS_LightDark0:
				;127				SET	fg_DetectVin
				PS_LightDark0:
0A11	7354	set     A_LOOPITERATION[3].6
				;128				RET
0A12	0003	ret
				;129		PS_LightDark1:
				;130				CLR	fg_VinLow
				PS_LightDark1:
0A13	77D4	clr     A_LOOPITERATION[3].7
				;131				SNZ	a_to3.7
0A14	7BBD	snz     A_TO3.7
				;132				RET
0A15	0003	ret
				;133	
				;134				SET	fg_VinLow
0A16	73D4	set     A_LOOPITERATION[3].7
				;135				RET
0A17	0003	ret
				;136		DetectVinEnd:
				;137				SZ	fg_PSVin
				DetectVinEnd:
0A18	7FD2	sz      A_LOOPITERATION[1].7
				;138				JMP	DetectVinEnd1
0A19	6A1C	jmp     DetectVinEnd1
				;139				CLR	fg_DetectVin
0A1A	7754	clr     A_LOOPITERATION[3].6
				;140				RET
0A1B	0003	ret
				;141		DetectVinEnd1:
				;142				SET	fg_VinLow
				DetectVinEnd1:
0A1C	73D4	set     A_LOOPITERATION[3].7
				;143				RET
0A1D	0003	ret
				;144	
				;145	
				;146	;========================================================
				;147	;Function : ObjectDetection
				;148	;Note     : Call Function Type for Obfject Detection
				;149	;input    : 
				;150	;output   : 
				;151	;setting  : (1) Setting WDTC reg. for Period Timing
				;152	;	    (2) Setting c_IniDetectMutipleTimeH/L
				;153	;	    (3) Setting OCP INT ON/OFF
				;154	;========================================================
				;155		ObjectDetection:
				;156				CLR WDT
				ObjectDetection:
0A1E	0001	clr     wdt
				;157	
				;158				MOV	A, 009H					; set ADCR0 = 0000_1001 = 009 ;;AN9 when OCP
0A1F	0F09	mov     a, 9H
				;159				MOV	ADCR0, A				; ADCR0 @SPDM 2AH (POR=0110_0000, WDT Out=0110_0000)
0A20	00AA	mov     ADCR0, a
				;160				SZ	fg_RXCoilD				;default=0
0A21	7E53	sz      A_LOOPITERATION[2].4
				;161				JMP	OD_ParaSetupRXD
0A22	6A29	jmp     OD_ParaSetupRXD
				;162	
				;163				;JMP	OD_ParaSetup
				;164		OD_ParaSetup:
				;165				CALL	ObjDetLeaveIni
				OD_ParaSetup:
0A23	625D	call    ObjDetLeaveIni
				;166				MOV	A, c_IniDetObjMinL
0A24	0F10	mov     a, 10H
				;167				MOV	a_data2, A
0A25	40B4	mov     A_DATA2, a
				;168				MOV	A, c_IniDetObjMinH
0A26	0F01	mov     a, 1H
				;169				MOV	a_data3, A
0A27	40B5	mov     A_DATA3, a
				;170				JMP	OD_Power
0A28	6A31	jmp     OD_Power
				;171		OD_ParaSetupRXD:
				;172				MOV	A, c_IniDetectRXDMutipleTimeL
				OD_ParaSetupRXD:
0A29	0F50	mov     a, 50H
				;173				MOV	a_data0, A
0A2A	40B2	mov     A_DATA0, a
				;174				MOV	A, c_IniDetectRXDMutipleTimeH
0A2B	0F00	mov     a, 0H
				;175				MOV	a_data1, A
0A2C	40B3	mov     A_DATA1, a
				;176				MOV	A, c_IniDetObjRXDMinL
0A2D	0F50	mov     a, 50H
				;177				MOV	a_data2, A
0A2E	40B4	mov     A_DATA2, a
				;178				MOV	A, c_IniDetObjRXDMinH
0A2F	0F00	mov     a, 0H
				;179				MOV	a_data3, A
0A30	40B5	mov     A_DATA3, a
				;180		OD_Power:
				;181				CALL	ObjDetLeavePowe
				OD_Power:
0A31	6262	call    ObjDetLeavePowe
				;182				SZ	fg_RXCoilD				;default=0
0A32	7E53	sz      A_LOOPITERATION[2].4
				;183				JMP	OD_ADdetect
0A33	6A37	jmp     OD_ADdetect
				;184	
				;185				;JMP	OD_Detection				
				;186		OD_Detection:
				;187				CALL	ObjDetLeaveDetect
				OD_Detection:
0A34	626C	call    ObjDetLeaveDetect
				;188				SDZ 	ACC
				L0A35:
0A35	1785	sdz     ACC
				;189				JMP 	$-1
0A36	6A35	jmp     L0A35
				;190		OD_ADdetect:
				;191				CALL	ADCData
				OD_ADdetect:
0A37	64A0	call    ADCData
				;192				MOV	A, 050H
0A38	0F50	mov     a, 50H
				;193				MOV	PWMC, A
0A39	00E3	mov     PWMC, a
				;194		OD_DetectCheck:							;DetectObject min = 027h
				;195				CALL	ObjDetLeaveCheck                	
				OD_DetectCheck:
0A3A	6271	call    ObjDetLeaveCheck
				;196				SZ	a_Carry                         	
0A3B	50F8	sz      A_CARRY
				;197				JMP	OD_Repeat				; < 
0A3C	6A3E	jmp     OD_Repeat
				;198	                                                                	
				;199				JMP	ObjectDetectionEnd			; >=
0A3D	6A42	jmp     ObjectDetectionEnd
				;200		OD_Repeat:                                              	
				;201				SET	INTC0.5                         	
				OD_Repeat:
0A3E	3290	set     DEMF
				;202				CLR	CKGEN.7					; 1 as VCO OFF
0A3F	37E0	clr     PLLEN
				;203				CLR	INTC0.0					; 0 as EMI OFF
0A40	3410	clr     EMI
				;204				HALT                                    	
0A41	0002	halt
				;205		ObjectDetectionEnd:						
				;206				MOV	A, 0C8H					
				ObjectDetectionEnd:
0A42	0FC8	mov     a, C8H
				;207				MOV	a_MutipleTimeLCTM, A			
0A43	4083	mov     A_MUTIPLETIMELCTM, a
				;208				MOV	A, 032H
0A44	0F32	mov     a, 32H
				;209				MOV	a_MutipleTimeHCTM, A
0A45	4084	mov     A_MUTIPLETIMEHCTM, a
				;210				SZ	a_MutipleTimeHCTM
0A46	5084	sz      A_MUTIPLETIMEHCTM
				;211				SET	fg_MutipleTimeHflagCTM
0A47	7082	set     A_PARPLLFL[1].1
				;212	                       	
				;213				CALL	DelayTimer
0A48	239A	call    DelayTimer
				;214				RET
0A49	0003	ret
				;215	
				;216	
				;217	;========================================================
				;218	;Function : ObjectDetectLeave
				;219	;Note     : Call Function Type for Obfject Detection
				;220	;input    :
				;221	;output   :
				;222	;setting  :
				;223	;========================================================
				;224		ObjectDetectLeave:
				;225				CLR 	WDT
				ObjectDetectLeave:
0A4A	0001	clr     wdt
				;226				MOV	A, 009H					; set ADCR0 = 0000_1001 = 009 ;;AN9 when OCP
0A4B	0F09	mov     a, 9H
				;227				MOV	ADCR0, A				; ADCR0 @SPDM 2AH (POR=0110_0000, WDT Out=0110_0000)
0A4C	00AA	mov     ADCR0, a
				;228				CALL	ObjDetLeaveIni
0A4D	625D	call    ObjDetLeaveIni
				;229				MOV	A, c_IniDetObjLeaMaxL
0A4E	0FA0	mov     a, A0H
				;230				MOV	a_data2, A
0A4F	40B4	mov     A_DATA2, a
				;231				MOV	A, c_IniDetObjLeaMaxH
0A50	0F00	mov     a, 0H
				;232				MOV	a_data3, A
0A51	40B5	mov     A_DATA3, a
				;233				CALL	ObjDetLeavePowe
0A52	6262	call    ObjDetLeavePowe
				;234				CALL	ObjDetLeaveDetect
0A53	626C	call    ObjDetLeaveDetect
				;235				SDZ 	ACC
				L0A54:
0A54	1785	sdz     ACC
				;236				JMP 	$-1
0A55	6A54	jmp     L0A54
				;237				
				;238				CALL	ADCData
0A56	64A0	call    ADCData
				;239				CALL	ObjDetLeaveCheck
0A57	6271	call    ObjDetLeaveCheck
				;240				SZ	a_Carry
0A58	50F8	sz      A_CARRY
				;241				RET						; < 
0A59	0003	ret
				;242			
				;243				CALL	Delay3					; >=
0A5A	2392	call    Delay3
				;244				CALL	Delay3
0A5B	2392	call    Delay3
				;245				JMP	ObjectDetectLeave
0A5C	6A4A	jmp     ObjectDetectLeave
				;246			
				;247	
				;248	;========================================================
				;249	;Function : ObjDetLeaveIni
				;250	;Note     : Call Function Type for Obfject Detection
				;251	;input    : c_IniDetectMutipleTimeL
				;252	;         : c_IniDetectMutipleTimeH
				;253	;output   : a_data0
				;254	;    	  : a_data1
				;255	;Presetting:
				;256	;========================================================
				;257		ObjDetLeaveIni:
				;258				MOV	A, c_IniDetectMutipleTimeL
				ObjDetLeaveIni:
0A5D	0F07	mov     a, 7H
				;259				MOV	a_data0, A
0A5E	40B2	mov     A_DATA0, a
				;260				MOV	A, c_IniDetectMutipleTimeH
0A5F	0F00	mov     a, 0H
				;261				MOV	a_data1, A
0A60	40B3	mov     A_DATA1, a
				;262				RET
0A61	0003	ret
				;263	
				;264	;========================================================
				;265	;Function : ObjDetLeavePowe
				;266	;Note     : Call Function Type for Obfject Detection
				;267	;input    : a_data0
				;268	;	  : a_data1
				;269	;output   : 
				;270	;setting  :
				;271	;========================================================
				;272		ObjDetLeavePowe :
				;273				MOV	A, a_data0
				ObjDetLeavePowe:
0A62	4732	mov     a, A_DATA0
				;274				MOV	a_MutipleTimeLCTM, A
0A63	4083	mov     A_MUTIPLETIMELCTM, a
				;275				MOV	A, a_data1
0A64	4733	mov     a, A_DATA1
				;276				MOV	a_MutipleTimeHCTM, A
0A65	4084	mov     A_MUTIPLETIMEHCTM, a
				;277				SZ	a_MutipleTimeHCTM
0A66	5084	sz      A_MUTIPLETIMEHCTM
				;278				SET	fg_MutipleTimeHflagCTM
0A67	7082	set     A_PARPLLFL[1].1
				;279	        	
				;280				MOV	A, 053H					;  PWM output for PWM0 and PWM0B,  需要修正判讀位置?????????????
0A68	0F53	mov     a, 53H
				;281				MOV	PWMC, A
0A69	00E3	mov     PWMC, a
				;282				CALL	DelayTimer
0A6A	239A	call    DelayTimer
				;283				RET
0A6B	0003	ret
				;284			
				;285			
				;286	;========================================================
				;287	;Function : ObjDetLeaveDetect
				;288	;Note     : Call Function Type for Obfject Detection
				;289	;input    : 
				;290	;output   : 
				;291	;setting  :
				;292	;========================================================
				;293		ObjDetLeaveDetect:
				;294				CLR WDT
				ObjDetLeaveDetect:
0A6C	0001	clr     wdt
				;295				MOV	A, 050H
0A6D	0F50	mov     a, 50H
				;296				MOV	PWMC, A
0A6E	00E3	mov     PWMC, a
				;297				MOV	A, 00AH					;;delay to detect coil
0A6F	0F0A	mov     a, AH
				;298				RET
0A70	0003	ret
				;299			
				;300	;========================================================
				;301	;Function : ObjDetLeaveCheck
				;302	;Note     : Call Function Type for Obfject Detection
				;303	;input    : 
				;304	;output   : 
				;305	;setting  :
				;306	;========================================================
				;307		ObjDetLeaveCheck:
				;308				CALL	PreCarry
				ObjDetLeaveCheck:
0A71	6490	call    PreCarry
				;309				MOV	A, ADRL   				; Low Byte
0A72	0728	mov     a, ADRL
				;310				SUB	A, a_data2
0A73	4234	sub     a, A_DATA2
				;311				MOV	A, ADRH					; High Byte
0A74	0729	mov     a, ADRH
				;312				SBC	A, a_data3
0A75	5235	sbc     a, A_DATA3
				;313				CALL	PostCarry
0A76	6493	call    PostCarry
				;314				RET
0A77	0003	ret
				;315			
				;316	
				;317	
				;318	END
				;file D:\HOLTEK\C900\C960 Project\Chris負責彙整上網方案\WAS_C2006(HT66FW2230無線充電)\11_Tech_C2006\COD_C2006-A\Decode.asm
				;1	;*******************************************************************************************
				;2	;*****	                               History	                                       *****
				;3	;*******************************************************************************************
				;4	;V1.0 - WPC Qi Certification Source Code by Edward in HOLTEK Semiconductor Inc. on 2014/12/25
				;5	
				;6	
				;7	
				;8	;*******************************************************************************************
				;9	;*****	                           Including File	                               *****
				;10	;*******************************************************************************************
				;11	#INCLUDE 	HT66FW2230.inc
				;12	#INCLUDE	TxUserDEF2230v302.inc
				;13	
				;14	
				;15	;*******************************************************************************************
				;16	;*****	                        Function / Parameter Claim	                       *****
				;17	;*******************************************************************************************
				;18	PUBLIC		PT_DecodeCommand
				;19	PUBLIC		EndPowCMD0x02Decode
				;20	PUBLIC		ConErrCMD0x03Decode
				;21	PUBLIC		RecPowCMD0x04Decode
				;22	PUBLIC		PowContlHoldCMD0x06Decode
				;23	PUBLIC		ConfigCMD0x51Decode
				;24	
				;25	EXTERN		FOD_TempertureSensor62				:	near
				;26	EXTERN		FOD_TempTime					:	near
				;27	EXTERN		PreCarry					:	near
				;28	EXTERN		PostCarry					:	near
				;29	EXTERN		FOD_ReceivePowCheck				:	near
				;30	EXTERN		FOD_SenPriCoilCurrWay65Double			:	near
				;31	EXTERN		FOD_FObjectDetect2				:	near
				;32	
				;33	EXTERN		a_DataHeader					:	byte
				;34	EXTERN		a_DataMessageB0					:	byte
				;35	EXTERN		a_to7                                   	:	byte
				;36	EXTERN		a_temp1                                 	:	byte
				;37	EXTERN		fg_0x02PowDownChargeComplete    		:	bit
				;38	EXTERN		fg_0x02PowDownReconfigure       		:	bit
				;39	EXTERN		fg_0x02PowDownNoResponse        		:	bit
				;40	EXTERN		fg_EndPowDown					:	bit
				;41	EXTERN		fg_CEinput					:	bit
				;42	EXTERN		fg_0x04ReceiPowCNTHflag				:	bit
				;43	EXTERN		fg_PCH0x06Abnor					:	bit
				;44	EXTERN		fg_RPNoStable					:	bit
				;45	EXTERN		fg_VinLow					:	bit
				;46	EXTERN		fg_FODEfficLow					:	bit
				;47	EXTERN		fg_ReCordTemp					:	bit
				;48	EXTERN		fg_CalTempTimeHigh				:	bit
				;49	EXTERN		fg_PowOver5wLEDsw				:	bit
				;50	EXTERN          fg_RxTI						:	bit
				;51	EXTERN		a_CSP0x05_B0					:	byte
				;52	EXTERN		a_PCHO0x06_B0					:	byte
				;53	EXTERN		a_Config0x51_B0					:	byte
				;54	EXTERN		a_0x03ContlErr			        	:	byte
				;55	EXTERN		a_0x04ReceivedPow				:	byte
				;56	EXTERN		a_0x06TdelayML			        	:	byte
				;57	EXTERN		a_0x06TdelayMH					:	byte
				;58	EXTERN		a_StatusEndPower				:	byte
				;59	EXTERN		a_0x51PowMax					:	byte
				;60	EXTERN		a_0x04ReceiPowCNTH				:	byte
				;61	EXTERN		a_0x04ReceiPowCNTL		        	:	byte
				;62	EXTERN		a_Carry						:	byte
				;63	EXTERN		a_r_RPowCNT					:	byte
				;64	EXTERN		a_TempH						:	byte
				;65	EXTERN		a_TempL						:	byte
				;66	
				;67	
				;68	;*******************************************************************************************
				;69	;*****	                            Program Body	                               *****
				;70	;*******************************************************************************************
				;71	Decode		.Section 	'code'
				;72	;========================================================
				;73	;Function : PT_DecodeCommand
				;74	;Note     : Call Function Type for Decode Command 
				;75	;input 	  : (1) a_DataHeader
				;76	;	    (2) a_DataMessageB0
				;77	;output   : (1) fg_EndPowDown
				;78	;	    (2) a_CSP0x05_B0
				;79	;	    (3) fg_CEinput
				;80	;========================================================
				;81		PT_DecodeCommand:
				;82				SNZ	fg_VinLow
				PT_DecodeCommand:
				DECODE:
0A78	7BD4	snz     A_LOOPITERATION[3].7
				;83				JMP	PT_EPTP0x02
0A79	6A81	jmp     PT_EPTP0x02
				;84				
				;85		PT_PowOver5wLEDstart:	
				;86				SNZ	fg_PowOver5wLEDsw
				PT_PowOver5wLEDstart:
0A7A	7856	snz     A_LOOPITERATION[5].0
				;87				JMP	PT_PowOver5wLEDoff
0A7B	6A7F	jmp     PT_PowOver5wLEDoff
				;88				;JMP	PT_PowOver5wLEDon
				;89		PT_PowOver5wLEDon:
				;90				SET	PB.3					;;Red LED
				PT_PowOver5wLEDon:
0A7C	319A	set     PB3
				;91				CLR	fg_PowOver5wLEDsw
0A7D	7456	clr     A_LOOPITERATION[5].0
				;92				JMP	PT_EPTP0x02
0A7E	6A81	jmp     PT_EPTP0x02
				;93		PT_PowOver5wLEDoff:	
				;94				CLR	PB.3					;;Red LED
				PT_PowOver5wLEDoff:
0A7F	359A	clr     PB3
				;95				SET	fg_PowOver5wLEDsw
0A80	7056	set     A_LOOPITERATION[5].0
				;96				;JMP	PT_EPTP0x02
				;97		PT_EPTP0x02:
				;98				SNZ	fg_VinLow
				PT_EPTP0x02:
0A81	7BD4	snz     A_LOOPITERATION[3].7
				;99				SET	PB.3					;;Red LED
0A82	319A	set     PB3
				;100	
				;101				MOV	A, a_DataHeader
0A83	4721	mov     a, A_DATAHEADER
				;102				XOR	A, 002H
0A84	0C02	xor     a, 2H
				;103				SNZ	STATUS.2
0A85	390A	snz     Z
				;104				JMP	PT_CEP0x03
0A86	6A8A	jmp     PT_CEP0x03
				;105			
				;106				CALL	EndPowCMD0x02Decode
0A87	62E7	call    EndPowCMD0x02Decode
				;107				CLR	fg_CEinput
0A88	76D2	clr     A_LOOPITERATION[1].5
				;108				JMP	PT_DeComEnd
0A89	6AE5	jmp     PT_DeComEnd
				;109		PT_CEP0x03:
				;110				MOV	A, a_DataHeader
				PT_CEP0x03:
0A8A	4721	mov     a, A_DATAHEADER
				;111				XOR	A, 003H
0A8B	0C03	xor     a, 3H
				;112				SNZ	STATUS.2
0A8C	390A	snz     Z
				;113				JMP	PT_RPP0x04
0A8D	6A91	jmp     PT_RPP0x04
				;114			
				;115				CALL	ConErrCMD0x03Decode
0A8E	6320	call    ConErrCMD0x03Decode
				;116				SET	fg_CEinput
0A8F	72D2	set     A_LOOPITERATION[1].5
				;117				JMP	PT_DeComEnd
0A90	6AE5	jmp     PT_DeComEnd
				;118		PT_RPP0x04:
				;119				MOV	A, a_DataHeader
				PT_RPP0x04:
0A91	4721	mov     a, A_DATAHEADER
				;120				XOR	A, 004H
0A92	0C04	xor     a, 4H
				;121				SNZ	STATUS.2
0A93	390A	snz     Z
				;122				JMP	PT_CSP0x05
0A94	6AB4	jmp     PT_CSP0x05
				;123			
				;124				CLR	fg_CEinput
0A95	76D2	clr     A_LOOPITERATION[1].5
				;125				CALL	RecPowCMD0x04Decode
0A96	6324	call    RecPowCMD0x04Decode
				;126				;;;~~~ FOD Temp Alarm function~~~
				;127				CALL	FOD_TempertureSensor62			;; d50mV=62H, d100mV=C4H, d150mV=127H
0A97	6709	call    L0F09
				;128				SZ	fg_ReCordTemp
0A98	7F55	sz      A_LOOPITERATION[4].6
				;129				JMP	PT_RPP0x04_CalTemp
0A99	6A9B	jmp     PT_RPP0x04_CalTemp
				;130				
				;131				CALL	FOD_TempTime
0A9A	66E3	call    L0EE3
				;132		PT_RPP0x04_CalTemp:
				;133				SDZ	a_r_RPowCNT
				PT_RPP0x04_CalTemp:
0A9B	57FA	sdz     A_R_RPOWCNT
				;134				JMP	PT_RPP0x04_NoFOD
0A9C	6AB3	jmp     PT_RPP0x04_NoFOD
				;135				
				;136				MOV	A, 008H
0A9D	0F08	mov     a, 8H
				;137				MOV	a_r_RPowCNT, A
0A9E	40FA	mov     A_R_RPOWCNT, a
				;138				CALL	PreCarry
0A9F	6490	call    PreCarry
				;139				MOV	A, a_to7
0AA0	4741	mov     a, A_TO7
				;140				SUB	A, a_TempL	
0AA1	427C	sub     a, A_TEMPL
				;141				MOV	A, a_temp1
0AA2	4744	mov     a, A_TEMP1
				;142				SBC	A, a_TempH	
0AA3	527B	sbc     a, A_TEMPH
				;143				CALL	PostCarry
0AA4	6493	call    PostCarry
				;144				SZ	a_Carry
0AA5	50F8	sz      A_CARRY
				;145				JMP	PT_RPP0x04a				; < 
0AA6	6AA8	jmp     PT_RPP0x04a
				;146	
				;147				SET	fg_CalTempTimeHigh			; >=
0AA7	73D5	set     A_LOOPITERATION[4].7
				;148		PT_RPP0x04a:
				;149				CALL	FOD_TempTime
				PT_RPP0x04a:
0AA8	66E3	call    L0EE3
				;150				SZ	a_0x04ReceivedPow
0AA9	50ED	sz      A_0X04RECEIVEDPOW
				;151				JMP	PT_RPP0x04_FOD
0AAA	6AAC	jmp     PT_RPP0x04_FOD
				;152	
				;153				JMP	PT_RPP0x04_NoFOD
0AAB	6AB3	jmp     PT_RPP0x04_NoFOD
				;154		PT_RPP0x04_FOD:
				;155				CALL	FOD_ReceivePowCheck
				PT_RPP0x04_FOD:
0AAC	66EB	call    L0EEB
				;156				SZ	fg_RPNoStable				;fg_RPNoStable =1, No stable then no FOD 
0AAD	7D53	sz      A_LOOPITERATION[2].2
				;157				JMP	PT_RPP0x04_NoFOD
0AAE	6AB3	jmp     PT_RPP0x04_NoFOD
				;158				
				;159				CALL	FOD_SenPriCoilCurrWay65Double
0AAF	672C	call    L0F2C
				;160				SZ	fg_FODEfficLow
0AB0	7ED5	sz      A_LOOPITERATION[4].5
				;161				JMP	PT_RPP0x04_NoFOD
0AB1	6AB3	jmp     PT_RPP0x04_NoFOD
				;162	
				;163				CALL	FOD_FObjectDetect2
0AB2	676B	call    L0F6B
				;164		PT_RPP0x04_NoFOD:
				;165				JMP	PT_DeComEnd
				PT_RPP0x04_NoFOD:
0AB3	6AE5	jmp     PT_DeComEnd
				;166		PT_CSP0x05:
				;167				MOV	A, a_DataHeader
				PT_CSP0x05:
0AB4	4721	mov     a, A_DATAHEADER
				;168				XOR	A, 005H
0AB5	0C05	xor     a, 5H
				;169				SNZ	STATUS.2
0AB6	390A	snz     Z
				;170				JMP	PT_Unknown
0AB7	6ABC	jmp     PT_Unknown
				;171				
				;172				MOV	A, a_DataMessageB0
0AB8	4722	mov     a, A_DATAMESSAGEB0
				;173				MOV	a_CSP0x05_B0, A
0AB9	40D8	mov     A_CSP0X05_B0, a
				;174				CLR	fg_CEinput
0ABA	76D2	clr     A_LOOPITERATION[1].5
				;175				JMP	PT_DeComEnd
0ABB	6AE5	jmp     PT_DeComEnd
				;176		PT_Unknown:
				;177				CLR	fg_CEinput
				PT_Unknown:
0ABC	76D2	clr     A_LOOPITERATION[1].5
				;178				MOV	A, a_DataHeader
0ABD	4721	mov     a, A_DATAHEADER
				;179				XOR	A, 001H
0ABE	0C01	xor     a, 1H
				;180				SNZ	STATUS.2
0ABF	390A	snz     Z
				;181				JMP	PT_Unknown1
0AC0	6AC4	jmp     PT_Unknown1
				;182				
				;183				SNZ	fg_RxTI
0AC1	79D6	snz     A_LOOPITERATION[5].3
				;184				SET	fg_EndPowDown
0AC2	7252	set     A_LOOPITERATION[1].4
				;185	
				;186				JMP	PT_DeComEnd
0AC3	6AE5	jmp     PT_DeComEnd
				;187		PT_Unknown1:
				;188				CLR	fg_CEinput
				PT_Unknown1:
0AC4	76D2	clr     A_LOOPITERATION[1].5
				;189				MOV	A, a_DataHeader
0AC5	4721	mov     a, A_DATAHEADER
				;190				XOR	A, 006H
0AC6	0C06	xor     a, 6H
				;191				SNZ	STATUS.2
0AC7	390A	snz     Z
				;192				JMP	PT_Unknown2
0AC8	6ACC	jmp     PT_Unknown2
				;193				
				;194				SNZ	fg_RxTI
0AC9	79D6	snz     A_LOOPITERATION[5].3
				;195				SET	fg_EndPowDown
0ACA	7252	set     A_LOOPITERATION[1].4
				;196	
				;197				JMP	PT_DeComEnd
0ACB	6AE5	jmp     PT_DeComEnd
				;198		PT_Unknown2:
				;199				CLR	fg_CEinput
				PT_Unknown2:
0ACC	76D2	clr     A_LOOPITERATION[1].5
				;200				MOV	A, a_DataHeader
0ACD	4721	mov     a, A_DATAHEADER
				;201				XOR	A, 051H
0ACE	0C51	xor     a, 51H
				;202				SNZ	STATUS.2
0ACF	390A	snz     Z
				;203				JMP	PT_Unknown3
0AD0	6AD4	jmp     PT_Unknown3
				;204	
				;205				SNZ	fg_RxTI
0AD1	79D6	snz     A_LOOPITERATION[5].3
				;206				SET	fg_EndPowDown
0AD2	7252	set     A_LOOPITERATION[1].4
				;207	
				;208				JMP	PT_DeComEnd
0AD3	6AE5	jmp     PT_DeComEnd
				;209		PT_Unknown3:
				;210				CLR	fg_CEinput
				PT_Unknown3:
0AD4	76D2	clr     A_LOOPITERATION[1].5
				;211				MOV	A, a_DataHeader
0AD5	4721	mov     a, A_DATAHEADER
				;212				XOR	A, 071H
0AD6	0C71	xor     a, 71H
				;213				SNZ	STATUS.2
0AD7	390A	snz     Z
				;214				JMP	PT_Unknown4
0AD8	6ADC	jmp     PT_Unknown4
				;215	
				;216				SNZ	fg_RxTI
0AD9	79D6	snz     A_LOOPITERATION[5].3
				;217				SET	fg_EndPowDown
0ADA	7252	set     A_LOOPITERATION[1].4
				;218	
				;219				JMP	PT_DeComEnd
0ADB	6AE5	jmp     PT_DeComEnd
				;220		PT_Unknown4:
				;221				CLR	fg_CEinput
				PT_Unknown4:
0ADC	76D2	clr     A_LOOPITERATION[1].5
				;222				MOV	A, a_DataHeader
0ADD	4721	mov     a, A_DATAHEADER
				;223				XOR	A, 081H
0ADE	0C81	xor     a, 81H
				;224				SNZ	STATUS.2
0ADF	390A	snz     Z
				;225				JMP	PT_UnknownOther
0AE0	6AE4	jmp     PT_UnknownOther
				;226	
				;227				SNZ	fg_RxTI
0AE1	79D6	snz     A_LOOPITERATION[5].3
				;228				SET	fg_EndPowDown
0AE2	7252	set     A_LOOPITERATION[1].4
				;229	
				;230				JMP	PT_DeComEnd
0AE3	6AE5	jmp     PT_DeComEnd
				;231		PT_UnknownOther:
				;232				CLR	fg_CEinput
				PT_UnknownOther:
0AE4	76D2	clr     A_LOOPITERATION[1].5
				;233		PT_DeComEnd:
				;234				CLR 	WDT
				PT_DeComEnd:
0AE5	0001	clr     wdt
				;235				RET
0AE6	0003	ret
				;236	
				;237	
				;238	;========================================================
				;239	;Function : EndPowCMD0x02Decode
				;240	;Note     : Call Function Type for Data-Decode of End Power(0x02)
				;241	;input    : a_DataMessageB0(a_EPTP0x02_B0)
				;242	;output   : 
				;243	;	  : fg_0x02PowDownChargeComplete [1= true]
				;244	;	  : fg_0x02PowDownReconfigure [1= true]
				;245	;	  : fg_0x02PowDownNoResponse [1= true]
				;246	;========================================================
				;247		EndPowCMD0x02Decode:
				;248				CLR 	WDT
				EndPowCMD0x02Decode:
0AE7	0001	clr     wdt
				;249				SZ	a_DataMessageB0
0AE8	50A2	sz      A_DATAMESSAGEB0
				;250				JMP	EndPowerUnit01
0AE9	6AEC	jmp     EndPowerUnit01
				;251	
				;252				SET	fg_EndPowDown
0AEA	7252	set     A_LOOPITERATION[1].4
				;253				JMP	EndPowerUnitEnd
0AEB	6B1E	jmp     EndPowerUnitEnd
				;254		EndPowerUnit01:		
				;255	
				;256				MOV	A, a_DataMessageB0
				EndPowerUnit01:
0AEC	4722	mov     a, A_DATAMESSAGEB0
				;257				XOR	A, 001
0AED	0C01	xor     a, 1H
				;258				SNZ	STATUS.2
0AEE	390A	snz     Z
				;259				JMP	EndPowerUnit02
0AEF	6AF3	jmp     EndPowerUnit02
				;260	
				;261				SET	fg_0x02PowDownChargeComplete
0AF0	71C6	set     A_TEMP0[1].3
				;262				SET	fg_EndPowDown
0AF1	7252	set     A_LOOPITERATION[1].4
				;263				JMP	EndPowerUnitEnd
0AF2	6B1E	jmp     EndPowerUnitEnd
				;264		EndPowerUnit02:		
				;265				MOV	A, a_DataMessageB0
				EndPowerUnit02:
0AF3	4722	mov     a, A_DATAMESSAGEB0
				;266				XOR	A, 002
0AF4	0C02	xor     a, 2H
				;267				SNZ	STATUS.2
0AF5	390A	snz     Z
				;268				JMP	EndPowerUnit03
0AF6	6AF9	jmp     EndPowerUnit03
				;269	
				;270				SET	fg_EndPowDown
0AF7	7252	set     A_LOOPITERATION[1].4
				;271				JMP	EndPowerUnitEnd
0AF8	6B1E	jmp     EndPowerUnitEnd
				;272		EndPowerUnit03:		
				;273				MOV	A, a_DataMessageB0
				EndPowerUnit03:
0AF9	4722	mov     a, A_DATAMESSAGEB0
				;274				XOR	A, 003
0AFA	0C03	xor     a, 3H
				;275				SNZ	STATUS.2
0AFB	390A	snz     Z
				;276				JMP	EndPowerUnit04
0AFC	6AFF	jmp     EndPowerUnit04
				;277	
				;278				SET	fg_EndPowDown
0AFD	7252	set     A_LOOPITERATION[1].4
				;279				JMP	EndPowerUnitEnd
0AFE	6B1E	jmp     EndPowerUnitEnd
				;280		EndPowerUnit04:		
				;281				MOV	A, a_DataMessageB0
				EndPowerUnit04:
0AFF	4722	mov     a, A_DATAMESSAGEB0
				;282				XOR	A, 004
0B00	0C04	xor     a, 4H
				;283				SNZ	STATUS.2
0B01	390A	snz     Z
				;284				JMP	EndPowerUnit05
0B02	6B05	jmp     EndPowerUnit05
				;285	
				;286				SET	fg_EndPowDown
0B03	7252	set     A_LOOPITERATION[1].4
				;287				JMP	EndPowerUnitEnd
0B04	6B1E	jmp     EndPowerUnitEnd
				;288		EndPowerUnit05:		
				;289				MOV	A, a_DataMessageB0
				EndPowerUnit05:
0B05	4722	mov     a, A_DATAMESSAGEB0
				;290				XOR	A, 005
0B06	0C05	xor     a, 5H
				;291				SNZ	STATUS.2
0B07	390A	snz     Z
				;292				JMP	EndPowerUnit06
0B08	6B0B	jmp     EndPowerUnit06
				;293	
				;294				SET	fg_EndPowDown
0B09	7252	set     A_LOOPITERATION[1].4
				;295				JMP	EndPowerUnitEnd
0B0A	6B1E	jmp     EndPowerUnitEnd
				;296		EndPowerUnit06:		
				;297				MOV	A, a_DataMessageB0
				EndPowerUnit06:
0B0B	4722	mov     a, A_DATAMESSAGEB0
				;298				XOR	A, 006
0B0C	0C06	xor     a, 6H
				;299				SNZ	STATUS.2
0B0D	390A	snz     Z
				;300				JMP	EndPowerUnit07
0B0E	6B11	jmp     EndPowerUnit07
				;301	
				;302				SET	fg_EndPowDown
0B0F	7252	set     A_LOOPITERATION[1].4
				;303				JMP	EndPowerUnitEnd
0B10	6B1E	jmp     EndPowerUnitEnd
				;304		EndPowerUnit07:		
				;305				MOV	A, a_DataMessageB0
				EndPowerUnit07:
0B11	4722	mov     a, A_DATAMESSAGEB0
				;306				XOR	A, 007
0B12	0C07	xor     a, 7H
				;307				SNZ	STATUS.2
0B13	390A	snz     Z
				;308				JMP	EndPowerUnit08
0B14	6B17	jmp     EndPowerUnit08
				;309	
				;310				SET	fg_0x02PowDownReconfigure
0B15	7246	set     A_TEMP0[1].4
				;311				JMP	EndPowerUnitEnd
0B16	6B1E	jmp     EndPowerUnitEnd
				;312		EndPowerUnit08:
				;313				MOV	A, a_DataMessageB0
				EndPowerUnit08:
0B17	4722	mov     a, A_DATAMESSAGEB0
				;314				XOR	A, 008
0B18	0C08	xor     a, 8H
				;315				SNZ	STATUS.2
0B19	390A	snz     Z
				;316				JMP	EndPowerUnit09
0B1A	6B1E	jmp     EndPowerUnitEnd
				;317	
				;318				SET	fg_0x02PowDownNoResponse
0B1B	72C6	set     A_TEMP0[1].5
				;319				SET	fg_EndPowDown
0B1C	7252	set     A_LOOPITERATION[1].4
				;320				JMP	EndPowerUnitEnd
0B1D	6B1E	jmp     EndPowerUnitEnd
				;321		EndPowerUnit09:		
				;322		EndPowerUnitEnd:
				;323				SET	a_StatusEndPower
				EndPowerUnitEnd:
				EndPowerUnit09:
0B1E	5FF1	set     A_STATUSENDPOWER
				;324				RET
0B1F	0003	ret
				;325	
				;326	;========================================================
				;327	;Function : ConErrCMD0x03Decode
				;328	;Note     : Call Function Type for Data-Decode of -128~127 Control Error(0x03)
				;329	;input    : a_DataMessageB0
				;330	;output   : a_0x03ContlErr
				;331	;========================================================
				;332		ConErrCMD0x03Decode:
				;333				MOV	A, a_DataMessageB0
				ConErrCMD0x03Decode:
0B20	4722	mov     a, A_DATAMESSAGEB0
				;334				MOV	a_0x03ContlErr, A
0B21	40EC	mov     A_0X03CONTLERR, a
				;335		ConErrCMD0x03DecodeEnd:
				;336				CLR 	WDT
				ConErrCMD0x03DecodeEnd:
0B22	0001	clr     wdt
				;337				RET
0B23	0003	ret
				;338	
				;339	
				;340	;========================================================
				;341	;Function : RecPowCMD0x04Decode
				;342	;Note     : Call Function Type for Data-Decode of Received Power(0x04)
				;343	;input    : (1) a_DataMessageB0
				;344	;output   : (1) a_0x04ReceivedPow
				;345	;	  : a_0x04ReceiPowCNTL
				;346	;	  : a_0x04ReceiPowCNTH
				;347	; 	  : fg_0x04ReceiPowCNTHflag
				;348	;========================================================
				;349		RecPowCMD0x04Decode:
				;350				CLR 	WDT
				RecPowCMD0x04Decode:
0B24	0001	clr     wdt
				;351				MOV	A, a_DataMessageB0
0B25	4722	mov     a, A_DATAMESSAGEB0
				;352				MOV	a_0x04ReceivedPow, A
0B26	40ED	mov     A_0X04RECEIVEDPOW, a
				;353				MOV	A, c_IniReceiPowCNTL
0B27	0F60	mov     a, 60H
				;354				MOV	a_0x04ReceiPowCNTL, A
0B28	40F5	mov     A_0X04RECEIPOWCNTL, a
				;355				MOV	A, c_IniReceiPowCNTH
0B29	0F00	mov     a, 0H
				;356				MOV	a_0x04ReceiPowCNTH, A
0B2A	40F4	mov     A_0X04RECEIPOWCNTH, a
				;357				SZ	a_0x04ReceiPowCNTH
0B2B	50F4	sz      A_0X04RECEIPOWCNTH
				;358				SET	fg_0x04ReceiPowCNTHflag
0B2C	7352	set     A_LOOPITERATION[1].6
				;359	
				;360				RET
0B2D	0003	ret
				;361	
				;362	
				;363	;========================================================
				;364	;Function : PowContlHoldCMD0x06Decode
				;365	;Note     : Call Function Type for Data-Decode of Power Control Hold-off(0x06)
				;366	;input    : a_PCHO0x06_B0
				;367	;output = : a_0x06TdelayML
				;368	;	  : a_0x06TdelayMH
				;369	;	  : fg_PCH0x06Abnor
				;370	;========================================================
				;371		PowContlHoldCMD0x06Decode:
				;372				CLR 	WDT
				PowContlHoldCMD0x06Decode:
0B2E	0001	clr     wdt
				;373				MOV	A, a_PCHO0x06_B0
0B2F	4759	mov     a, A_PCHO0X06_B0
				;374				SUB	A, 005H
0B30	0A05	sub     a, 5H
				;375				SNZ	STATUS.0
0B31	380A	snz     C
				;376				JMP	PCHCMD0x06Abnormal
0B32	6B40	jmp     PCHCMD0x06Abnormal
				;377				
				;378				MOV	A, a_PCHO0x06_B0
0B33	4759	mov     a, A_PCHO0X06_B0
				;379				SUB	A, 0CEH
0B34	0ACE	sub     a, CEH
				;380				SZ	STATUS.0
0B35	3C0A	sz      C
				;381				JMP	PCHCMD0x06Abnormal
0B36	6B40	jmp     PCHCMD0x06Abnormal
				;382	
				;383		PowContlHoldCMD0x06Decode2:		
				;384				;;; 5ms <= Tdelay <= 205ms
				;385				;;; 014h=20, 50us x (20*5) = 5000us = 5.00ms, 50us x (20*205) = 205000us = 205ms
				;386				;;;;013h=19, 50us x (19*5) = 4750us = 4.75ms, 50us x (19*205) = 194000us = 194ms
				;387				MOV	A, 014H
				PowContlHoldCMD0x06Decode2:
0B37	0F14	mov     a, 14H
				;388				ADD	A, a_0x06TdelayML
0B38	436F	add     a, A_0X06TDELAYML
				;389				MOV	a_0x06TdelayML, A
0B39	40EF	mov     A_0X06TDELAYML, a
				;390				MOV	A, 000H
0B3A	0F00	mov     a, 0H
				;391				ADC	A, a_0x06TdelayMH
0B3B	5370	adc     a, A_0X06TDELAYMH
				;392				MOV	a_0x06TdelayMH, A
0B3C	40F0	mov     A_0X06TDELAYMH, a
				;393		PowContlHoldCMD0x06Decode1:
				;394				SDZ	a_PCHO0x06_B0
				PowContlHoldCMD0x06Decode1:
0B3D	57D9	sdz     A_PCHO0X06_B0
				;395				JMP	PowContlHoldCMD0x06Decode2
0B3E	6B37	jmp     PowContlHoldCMD0x06Decode2
				;396	
				;397				RET
0B3F	0003	ret
				;398		PCHCMD0x06Abnormal:
				;399				SET	fg_PCH0x06Abnor
				PCHCMD0x06Abnormal:
0B40	7053	set     A_LOOPITERATION[2].0
				;400				RET
0B41	0003	ret
				;401	;========================================================
				;402	;Function : ConfigCMD0x51Decode
				;403	;Note     : Call Function Type for Data-Decode of Configuration(0x51)
				;404	;input    : a_Config0x51_B0
				;405	;output   : a_0x51PowMax [Power max (w) when PowClass=0]
				;406	;========================================================
				;407		ConfigCMD0x51Decode:
				;408				;; --- Maximum Power ---
				;409				MOV	A, 03FH
				ConfigCMD0x51Decode:
0B42	0F3F	mov     a, 3FH
				;410				AND	A, a_Config0x51_B0
0B43	465A	and     a, A_CONFIG0X51_B0
				;411				MOV	a_0x51PowMax, A
0B44	40F3	mov     A_0X51POWMAX, a
				;412				;; a_0x51PowMax/2 = a_0x51PowMax/2^1 
				;413				CLR	c
0B45	340A	clr     C
				;414				RRC	a_0x51PowMax
0B46	5BF3	rrc     A_0X51POWMAX
				;415		ConfigCMD0x51DecodeEnd:		 
				;416				RET
				ConfigCMD0x51DecodeEnd:
0B47	0003	ret
				;417	
				;418	END
				;file D:\HOLTEK\C900\C960 Project\Chris負責彙整上網方案\WAS_C2006(HT66FW2230無線充電)\11_Tech_C2006\COD_C2006-A\Isen.asm
				;1	;*******************************************************************************************
				;2	;*****	                               History	                                       *****
				;3	;*******************************************************************************************
				;4	;V1.0 - WPC Qi Certification Source Code by Edward in HOLTEK Semiconductor Inc. on 2014/12/25
				;5	
				;6	
				;7	
				;8	;*******************************************************************************************
				;9	;*****	                           Including File	                               *****
				;10	;*******************************************************************************************
				;11	#INCLUDE 	HT66FW2230.inc
				;12	#INCLUDE	TxUserDEF2230v302.inc
				;13	
				;14	
				;15	;*******************************************************************************************
				;16	;*****	                        Function / Parameter Claim	                       *****
				;17	;*******************************************************************************************
				;18	PUBLIC		PID_SenPriCoilCurrWay65Double
				;19	PUBLIC		PID_Isen65_SUBIsen
				;20	PUBLIC		PID_SenPriCoilCurrWay65
				;21	PUBLIC		PID_Isen65AvgTwo
				;22	
				;23	EXTERN		Sensoring10_8					:	near
				;24	EXTERN		CLRMath						:	near
				;25	EXTERN		PreCarry					:	near
				;26	EXTERN		PostCarry					:	near
				;27	EXTERN		SignedMul_16Bit					:	near
				;28	
				;29	EXTERN		a_ADRHbuffer					:	byte
				;30	EXTERN		a_ADRLbuffer			        	:	byte
				;31	EXTERN		a_data0						:	byte
				;32	EXTERN		a_data1				        	:	byte
				;33	EXTERN		a_data4						:	byte
				;34	EXTERN		a_data5				        	:	byte
				;35	EXTERN		a_to0						:	byte
				;36	EXTERN		a_to1				        	:	byte
				;37	EXTERN		a_to2                                   	:	byte
				;38	EXTERN		a_to3                                   	:	byte
				;39	EXTERN		a_to6                           		:	byte
				;40	EXTERN		a_to7                                   	:	byte
				;41	EXTERN		a_temp1                                 	:	byte
				;42	EXTERN		fg_IsenSmall					:	bit
				;43	EXTERN		fg_IsenBig					:	bit
				;44	EXTERN		fg_IsenFirst					:	bit
				;45	EXTERN		a_ExIP0x81_B1					:	byte
				;46	EXTERN		a_ExIP0x81_B2                   		:	byte
				;47	EXTERN		a_Carry						:	byte
				;48	
				;49	
				;50	;*******************************************************************************************
				;51	;*****	                            Program Body	                               *****
				;52	;*******************************************************************************************
				;53	Isen		.Section 	'code'
				;54	;========================================================
				;55	;Function 	: PID_SenPriCoilCurrWay65Double  ( 370 us)
				;56	;Note     	: Call Function Type for Sensor Primary Coil Current
				;57	;========================================================
				;58	PID_SenPriCoilCurrWay65Double:
				;59				CALL	PID_SenPriCoilCurrWay65
				PID_SenPriCoilCurrWay65Double:
				ISEN:
0B48	6352	call    PID_SenPriCoilCurrWay65
				;60				CALL	PID_SenPriCoilCurrWay65
0B49	6352	call    PID_SenPriCoilCurrWay65
				;61				RET
0B4A	0003	ret
				;62	
				;63	
				;64	;========================================================
				;65	;Function 	: PID_Isen65_SUBIsen  (  us)
				;66	;Note     	: Call Function Type for FOD Isen 
				;67	;input  	: 	
				;68	;output 	: 	
				;69	;parameter	: 	
				;70	;Setting	:
				;71	;========================================================
				;72		PID_Isen65_SUBIsen:
				;73				CALL	PreCarry
				PID_Isen65_SUBIsen:
0B4B	6490	call    PreCarry
				;74				MOV	A, a_ADRLbuffer				;New Isen_L	; Low Byte
0B4C	472D	mov     a, A_ADRLBUFFER
				;75				SUB	A, a_to6				;IsenSmallTh_L
0B4D	4240	sub     a, A_TO6
				;76				MOV	A, a_ADRHbuffer				;New Isen_H	; High Byte
0B4E	472C	mov     a, A_ADRHBUFFER
				;77				SBC	A, a_to7				;IsenSmallTh_H
0B4F	5241	sbc     a, A_TO7
				;78				CALL	PostCarry
0B50	6493	call    PostCarry
				;79				RET
0B51	0003	ret
				;80	
				;81	;========================================================
				;82	;Function 	: PID_SenPriCoilCurrWay65  ( 370 us)
				;83	;Note     	: Call Function Type for Sensor Primary Coil Current
				;84	;Description    : sensor 10 to access 8, then avg_ADC = sum_ADC /8 with
				;85	;		  checking PLL and precious avg_ADC 
				;86	;input  	: 	
				;87	;output 	: 	
				;88	;parameter	: 
				;89	;Setting	:
				;90	;========================================================
				;91		PID_SenPriCoilCurrWay65:
				;92				CLR 	WDT
				PID_SenPriCoilCurrWay65:
0B52	0001	clr     wdt
				;93				CALL	PID_Isen65AvgTwo
0B53	636C	call    PID_Isen65AvgTwo
				;94				SZ	fg_IsenFirst
0B54	7DD4	sz      A_LOOPITERATION[3].3
				;95				RET
0B55	0003	ret
				;96				
				;97				CLR	fg_IsenSmall
0B56	7753	clr     A_LOOPITERATION[2].6
				;98				CLR	fg_IsenBig
0B57	77D3	clr     A_LOOPITERATION[2].7
				;99	   
				;100	   	;;IsenSmall and IsenBig
				;101	  	PID_Isen65_IsenCheckSmall:
				;102				MOV	A, c_IniIsenSmallTh_H			;IsenSmallTh_H
				PID_Isen65_IsenCheckSmall:
0B58	0F00	mov     a, 0H
				;103				MOV	a_to7, A                        	
0B59	40C1	mov     A_TO7, a
				;104				MOV	A, c_IniIsenSmallTh_L			;IsenSmallTh_L
0B5A	0F9E	mov     a, 9EH
				;105				MOV	a_to6, A                        	
0B5B	40C0	mov     A_TO6, a
				;106				CALL	PID_Isen65_SUBIsen              	
0B5C	634B	call    PID_Isen65_SUBIsen
				;107				SZ	a_Carry                         	
0B5D	50F8	sz      A_CARRY
				;108				JMP	PID_Isen65_IsenSmallfg			; < 
0B5E	6B60	jmp     PID_Isen65_IsenSmallfg
				;109	                                                                	
				;110				JMP	PID_Isen65_IsenCheckBig			; >=
0B5F	6B62	jmp     PID_Isen65_IsenCheckBig
				;111		PID_Isen65_IsenSmallfg:                                 	
				;112				SET	fg_IsenSmall                    	
				PID_Isen65_IsenSmallfg:
0B60	7353	set     A_LOOPITERATION[2].6
				;113				JMP	PID_Isen65END                   	
0B61	6B6A	jmp     PID_Isen65END
				;114		PID_Isen65_IsenCheckBig:                                	
				;115				MOV	A, c_IniIsenBigTh_H			;IsenBigTh_H
				PID_Isen65_IsenCheckBig:
0B62	0F03	mov     a, 3H
				;116				MOV	a_to7, A                        	
0B63	40C1	mov     A_TO7, a
				;117				MOV	A, c_IniIsenBigTh_L			;IsenBigTh_L
0B64	0F20	mov     a, 20H
				;118				MOV	a_to6, A                        	
0B65	40C0	mov     A_TO6, a
				;119				CALL	PID_Isen65_SUBIsen              	
0B66	634B	call    PID_Isen65_SUBIsen
				;120				SZ	a_Carry                         	
0B67	50F8	sz      A_CARRY
				;121				JMP	PID_Isen65END				; <
0B68	6B6A	jmp     PID_Isen65END
				;122		PID_Isen65_IsenBigfg:
				;123				SET	fg_IsenBig
				PID_Isen65_IsenBigfg:
0B69	73D3	set     A_LOOPITERATION[2].7
				;124		PID_Isen65END:
				;125				CLR 	WDT
				PID_Isen65END:
0B6A	0001	clr     wdt
				;126				RET	
0B6B	0003	ret
				;127	
				;128	
				;129	;========================================================
				;130	;Function 	: PID_Isen65AvgTwo  (  us)
				;131	;Note     	: Call Function Type for Isen twice
				;132	;input  	: 	
				;133	;output 	: 	
				;134	;parameter	: 	
				;135	;Setting	:
				;136	;========================================================
				;137		PID_Isen65AvgTwo:
				;138				MOV	A, 009H					; set ADCR0 = 0000_0001 = 001h
				PID_Isen65AvgTwo:
0B6C	0F09	mov     a, 9H
				;139				MOV	ADCR0, A				; ADCR0 @SPDM 2AH (POR=0110_0000, WDT Out=0110_0000)
0B6D	00AA	mov     ADCR0, a
				;140				;; Output a_temp1(High Byte)+ a_to7(Low Byte)
				;141				CALL	Sensoring10_8
0B6E	640C	call    Sensoring10_8
				;142				;;;~~~Save Pre ADC_H/L and Avg_ADC_H/L Convert to Now ADC_H/L~~~
				;143				;;;~~~	Isen(A)=Isen(v)=(VsenADC/4096)*2.08v ~~~
				;144				;;;~~~ => Isen(mA)=(VsenADC/4096)*2.08v*1000 (mA) ~~~
				;145				;;;~~~ => Isen(mA)=VsenADC*130/256=VsenADC*82h/(2^8)~~~
				;146				SZ	fg_IsenFirst
0B6F	7DD4	sz      A_LOOPITERATION[3].3
				;147				JMP	PID_Isen65Isne2
0B70	6B77	jmp     PID_Isen65Isne2
				;148				;JMP	PID_Isen65Isne1
				;149		PID_Isen65Isne1:	
				;150				SET	fg_IsenFirst
				PID_Isen65Isne1:
0B71	71D4	set     A_LOOPITERATION[3].3
				;151				;; Save Now Avg_ADC_H/L first
				;152				MOV	A, a_temp1				;;Now Avg_ADC_H
0B72	4744	mov     a, A_TEMP1
				;153				MOV	a_ExIP0x81_B2, A
0B73	40E6	mov     A_EXIP0X81_B2, a
				;154				MOV	A, a_to7				;;Now Avg_ADC_L
0B74	4741	mov     a, A_TO7
				;155				MOV	a_ExIP0x81_B1, A
0B75	40E5	mov     A_EXIP0X81_B1, a
				;156				RET
0B76	0003	ret
				;157		PID_Isen65Isne2:
				;158				CLR	fg_IsenFirst
				PID_Isen65Isne2:
0B77	75D4	clr     A_LOOPITERATION[3].3
				;159				MOV	A, a_ExIP0x81_B1			;Low Byte
0B78	4765	mov     a, A_EXIP0X81_B1
				;160				ADD	A, a_to7
0B79	4341	add     a, A_TO7
				;161				MOV	a_to7	, A  ;;Saving
0B7A	40C1	mov     A_TO7, a
				;162				MOV	A, a_ExIP0x81_B2			;High Byte
0B7B	4766	mov     a, A_EXIP0X81_B2
				;163				ADC	A, a_temp1
0B7C	5344	adc     a, A_TEMP1
				;164				MOV	a_temp1	, A  ;;Saving
0B7D	40C4	mov     A_TEMP1, a
				;165	
				;166				;; /256=/2^1
				;167				CLR	c
0B7E	340A	clr     C
				;168				RRC	a_temp1
0B7F	5BC4	rrc     A_TEMP1
				;169				RRC	a_to7
0B80	5BC1	rrc     A_TO7
				;170		
				;171				;; Save Now Avg_ADC_H/L
				;172				MOV	A, a_temp1				;;Now Avg_ADC_H
0B81	4744	mov     a, A_TEMP1
				;173				MOV	a_ADRHbuffer, A
0B82	40AC	mov     A_ADRHBUFFER, a
				;174				MOV	A, a_to7				;;Now Avg_ADC_L
0B83	4741	mov     a, A_TO7
				;175				MOV	a_ADRLbuffer, A
0B84	40AD	mov     A_ADRLBUFFER, a
				;176				
				;177		;; Now Avg_ADC_H/L Isen(A) convert to Now ADC_H/L Isen(mA)
				;178		PID_Isen65Conversion:
				;179				;; ADC*82h
				;180				CALL	CLRMath
				PID_Isen65Conversion:
0B85	60E8	call    CLRMath
				;181				MOV	A, a_ADRHbuffer				;;Now Avg_ADC_H
0B86	472C	mov     a, A_ADRHBUFFER
				;182				MOV	a_data1, A              		
0B87	40B3	mov     A_DATA1, a
				;183				MOV	A, a_ADRLbuffer				;;Now Avg_ADC_L
0B88	472D	mov     a, A_ADRLBUFFER
				;184				MOV	a_data0, A              		
0B89	40B2	mov     A_DATA0, a
				;185				CLR	a_data5                 		
0B8A	5F37	clr     A_DATA5
				;186				MOV	A, 082h					;; 82h
0B8B	0F82	mov     a, 82H
				;187				MOV	a_data4, A
0B8C	40B6	mov     A_DATA4, a
				;188				CALL	SignedMul_16Bit
0B8D	27A3	call    SignedMul_16Bit
				;189				
				;190				;; /256=/2^8 
				;191				CLR		c
0B8E	340A	clr     C
				;192				RRC		a_to3
0B8F	5BBD	rrc     A_TO3
				;193				RRC		a_to2
0B90	5BBC	rrc     A_TO2
				;194				RRC		a_to1
0B91	5BBB	rrc     A_TO1
				;195				RRC		a_to0
0B92	5BBA	rrc     A_TO0
				;196					
				;197				CLR		c
0B93	340A	clr     C
				;198				RRC		a_to3
0B94	5BBD	rrc     A_TO3
				;199				RRC		a_to2
0B95	5BBC	rrc     A_TO2
				;200				RRC		a_to1
0B96	5BBB	rrc     A_TO1
				;201				RRC		a_to0
0B97	5BBA	rrc     A_TO0
				;202	        	
				;203				CLR		c
0B98	340A	clr     C
				;204				RRC		a_to3
0B99	5BBD	rrc     A_TO3
				;205				RRC		a_to2
0B9A	5BBC	rrc     A_TO2
				;206				RRC		a_to1
0B9B	5BBB	rrc     A_TO1
				;207				RRC		a_to0
0B9C	5BBA	rrc     A_TO0
				;208	        	
				;209				CLR		c
0B9D	340A	clr     C
				;210				RRC		a_to3
0B9E	5BBD	rrc     A_TO3
				;211				RRC		a_to2
0B9F	5BBC	rrc     A_TO2
				;212				RRC		a_to1
0BA0	5BBB	rrc     A_TO1
				;213				RRC		a_to0
0BA1	5BBA	rrc     A_TO0
				;214	        	
				;215				CLR		c
0BA2	340A	clr     C
				;216				RRC		a_to3
0BA3	5BBD	rrc     A_TO3
				;217				RRC		a_to2
0BA4	5BBC	rrc     A_TO2
				;218				RRC		a_to1
0BA5	5BBB	rrc     A_TO1
				;219				RRC		a_to0
0BA6	5BBA	rrc     A_TO0
				;220	        	
				;221				CLR		c
0BA7	340A	clr     C
				;222				RRC		a_to3
0BA8	5BBD	rrc     A_TO3
				;223				RRC		a_to2
0BA9	5BBC	rrc     A_TO2
				;224				RRC		a_to1
0BAA	5BBB	rrc     A_TO1
				;225				RRC		a_to0
0BAB	5BBA	rrc     A_TO0
				;226	        	
				;227				CLR		c
0BAC	340A	clr     C
				;228				RRC		a_to3
0BAD	5BBD	rrc     A_TO3
				;229				RRC		a_to2
0BAE	5BBC	rrc     A_TO2
				;230				RRC		a_to1
0BAF	5BBB	rrc     A_TO1
				;231				RRC		a_to0
0BB0	5BBA	rrc     A_TO0
				;232	        	
				;233				CLR		c
0BB1	340A	clr     C
				;234				RRC		a_to3
0BB2	5BBD	rrc     A_TO3
				;235				RRC		a_to2
0BB3	5BBC	rrc     A_TO2
				;236				RRC		a_to1
0BB4	5BBB	rrc     A_TO1
				;237				RRC		a_to0
0BB5	5BBA	rrc     A_TO0
				;238	        	
				;239				MOV		A, a_to0
0BB6	473A	mov     a, A_TO0
				;240				MOV		a_ADRLbuffer, A			;Now Isen_L
0BB7	40AD	mov     A_ADRLBUFFER, a
				;241				MOV		A, a_to1
0BB8	473B	mov     a, A_TO1
				;242				MOV		a_ADRHbuffer, A			;Now Isen_H
0BB9	40AC	mov     A_ADRHBUFFER, a
				;243				RET
0BBA	0003	ret
				;244	
				;245	
				;246	
				;247	END
				;file D:\HOLTEK\C900\C960 Project\Chris負責彙整上網方案\WAS_C2006(HT66FW2230無線充電)\11_Tech_C2006\COD_C2006-A\PackageData.asm
				;1	;*******************************************************************************************
				;2	;*****	                               History	                                       *****
				;3	;*******************************************************************************************
				;4	;V1.0 - WPC Qi Certification Source Code by Edward in HOLTEK Semiconductor Inc. on 2014/12/25
				;5	
				;6	
				;7	
				;8	;*******************************************************************************************
				;9	;*****	                           Including File	                               *****
				;10	;*******************************************************************************************
				;11	#INCLUDE 	HT66FW2230.inc
				;12	#INCLUDE	TxUserDEF2230v302.inc
				;13	
				;14	
				;15	;*******************************************************************************************
				;16	;*****	                        Function / Parameter Claim	                       *****
				;17	;*******************************************************************************************
				;18	PUBLIC			ExtractPacData
				;19	
				;20	EXTERN			DemoCLR					:	near
				;21	
				;22	EXTERN			fg_ChecksumBit				:	bit
				;23	EXTERN			fg_PacDataOK				:	bit
				;24	EXTERN			a_DataByteCNTtemp			:	byte
				;25	EXTERN			a_AddrDataOUT				:	byte
				;26	EXTERN			a_HeadMessageCNT			:	byte
				;27	EXTERN			a_ContlDataMessag			:	byte
				;28	EXTERN			a_DataHeader				:	byte
				;29	EXTERN			a_DataMessageB0				:	byte
				;30	EXTERN			a_DataMessageB1             	        :	byte
				;31	EXTERN			a_DataMessageB2             	        :	byte
				;32	EXTERN			a_DataMessageB3             	        :	byte
				;33	EXTERN			a_DataMessageB4             	        :	byte
				;34	EXTERN			a_DataMessageB5             	        :	byte
				;35	EXTERN			a_DataMessageB6             	        :	byte
				;36	EXTERN			a_DataMessageB7             	        :	byte
				;37	EXTERN			a_DataChecksum				:	byte
				;38	EXTERN			a_XORchecksum				:	byte
				;39	
				;40	
				;41	;*******************************************************************************************
				;42	;*****	                            Program Body	                               *****
				;43	;*******************************************************************************************
				;44	PackageData		.Section 	'code'
				;45	;========================================================
				;46	;Function : ExtractPacData
				;47	;Note     : Call Function Type for Packege format 
				;48	;		input =  (1) a_AddrDataOUT for a_DataOUT by IAR0 for Header, Message, checksum
				;49	;			 (2) a_DataByteCNTtemp
				;50	;			 (3) fg_ChecksumBit (Default=0, True(OK)=1)
				;51	;		output = (1)  a_DataHeader
				;52	;			 (2)  a_DataMessageB0
				;53	;			 (3)  a_DataMessageB1
				;54	;			 (4)  a_DataMessageB2
				;55	;			 (5)  a_DataMessageB3
				;56	;			 (6)  a_DataMessageB4
				;57	;			 (7)  a_DataMessageB5
				;58	;			 (8)  a_DataMessageB6
				;59	;			 (9)  a_DataMessageB7
				;60	;			 (10) a_DataChecksum
				;61	;			 (11) fg_PacDataOK (Default=1, True(OK)=0)
				;62	;========================================================
				;63		ExtractPacData:
				;64				CLR WDT
				ExtractPacData:
				PACKAGEDATA:
0BBB	0001	clr     wdt
				;65				CLR	a_XORchecksum
0BBC	5F2B	clr     A_XORCHECKSUM
				;66				SNZ	fg_ChecksumBit
0BBD	7909	snz     A_DEMOV_I1_I2[2].2
				;67				JMP	EPD_DataMessageEnd
0BBE	6C03	jmp     EPD_DataMessageEnd
				;68	
				;69				DEC	a_DataByteCNTtemp			
0BBF	559D	dec     A_DATABYTECNTTEMP
				;70		EPD_DataMessageH:
				;71				MOV	A, a_AddrDataOUT
				EPD_DataMessageH:
0BC0	471E	mov     a, A_ADDRDATAOUT
				;72				ADD	A, a_HeadMessageCNT
0BC1	431F	add     a, A_HEADMESSAGECNT
				;73				MOV	MP0, A
0BC2	0081	mov     MP0, a
				;74				MOV	A, IAR0
0BC3	0700	mov     a, [00H]
				;75				MOV	a_DataHeader, A				; Header Data(1)
0BC4	40A1	mov     A_DATAHEADER, a
				;76				XORM	A, a_XORchecksum                	
0BC5	44AB	xorm    a, A_XORCHECKSUM
				;77				JMP	EPD_DataMessageAJ               	
0BC6	6BF2	jmp     EPD_DataMessageAJ
				;78		EPD_DataMessageB:                                       	
				;79				MOV	A, a_AddrDataOUT                	
				EPD_DataMessageB:
0BC7	471E	mov     a, A_ADDRDATAOUT
				;80				ADD	A, a_HeadMessageCNT             	
0BC8	431F	add     a, A_HEADMESSAGECNT
				;81				MOV	MP0, A                          	
0BC9	0081	mov     MP0, a
				;82				MOV	A, IAR0                         	
0BCA	0700	mov     a, [00H]
				;83		EPD_DataMessageB0:                                      	
				;84				SNZ	a_ContlDataMessag.0			; Message Data B0(2)
				EPD_DataMessageB0:
0BCB	7820	snz     A_CONTLDATAMESSAG.0
				;85				JMP	EPD_DataMessageB1               	
0BCC	6BD0	jmp     EPD_DataMessageB1
				;86				MOV	a_DataMessageB0, A              	
0BCD	40A2	mov     A_DATAMESSAGEB0, a
				;87				XORM	A, a_XORchecksum                	
0BCE	44AB	xorm    a, A_XORCHECKSUM
				;88				JMP	EPD_DataMessageAJ               	
0BCF	6BF2	jmp     EPD_DataMessageAJ
				;89		EPD_DataMessageB1:                                      	
				;90				SNZ	a_ContlDataMessag.1			; Message Data B1(3)
				EPD_DataMessageB1:
0BD0	78A0	snz     A_CONTLDATAMESSAG.1
				;91				JMP	EPD_DataMessageB2               	
0BD1	6BD5	jmp     EPD_DataMessageB2
				;92				MOV	a_DataMessageB1, A              	
0BD2	40A3	mov     A_DATAMESSAGEB1, a
				;93				XORM	A, a_XORchecksum                	
0BD3	44AB	xorm    a, A_XORCHECKSUM
				;94				JMP	EPD_DataMessageAJ               	
0BD4	6BF2	jmp     EPD_DataMessageAJ
				;95		EPD_DataMessageB2:                                      	
				;96				SNZ	a_ContlDataMessag.2			; Message Data B2(4)
				EPD_DataMessageB2:
0BD5	7920	snz     A_CONTLDATAMESSAG.2
				;97				JMP	EPD_DataMessageB3               	
0BD6	6BDA	jmp     EPD_DataMessageB3
				;98				MOV	a_DataMessageB2, A              	
0BD7	40A4	mov     A_DATAMESSAGEB2, a
				;99				XORM	A, a_XORchecksum                	
0BD8	44AB	xorm    a, A_XORCHECKSUM
				;100				JMP	EPD_DataMessageAJ               	
0BD9	6BF2	jmp     EPD_DataMessageAJ
				;101		EPD_DataMessageB3:                                      	
				;102				SNZ	a_ContlDataMessag.3			; Message Data B3(5)
				EPD_DataMessageB3:
0BDA	79A0	snz     A_CONTLDATAMESSAG.3
				;103				JMP	EPD_DataMessageB4               	
0BDB	6BDF	jmp     EPD_DataMessageB4
				;104				MOV	a_DataMessageB3, A              	
0BDC	40A5	mov     A_DATAMESSAGEB3, a
				;105				XORM	A, a_XORchecksum                	
0BDD	44AB	xorm    a, A_XORCHECKSUM
				;106				JMP	EPD_DataMessageAJ               	
0BDE	6BF2	jmp     EPD_DataMessageAJ
				;107		EPD_DataMessageB4:                                      	
				;108				SNZ	a_ContlDataMessag.4			; Message Data B4(6)
				EPD_DataMessageB4:
0BDF	7A20	snz     A_CONTLDATAMESSAG.4
				;109				JMP	EPD_DataMessageB5               	
0BE0	6BE4	jmp     EPD_DataMessageB5
				;110				MOV	a_DataMessageB4, A              	
0BE1	40A6	mov     A_DATAMESSAGEB4, a
				;111				XORM	A, a_XORchecksum                	
0BE2	44AB	xorm    a, A_XORCHECKSUM
				;112				JMP	EPD_DataMessageAJ               	
0BE3	6BF2	jmp     EPD_DataMessageAJ
				;113		EPD_DataMessageB5:                                      	
				;114				SNZ	a_ContlDataMessag.5			; Message Data B5(7)
				EPD_DataMessageB5:
0BE4	7AA0	snz     A_CONTLDATAMESSAG.5
				;115				JMP	EPD_DataMessageB6               	
0BE5	6BE9	jmp     EPD_DataMessageB6
				;116				MOV	a_DataMessageB5, A              	
0BE6	40A7	mov     A_DATAMESSAGEB5, a
				;117				XORM	A, a_XORchecksum                	
0BE7	44AB	xorm    a, A_XORCHECKSUM
				;118				JMP	EPD_DataMessageAJ               	
0BE8	6BF2	jmp     EPD_DataMessageAJ
				;119		EPD_DataMessageB6:                                      	
				;120				SNZ	a_ContlDataMessag.6			; Message Data B6(8)
				EPD_DataMessageB6:
0BE9	7B20	snz     A_CONTLDATAMESSAG.6
				;121				JMP	EPD_DataMessageB7               	
0BEA	6BEE	jmp     EPD_DataMessageB7
				;122				MOV	a_DataMessageB6, A              	
0BEB	40A8	mov     A_DATAMESSAGEB6, a
				;123				XORM	A, a_XORchecksum                	
0BEC	44AB	xorm    a, A_XORCHECKSUM
				;124				JMP	EPD_DataMessageAJ               	
0BED	6BF2	jmp     EPD_DataMessageAJ
				;125		EPD_DataMessageB7:                                      	
				;126				SNZ	a_ContlDataMessag.7			; Message Data B7(9)
				EPD_DataMessageB7:
0BEE	7BA0	snz     A_CONTLDATAMESSAG.7
				;127				JMP	EPD_DataChecksum
0BEF	6BF9	jmp     EPD_DataChecksum
				;128				MOV	a_DataMessageB7, A
0BF0	40A9	mov     A_DATAMESSAGEB7, a
				;129				XORM	A, a_XORchecksum
0BF1	44AB	xorm    a, A_XORCHECKSUM
				;130		EPD_DataMessageAJ:		
				;131				CLR WDT
				EPD_DataMessageAJ:
0BF2	0001	clr     wdt
				;132				INC	a_HeadMessageCNT
0BF3	549F	inc     A_HEADMESSAGECNT
				;133				RL	a_ContlDataMessag
0BF4	58A0	rl      A_CONTLDATAMESSAG
				;134				MOV	A, a_HeadMessageCNT
0BF5	471F	mov     a, A_HEADMESSAGECNT
				;135				XOR	A, a_DataByteCNTtemp
0BF6	441D	xor     a, A_DATABYTECNTTEMP
				;136				SNZ	STATUS.2 ;;1=True
0BF7	390A	snz     Z
				;137				JMP	EPD_DataMessageB
0BF8	6BC7	jmp     EPD_DataMessageB
				;138	
				;139				;JMP	EPD_DataChecksum
				;140		EPD_DataChecksum:
				;141				MOV	A, a_AddrDataOUT
				EPD_DataChecksum:
0BF9	471E	mov     a, A_ADDRDATAOUT
				;142				ADD	A, a_HeadMessageCNT
0BFA	431F	add     a, A_HEADMESSAGECNT
				;143				MOV	MP0, A
0BFB	0081	mov     MP0, a
				;144				MOV	A, IAR0
0BFC	0700	mov     a, [00H]
				;145				MOV	a_DataChecksum, A		; Checksum Data(10)
0BFD	40AA	mov     A_DATACHECKSUM, a
				;146		EPD_DataCheck:		
				;147				MOV	A, a_XORchecksum
				EPD_DataCheck:
0BFE	472B	mov     a, A_XORCHECKSUM
				;148				XOR	A, a_DataChecksum
0BFF	442A	xor     a, A_DATACHECKSUM
				;149				SNZ	STATUS.2
0C00	390A	snz     Z
				;150				JMP	EPD_DataMessageEnd
0C01	6C03	jmp     EPD_DataMessageEnd
				;151	
				;152				CLR	fg_PacDataOK
0C02	7589	clr     A_DEMOV_I1_I2[2].3
				;153		EPD_DataMessageEnd:
				;154				CLR	a_HeadMessageCNT
				EPD_DataMessageEnd:
0C03	5F1F	clr     A_HEADMESSAGECNT
				;155				CLR	a_DataByteCNTtemp
0C04	5F1D	clr     A_DATABYTECNTTEMP
				;156				MOV	A, 080H
0C05	0F80	mov     a, 80H
				;157				MOV	a_ContlDataMessag, A
0C06	40A0	mov     A_CONTLDATAMESSAG, a
				;158				CLR	a_XORchecksum
0C07	5F2B	clr     A_XORCHECKSUM
				;159				CLR	fg_ChecksumBit
0C08	7509	clr     A_DEMOV_I1_I2[2].2
				;160				CALL	DemoCLR
0C09	6496	call    DemoCLR
				;161				CLR	a_AddrDataOUT
0C0A	5F1E	clr     A_ADDRDATAOUT
				;162				RET
0C0B	0003	ret
				;163	
				;164	END
				;file D:\HOLTEK\C900\C960 Project\Chris負責彙整上網方案\WAS_C2006(HT66FW2230無線充電)\11_Tech_C2006\COD_C2006-A\Other.asm
				;1	;*******************************************************************************************
				;2	;*****	                               History	                                       *****
				;3	;*******************************************************************************************
				;4	;V1.0 - WPC Qi Certification Source Code by Edward in HOLTEK Semiconductor Inc. on 2014/12/25
				;5	
				;6	
				;7	
				;8	;*******************************************************************************************
				;9	;*****	                           Including File	                               *****
				;10	;*******************************************************************************************
				;11	#INCLUDE 	HT66FW2230.inc
				;12	#INCLUDE	TxUserDEF2230v302.inc
				;13	
				;14	
				;15	;*******************************************************************************************
				;16	;*****	                        Function / Parameter Claim	                       *****
				;17	;*******************************************************************************************
				;18	PUBLIC			Sensoring10_8
				;19	PUBLIC			PreCarry
				;20	PUBLIC			PostCarry
				;21	PUBLIC			DemoCLR 
				;22	PUBLIC			ADCData 
				;23	
				;24	EXTERN			sum_ADC_value				:	near
				;25	EXTERN			avg_ADC_value				:	near
				;26	
				;27	EXTERN			a_StatusCntInt1				:	byte
				;28	EXTERN			a_DataOUT				:	byte
				;29	EXTERN			a_DataHeader				:	byte
				;30	EXTERN			a_DataMessageB0				:	byte
				;31	EXTERN			a_DataMessageB1             	        :	byte
				;32	EXTERN			a_DataMessageB2             	        :	byte
				;33	EXTERN			a_DataMessageB3             	        :	byte
				;34	EXTERN			a_DataMessageB4             	        :	byte
				;35	EXTERN			a_DataMessageB5             	        :	byte
				;36	EXTERN			a_DataMessageB6             	        :	byte
				;37	EXTERN			a_DataMessageB7             	        :	byte
				;38	EXTERN			a_DataChecksum				:	byte
				;39	EXTERN			fg_INT_AD				:	bit
				;40	EXTERN			a_com1					:	byte
				;41	EXTERN			a_com2				        :	byte
				;42	EXTERN			a_com3				        :	byte
				;43	EXTERN			a_com4				        :	byte
				;44	EXTERN			a_data0					:	byte
				;45	EXTERN			a_data1				        :	byte
				;46	EXTERN			a_data2					:	byte
				;47	EXTERN			a_data3					:	byte				
				;48	EXTERN			a_data4					:	byte
				;49	EXTERN			a_data5				        :	byte
				;50	EXTERN			a_to0					:	byte
				;51	EXTERN			a_to1				        :	byte
				;52	EXTERN			a_to2                                   :	byte
				;53	EXTERN			a_to3                                   :	byte
				;54	EXTERN			a_to4                           	:	byte
				;55	EXTERN			a_to5                           	:	byte
				;56	EXTERN			a_to6                           	:	byte
				;57	EXTERN			a_to7                                   :	byte
				;58	EXTERN			fg_adc_avg_cnt				:	bit
				;59	EXTERN		    	a_Carry					:	byte
				;60	
				;61	
				;62	;*******************************************************************************************
				;63	;*****	                            Program Body	                               *****
				;64	;*******************************************************************************************
				;65	Other		.Section 	'code'	
				;66	;========================================================
				;67	;Function 	: Sensoring10_8
				;68	;Note     	: Call Function Type for AD Sensor
				;69	;========================================================
				;70		Sensoring10_8:
				;71				CLR	a_DataHeader				;M1H
				Sensoring10_8:
				OTHER:
0C0C	5F21	clr     A_DATAHEADER
				;72				CLR	a_DataMessageB0				;M1L
0C0D	5F22	clr     A_DATAMESSAGEB0
				;73				CLR	a_DataMessageB1				;M2H
0C0E	5F23	clr     A_DATAMESSAGEB1
				;74				CLR	a_DataMessageB2				;M2L
0C0F	5F24	clr     A_DATAMESSAGEB2
				;75				CLR	a_DataMessageB3				;M3H
0C10	5F25	clr     A_DATAMESSAGEB3
				;76				CLR	a_DataMessageB4				;M3L
0C11	5F26	clr     A_DATAMESSAGEB4
				;77				CLR	a_DataMessageB5				;M4H
0C12	5F27	clr     A_DATAMESSAGEB5
				;78				CLR	a_DataMessageB6				;M4L
0C13	5F28	clr     A_DATAMESSAGEB6
				;79				CLR	a_DataMessageB7				;M5H
0C14	5F29	clr     A_DATAMESSAGEB7
				;80				CLR	a_DataChecksum				;M5L
0C15	5F2A	clr     A_DATACHECKSUM
				;81				CLR	a_com1					;M6
0C16	5F2E	clr     A_COM1
				;82				CLR	a_com2                  		
0C17	5F2F	clr     A_COM2
				;83				CLR	a_com3					;M7
0C18	5F30	clr     A_COM3
				;84				CLR	a_com4                  		
0C19	5F31	clr     A_COM4
				;85				CLR	a_data0					;M8
0C1A	5F32	clr     A_DATA0
				;86				CLR	a_data1                 		
0C1B	5F33	clr     A_DATA1
				;87				CLR	a_data2					;M9
0C1C	5F34	clr     A_DATA2
				;88				CLR	a_data3                 		
0C1D	5F35	clr     A_DATA3
				;89				CLR	a_data4					;M10
0C1E	5F36	clr     A_DATA4
				;90				CLR	a_data5                 		
0C1F	5F37	clr     A_DATA5
				;91				CLR	a_to0					;M11
0C20	5F3A	clr     A_TO0
				;92				CLR	a_to1                   		
0C21	5F3B	clr     A_TO1
				;93				CLR	a_to2					;M12
0C22	5F3C	clr     A_TO2
				;94				CLR	a_to3                   		
0C23	5F3D	clr     A_TO3
				;95				CLR	a_to4					;M13
0C24	5F3E	clr     A_TO4
				;96				CLR	a_to5                   		
0C25	5F3F	clr     A_TO5
				;97				CLR	a_to6					;M14
0C26	5F40	clr     A_TO6
				;98				CLR	a_to7
0C27	5F41	clr     A_TO7
				;99		PID_Isen65sensoring:
				;100				CALL	ADCData
				PID_Isen65sensoring:
0C28	64A0	call    ADCData
				;101				MOV	A, ADRH
0C29	0729	mov     a, ADRH
				;102				MOV	a_DataHeader, A				;M1
0C2A	40A1	mov     A_DATAHEADER, a
				;103				MOV	A, ADRL                 		
0C2B	0728	mov     a, ADRL
				;104				MOV	a_DataMessageB0, A      		
0C2C	40A2	mov     A_DATAMESSAGEB0, a
				;105	                                                        		
				;106				CALL	ADCData                 		
0C2D	64A0	call    ADCData
				;107				MOV	A, ADRH                 		
0C2E	0729	mov     a, ADRH
				;108				MOV	a_DataMessageB1, A			;M2
0C2F	40A3	mov     A_DATAMESSAGEB1, a
				;109				MOV	A, ADRL                 		
0C30	0728	mov     a, ADRL
				;110				MOV	a_DataMessageB2, A      		
0C31	40A4	mov     A_DATAMESSAGEB2, a
				;111	                                                        		
				;112				CALL	ADCData                 		
0C32	64A0	call    ADCData
				;113				MOV	A, ADRH                 		
0C33	0729	mov     a, ADRH
				;114				MOV	a_DataMessageB3, A			;M3
0C34	40A5	mov     A_DATAMESSAGEB3, a
				;115				MOV	A, ADRL                 		
0C35	0728	mov     a, ADRL
				;116				MOV	a_DataMessageB4, A      		
0C36	40A6	mov     A_DATAMESSAGEB4, a
				;117	                                                        		
				;118				CALL	ADCData                 		
0C37	64A0	call    ADCData
				;119				MOV	A, ADRH                 		
0C38	0729	mov     a, ADRH
				;120				MOV	a_DataMessageB5, A			;M4
0C39	40A7	mov     A_DATAMESSAGEB5, a
				;121				MOV	A, ADRL                 		
0C3A	0728	mov     a, ADRL
				;122				MOV	a_DataMessageB6, A      		
0C3B	40A8	mov     A_DATAMESSAGEB6, a
				;123	                                                        		
				;124				CALL	ADCData                 		
0C3C	64A0	call    ADCData
				;125				MOV	A, ADRH                 		
0C3D	0729	mov     a, ADRH
				;126				MOV	a_DataMessageB7, A			;M5
0C3E	40A9	mov     A_DATAMESSAGEB7, a
				;127				MOV	A, ADRL                 		
0C3F	0728	mov     a, ADRL
				;128				MOV	a_DataChecksum, A       		
0C40	40AA	mov     A_DATACHECKSUM, a
				;129	                                                        		
				;130				CALL	ADCData                 		
0C41	64A0	call    ADCData
				;131				MOV	A, ADRH                 		
0C42	0729	mov     a, ADRH
				;132				MOV	a_com1, A				;M6
0C43	40AE	mov     A_COM1, a
				;133				MOV	A, ADRL                 		
0C44	0728	mov     a, ADRL
				;134				MOV	a_com2, A               		
0C45	40AF	mov     A_COM2, a
				;135	                                                        		
				;136				CALL	ADCData                 		
0C46	64A0	call    ADCData
				;137				MOV	A, ADRH                 		
0C47	0729	mov     a, ADRH
				;138				MOV	a_com3, A				;M7
0C48	40B0	mov     A_COM3, a
				;139				MOV	A, ADRL                 		
0C49	0728	mov     a, ADRL
				;140				MOV	a_com4, A               		
0C4A	40B1	mov     A_COM4, a
				;141	                                                        		
				;142				CALL	ADCData                 		
0C4B	64A0	call    ADCData
				;143				MOV	A, ADRH                 		
0C4C	0729	mov     a, ADRH
				;144				MOV	a_data0, A				;;M8
0C4D	40B2	mov     A_DATA0, a
				;145				MOV	A, ADRL                 		
0C4E	0728	mov     a, ADRL
				;146				MOV	a_data1, A              		
0C4F	40B3	mov     A_DATA1, a
				;147	                                                        		
				;148				CALL	ADCData                 		
0C50	64A0	call    ADCData
				;149				MOV	A, ADRH                 		
0C51	0729	mov     a, ADRH
				;150				MOV	a_data2, A				;;M9
0C52	40B4	mov     A_DATA2, a
				;151				MOV	A, ADRL                 		
0C53	0728	mov     a, ADRL
				;152				MOV	a_data3, A              		
0C54	40B5	mov     A_DATA3, a
				;153	                                                        		
				;154				CALL	ADCData                 		
0C55	64A0	call    ADCData
				;155				MOV	A, ADRH                 		
0C56	0729	mov     a, ADRH
				;156				MOV	a_data4, A				;;M10
0C57	40B6	mov     A_DATA4, a
				;157				MOV	A, ADRL
0C58	0728	mov     a, ADRL
				;158				MOV	a_data5, A
0C59	40B7	mov     A_DATA5, a
				;159	
				;160		;;;~~~Sum_ADC_value~~~
				;161		PID_Isen65_Sum_ADC:
				;162				CLR	fg_adc_avg_cnt
				PID_Isen65_Sum_ADC:
0C5A	75D3	clr     A_LOOPITERATION[2].3
				;163				; 1st data					
				;164				mov	A, offset a_DataHeader			; point high byte of M1
0C5B	0FA1	mov     a, A1H
				;165				mov	mp1l, A                         	
0C5C	0083	mov     MP1L, a
				;166				mov	A, offset a_DataMessageB0		; point low byte of M1
0C5D	0FA2	mov     a, A2H
				;167				mov	mp0, A                          	
0C5E	0081	mov     MP0, a
				;168				call	sum_ADC_value                   	
0C5F	26F7	call    sum_ADC_value
				;169				; 2nd data						
				;170				mov	A, offset a_DataMessageB1		; point high byte of M2
0C60	0FA3	mov     a, A3H
				;171				mov	mp1l, A                         	
0C61	0083	mov     MP1L, a
				;172				mov	a, offset a_DataMessageB2		; point low byte of M2
0C62	0FA4	mov     a, A4H
				;173				mov	mp0, A                          	
0C63	0081	mov     MP0, a
				;174				call	sum_ADC_value                   	
0C64	26F7	call    sum_ADC_value
				;175				; 3th data						
				;176				mov	A, offset a_DataMessageB3		; point high byte of M3
0C65	0FA5	mov     a, A5H
				;177				mov	mp1l, A                         	
0C66	0083	mov     MP1L, a
				;178				mov	a, offset a_DataMessageB4		; point low byte of M3
0C67	0FA6	mov     a, A6H
				;179				mov	mp0, a                          	
0C68	0081	mov     MP0, a
				;180				call	sum_ADC_value                   	
0C69	26F7	call    sum_ADC_value
				;181				; 4th data						
				;182				mov	a, offset a_DataMessageB5		; point high byte of M4
0C6A	0FA7	mov     a, A7H
				;183				mov	mp1l, a                         	
0C6B	0083	mov     MP1L, a
				;184				mov	a, offset a_DataMessageB6		; point low byte of M4
0C6C	0FA8	mov     a, A8H
				;185				mov	mp0, a                          	
0C6D	0081	mov     MP0, a
				;186				call	sum_ADC_value                   	
0C6E	26F7	call    sum_ADC_value
				;187				; 5th data						
				;188				mov	a, offset a_DataMessageB7		; point high byte of M5
0C6F	0FA9	mov     a, A9H
				;189				mov	mp1l, a                         	
0C70	0083	mov     MP1L, a
				;190				mov	a, offset a_DataChecksum		; point low byte of M5
0C71	0FAA	mov     a, AAH
				;191				mov	mp0, a                          	
0C72	0081	mov     MP0, a
				;192				call	sum_ADC_value                   	
0C73	26F7	call    sum_ADC_value
				;193				; 6th data						
				;194				mov	a, offset a_com1			; point high byte of M6
0C74	0FAE	mov     a, AEH
				;195				mov	mp1l, a                         	
0C75	0083	mov     MP1L, a
				;196				mov	a, offset a_com2			; point low byte of M6
0C76	0FAF	mov     a, AFH
				;197				mov	mp0, a                          	
0C77	0081	mov     MP0, a
				;198				call	sum_ADC_value                   	
0C78	26F7	call    sum_ADC_value
				;199				; 7th data						
				;200				mov	a, offset a_com3			; point high byte of M7
0C79	0FB0	mov     a, B0H
				;201				mov	mp1l, a                         	
0C7A	0083	mov     MP1L, a
				;202				mov	a, offset a_com4			; point low byte of M7
0C7B	0FB1	mov     a, B1H
				;203				mov	mp0, a
0C7C	0081	mov     MP0, a
				;204				call	sum_ADC_value
0C7D	26F7	call    sum_ADC_value
				;205				; 8th data					
				;206				mov	a, offset a_data0			; point high byte of M8
0C7E	0FB2	mov     a, B2H
				;207				mov	mp1l, a                 		
0C7F	0083	mov     MP1L, a
				;208				mov	a, offset a_data1			; point low byte of M8
0C80	0FB3	mov     a, B3H
				;209				mov	mp0, a                  		
0C81	0081	mov     MP0, a
				;210				call	sum_ADC_value           		
0C82	26F7	call    sum_ADC_value
				;211				; 9th data							
				;212				mov	a, offset a_data2			; point high byte of M9
0C83	0FB4	mov     a, B4H
				;213				mov	mp1l, a                 		
0C84	0083	mov     MP1L, a
				;214				mov	a, offset a_data3			; point low byte of M9
0C85	0FB5	mov     a, B5H
				;215				mov	mp0, a                  		
0C86	0081	mov     MP0, a
				;216				call	sum_ADC_value           		
0C87	26F7	call    sum_ADC_value
				;217				; 10th data							
				;218				mov	a, offset a_data4			; point high byte of M10
0C88	0FB6	mov     a, B6H
				;219				mov	mp1l, a                 		
0C89	0083	mov     MP1L, a
				;220				mov	a, offset a_data5			; point low byte of M10
0C8A	0FB7	mov     a, B7H
				;221				mov	mp0, a
0C8B	0081	mov     MP0, a
				;222				call	sum_ADC_value
0C8C	26F7	call    sum_ADC_value
				;223			
				;224		;;;~~~Avg_ADC_value=Sum_ADC_value /8~~~
				;225		PID_Isen65_Avg_ADC:
				;226				CLR 	WDT
				PID_Isen65_Avg_ADC:
0C8D	0001	clr     wdt
				;227				call	avg_ADC_value
0C8E	2728	call    avg_ADC_value
				;228				RET
0C8F	0003	ret
				;229	
				;230	
				;231	;========================================================
				;232	;Function 	: PreCarry  (  us)
				;233	;Note     	: Call Function Type for FOD Isen 
				;234	;input  	: 	
				;235	;output 	: 	
				;236	;parameter	: 	
				;237	;Setting	:
				;238	;========================================================
				;239		PreCarry:
				;240				CLR 	WDT
				PreCarry:
0C90	0001	clr     wdt
				;241				CLR	a_Carry
0C91	5F78	clr     A_CARRY
				;242				RET
0C92	0003	ret
				;243	
				;244	;========================================================
				;245	;Function 	: PostCarry  (  us)
				;246	;Note     	: Call Function Type for FOD Isen 
				;247	;input  	: 	
				;248	;output 	: 	
				;249	;parameter	: 	
				;250	;Setting	:
				;251	;========================================================
				;252		PostCarry:
				;253				MOV	A, 000H
				PostCarry:
0C93	0F00	mov     a, 0H
				;254				SBCM	A, a_Carry
0C94	52F8	sbcm    a, A_CARRY
				;255				RET
0C95	0003	ret
				;256	
				;257	
				;258	;;========================================================
				;259	;;Function : DemoCLR
				;260	;;Note     : Call Function Type for  
				;261	;;input    : 
				;262	;;output   :
				;263	;;========================================================
				;264		DemoCLR:
				;265				MOV	A, 009H
				DemoCLR:
0C96	0F09	mov     a, 9H
				;266				MOV	a_StatusCntInt1, A
0C97	408A	mov     A_STATUSCNTINT1, a
				;267				MOV	A, offset a_DataOUT
0C98	0F8E	mov     a, 8EH
				;268				MOV	MP0, A
0C99	0081	mov     MP0, a
				;269		LOOP_CLR1:
				;270				CLR WDT
				LOOP_CLR1:
0C9A	0001	clr     wdt
				;271				CLR	IAR0
0C9B	1F00	clr     [00H]
				;272				INC	MP0
0C9C	1481	inc     MP0
				;273				SDZ	a_StatusCntInt1
0C9D	578A	sdz     A_STATUSCNTINT1
				;274				JMP	LOOP_CLR1
0C9E	6C9A	jmp     LOOP_CLR1
				;275				
				;276				RET			
0C9F	0003	ret
				;277	
				;278	
				;279	;========================================================
				;280	;Function : ADCData  
				;281	;Note     : Call Function Type for Isence
				;282	;		input = No need
				;283	;		output = ADRH(H) + ADRL(L)
				;284	;========================================================
				;285		ADCData:
				;286				CLR	START
				ADCData:
0CA0	37AA	clr     START
				;287				SET	START
0CA1	33AA	set     START
				;288				CLR	START
0CA2	37AA	clr     START
				;289		AD_Wait:
				;290				CLR WDT
				AD_Wait:
0CA3	0001	clr     wdt
				;291				SZ	fg_INT_AD
0CA4	7F09	sz      A_DEMOV_I1_I2[2].6
				;292				JMP	AD_Wait
0CA5	6CA3	jmp     AD_Wait
				;293	
				;294				SET	fg_INT_AD
0CA6	7309	set     A_DEMOV_I1_I2[2].6
				;295		ADCDataEnd:
				;296				RET
				ADCDataEnd:
0CA7	0003	ret
				L0CA8:
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
				L0CCB:
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
				L0EE3:
					----
					----
					----
					----
					----
					----
					----
					----
				L0EEB:
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
				L0F09:
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
				L0F2C:
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
				L0F6B:
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
					----
				;297	
				data .SECTION 'DATA'
				A_PARPLLFH DB DUP (?)
				A_PARPLLFL DB DUP (?)
				A_MUTIPLETIMELCTM DB DUP (?)
				A_MUTIPLETIMEHCTM DB DUP (?)
				A_MUTIPLETIMELSTM DB DUP (?)
				A_MUTIPLETIMEHSTM DB DUP (?)
				A_DEMOV_I1_I2 DB DUP (?)
				A_STATUSCNTINT1 DB DUP (?)
				A_DATAOUTTEMP DB DUP (?)
				A_DATAPARITYCNT DB DUP (?)
				A_TIMEOUTCNT DB DUP (?)
				A_DATAOUT DB DUP (?) ; A_DATAOUT
				A_DATACNT DB DUP (?)
				A_PREAMBLE4BITCNT DB DUP (?)
				A_PREAMBLE25BITCNT DB DUP (?)
				A_NOTOGGLECNT DB DUP (?)
				A_DATABYTECNT DB DUP (?)
				A_DATABYTECNTTEMP DB DUP (?)
				A_ADDRDATAOUT DB DUP (?)
				A_HEADMESSAGECNT DB DUP (?)
				A_CONTLDATAMESSAG DB DUP (?)
				A_DATAHEADER DB DUP (?)
				A_DATAMESSAGEB0 DB DUP (?)
				A_DATAMESSAGEB1 DB DUP (?)
				A_DATAMESSAGEB2 DB DUP (?)
				A_DATAMESSAGEB3 DB DUP (?)
				A_DATAMESSAGEB4 DB DUP (?)
				A_DATAMESSAGEB5 DB DUP (?)
				A_DATAMESSAGEB6 DB DUP (?)
				A_DATAMESSAGEB7 DB DUP (?)
				A_DATACHECKSUM DB DUP (?)
				A_XORCHECKSUM DB DUP (?)
				A_ADRHBUFFER DB DUP (?)
				A_ADRLBUFFER DB DUP (?)
				A_COM1 DB DUP (?)
				A_COM2 DB DUP (?)
				A_COM3 DB DUP (?)
				A_COM4 DB DUP (?)
				A_DATA0 DB DUP (?)
				A_DATA1 DB DUP (?)
				A_DATA2 DB DUP (?)
				A_DATA3 DB DUP (?)
				A_DATA4 DB DUP (?)
				A_DATA5 DB DUP (?)
				A_DATA6 DB DUP (?)
				A_DATA7 DB DUP (?)
				A_TO0 DB DUP (?)
				A_TO1 DB DUP (?)
				A_TO2 DB DUP (?)
				A_TO3 DB DUP (?)
				A_TO4 DB DUP (?)
				A_TO5 DB DUP (?)
				A_TO6 DB DUP (?)
				A_TO7 DB DUP (?)
				A_COUNT0 DB DUP (?)
				A_TEMP2 DB DUP (?)
				A_TEMP1 DB DUP (?)
				A_TEMP0 DB DUP (?)
				A_IL DB DUP (?)
				A_IM0 DB DUP (?)
				A_IM1 DB DUP (?)
				A_VL DB DUP (?)
				A_VM0 DB DUP (?)
				A_VM1 DB DUP (?)
				A_EL DB DUP (?)
				A_EM DB DUP (?)
				A_EH DB DUP (?)
				A_SV DB DUP (?)
				A_LOOPITERATION DB DUP (?)
				A_SSP0X01_B0 DB DUP (?)
				A_CSP0X05_B0 DB DUP (?)
				A_PCHO0X06_B0 DB DUP (?)
				A_CONFIG0X51_B0 DB DUP (?)
				A_CONFIG0X51_B2 DB DUP (?)
				A_CONFIG0X51_B3 DB DUP (?)
				A_IP0X71_B0 DB DUP (?)
				A_IP0X71_B1 DB DUP (?)
				A_IP0X71_B2 DB DUP (?)
				A_IP0X71_B3 DB DUP (?)
				A_IP0X71_B4 DB DUP (?)
				A_IP0X71_B5 DB DUP (?)
				A_IP0X71_B6 DB DUP (?)
				A_EXIP0X81_B0 DB DUP (?)
				A_EXIP0X81_B1 DB DUP (?)
				A_EXIP0X81_B2 DB DUP (?)
				A_EXIP0X81_B3 DB DUP (?)
				A_EXIP0X81_B4 DB DUP (?)
				A_EXIP0X81_B5 DB DUP (?)
				A_EXIP0X81_B6 DB DUP (?)
				A_EXIP0X81_B7 DB DUP (?)
				A_0X03CONTLERR DB DUP (?)
				A_0X04RECEIVEDPOW DB DUP (?)
				A_0X04RECEIVEDPOWPRE DB DUP (?)
				A_0X06TDELAYML DB DUP (?)
				A_0X06TDELAYMH DB DUP (?)
				A_STATUSENDPOWER DB DUP (?)
				A_OPTCONFICNT DB DUP (?)
				A_0X51POWMAX DB DUP (?)
				A_0X04RECEIPOWCNTH DB DUP (?)
				A_0X04RECEIPOWCNTL DB DUP (?)
				A_PARPLLFHPRE DB DUP (?)
				A_PARPLLFLPRE DB DUP (?)
				A_CARRY DB DUP (?)
				A_R_DETECTCNT DB DUP (?)
				A_R_RPOWCNT DB DUP (?)
				A_TEMPH DB DUP (?)
				A_TEMPL DB DUP (?)
				FG_BASETIMECTM DB DUP (?) ; FG_BASETIMECTM
				FG_MUTIPLETIMEHFLAGCTM DB DUP (?) ; FG_MUTIPLETIMEHFLAGCTM
				FG_BASETIMESTM DB DUP (?) ; FG_BASETIMESTM
				FG_MUTIPLETIMEHFLAGSTM DB DUP (?) ; FG_MUTIPLETIMEHFLAGSTM
				FG_TIMEOUT DB DUP (?) ; FG_TIMEOUT
				FG_FLAGDEMO DB DUP (?) ; FG_FLAGDEMO
				FG_INT1 DB DUP (?) ; FG_INT1
				FG_INT0 DB DUP (?) ; FG_INT0
				FG_DUDATASTART DB DUP (?) ; FG_DUDATASTART
				FG_DU DB DUP (?) ; FG_DU
				FG_STARTBIT DB DUP (?) ; FG_STARTBIT
				FG_PARITYBIT DB DUP (?) ; FG_PARITYBIT
				FG_PARITYERR DB DUP (?) ; FG_PARITYERR
				FG_STOPBIT DB DUP (?) ; FG_STOPBIT
				FG_WAITDATAOUT DB DUP (?) ; FG_WAITDATAOUT
				FG_STOPBITPRE DB DUP (?) ; FG_STOPBITPRE
				FG_DATAFIRST DB DUP (?) ; FG_DATAFIRST
				FG_PREAMBLE DB DUP (?) ; FG_PREAMBLE
				FG_CHECKSUMBIT DB DUP (?) ; FG_CHECKSUMBIT
				FG_PACDATAOK DB DUP (?) ; FG_PACDATAOK
				FG_STARTRECI DB DUP (?) ; FG_STARTRECI
				FG_DATABYTECNTFULL DB DUP (?) ; FG_DATABYTECNTFULL
				FG_INT_AD DB DUP (?) ; FG_INT_AD
				FG_PIDINI DB DUP (?) ; FG_PIDINI
				FG_START DB DUP (?) ; FG_START
				FG_ITERATIONSTART DB DUP (?) ; FG_ITERATIONSTART
				FG_FODTEMP60 DB DUP (?) ; FG_FODTEMP60
				FG_0X02POWDOWNCHARGECOMPLETE DB DUP (?) ; FG_0X02POWDOWNCHARGECOMPLETE
				FG_0X02POWDOWNRECONFIGURE DB DUP (?) ; FG_0X02POWDOWNRECONFIGURE
				FG_0X02POWDOWNNORESPONSE DB DUP (?) ; FG_0X02POWDOWNNORESPONSE
				FG_EXIDET0X81 DB DUP (?) ; FG_EXIDET0X81
				FG_IDET DB DUP (?) ; FG_IDET
				FG_TDELAY DB DUP (?) ; FG_TDELAY
				FG_0X04OUTRECEIPOWTIME DB DUP (?) ; FG_0X04OUTRECEIPOWTIME
				FG_0X51POWCLASS DB DUP (?) ; FG_0X51POWCLASS
				FG_0X51NONPID DB DUP (?) ; FG_0X51NONPID
				FG_ENDPOWDOWN DB DUP (?) ; FG_ENDPOWDOWN
				FG_CEINPUT DB DUP (?) ; FG_CEINPUT
				FG_0X04RECEIPOWCNTHFLAG DB DUP (?) ; FG_0X04RECEIPOWCNTHFLAG
				FG_PSVIN DB DUP (?) ; FG_PSVIN
				FG_PCH0X06ABNOR DB DUP (?) ; FG_PCH0X06ABNOR
				FG_RECODERPPRE DB DUP (?) ; FG_RECODERPPRE
				FG_RPNOSTABLE DB DUP (?) ; FG_RPNOSTABLE
				FG_ADC_AVG_CNT DB DUP (?) ; FG_ADC_AVG_CNT
				FG_RXCOILD DB DUP (?) ; FG_RXCOILD
				FG_NOCHANGE DB DUP (?) ; FG_NOCHANGE
				FG_ISENSMALL DB DUP (?) ; FG_ISENSMALL
				FG_ISENBIG DB DUP (?) ; FG_ISENBIG
				FG_WAITNEXTCE DB DUP (?) ; FG_WAITNEXTCE
				FG_CETHR DB DUP (?) ; FG_CETHR
				FG_CETHRPANA DB DUP (?) ; FG_CETHRPANA
				FG_ISENFIRST DB DUP (?) ; FG_ISENFIRST
				FG_PLLDOWN DB DUP (?) ; FG_PLLDOWN
				FG_PLLPANA DB DUP (?) ; FG_PLLPANA
				FG_DETECTVIN DB DUP (?) ; FG_DETECTVIN
				FG_VINLOW DB DUP (?) ; FG_VINLOW
				FG_PLL205 DB DUP (?) ; FG_PLL205
				FG_DTCPR DB DUP (?) ; FG_DTCPR
				FG_DTCPRMIN DB DUP (?) ; FG_DTCPRMIN
				FG_PLLTHR DB DUP (?) ; FG_PLLTHR
				FG_PING DB DUP (?) ; FG_PING
				FG_FODEFFICLOW DB DUP (?) ; FG_FODEFFICLOW
				FG_RECORDTEMP DB DUP (?) ; FG_RECORDTEMP
				FG_CALTEMPTIMEHIGH DB DUP (?) ; FG_CALTEMPTIMEHIGH
				FG_POWOVER5WLEDSW DB DUP (?) ; FG_POWOVER5WLEDSW
				FG_DEMODETECT DB DUP (?) ; FG_DEMODETECT
				FG_DEMODETECTTIMEOUT DB DUP (?) ; FG_DEMODETECTTIMEOUT
				FG_RXTI DB DUP (?) ; FG_RXTI
				FG_RXPANA DB DUP (?) ; FG_RXPANA
