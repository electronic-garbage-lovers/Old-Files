<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\OBJ\SRAM.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\OBJ\SRAM.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Fri Jan 20 11:07:28 2017
<BR><P>
<H3>Maximum Stack Usage =        372 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
usmart_cmd_rec &rArr; usmart_get_fparam &rArr; usmart_str2num &rArr; usmart_pow
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[19e]">__user_initial_stackheap</a>
 <LI><a href="#[ae]">PPU_W</a>
 <LI><a href="#[a6]">PPU_R</a>
 <LI><a href="#[d]">_00</a>
 <LI><a href="#[e]">_01</a>
 <LI><a href="#[10]">_05</a>
 <LI><a href="#[11]">_06</a>
 <LI><a href="#[12]">_08</a>
 <LI><a href="#[13]">_09</a>
 <LI><a href="#[14]">_0A</a>
 <LI><a href="#[15]">_0D</a>
 <LI><a href="#[16]">_0E</a>
 <LI><a href="#[17]">_10</a>
 <LI><a href="#[18]">_11</a>
 <LI><a href="#[19]">_15</a>
 <LI><a href="#[1a]">_16</a>
 <LI><a href="#[1b]">_18</a>
 <LI><a href="#[1c]">_19</a>
 <LI><a href="#[1d]">_1D</a>
 <LI><a href="#[1e]">_1E</a>
 <LI><a href="#[1f]">_20</a>
 <LI><a href="#[20]">_21</a>
 <LI><a href="#[21]">_24</a>
 <LI><a href="#[22]">_25</a>
 <LI><a href="#[23]">_26</a>
 <LI><a href="#[24]">_28</a>
 <LI><a href="#[25]">_29</a>
 <LI><a href="#[26]">_2A</a>
 <LI><a href="#[27]">_2C</a>
 <LI><a href="#[28]">_2D</a>
 <LI><a href="#[29]">_2E</a>
 <LI><a href="#[2a]">_30</a>
 <LI><a href="#[2b]">_31</a>
 <LI><a href="#[2c]">_35</a>
 <LI><a href="#[2d]">_36</a>
 <LI><a href="#[2e]">_38</a>
 <LI><a href="#[2f]">_39</a>
 <LI><a href="#[30]">_3D</a>
 <LI><a href="#[31]">_3E</a>
 <LI><a href="#[32]">_40</a>
 <LI><a href="#[33]">_41</a>
 <LI><a href="#[34]">_45</a>
 <LI><a href="#[35]">_46</a>
 <LI><a href="#[36]">_48</a>
 <LI><a href="#[37]">_49</a>
 <LI><a href="#[38]">_4A</a>
 <LI><a href="#[39]">_4C</a>
 <LI><a href="#[3a]">_4D</a>
 <LI><a href="#[3b]">_4E</a>
 <LI><a href="#[3c]">_50</a>
 <LI><a href="#[3d]">_51</a>
 <LI><a href="#[3e]">_55</a>
 <LI><a href="#[3f]">_56</a>
 <LI><a href="#[40]">_58</a>
 <LI><a href="#[41]">_59</a>
 <LI><a href="#[42]">_5D</a>
 <LI><a href="#[43]">_5E</a>
 <LI><a href="#[44]">_60</a>
 <LI><a href="#[45]">_61</a>
 <LI><a href="#[46]">_65</a>
 <LI><a href="#[47]">_66</a>
 <LI><a href="#[48]">_68</a>
 <LI><a href="#[49]">_69</a>
 <LI><a href="#[4a]">_6A</a>
 <LI><a href="#[4b]">_6C</a>
 <LI><a href="#[4c]">_6D</a>
 <LI><a href="#[4d]">_6E</a>
 <LI><a href="#[4e]">_70</a>
 <LI><a href="#[4f]">_71</a>
 <LI><a href="#[50]">_75</a>
 <LI><a href="#[51]">_76</a>
 <LI><a href="#[52]">_78</a>
 <LI><a href="#[53]">_79</a>
 <LI><a href="#[54]">_7D</a>
 <LI><a href="#[55]">_7E</a>
 <LI><a href="#[56]">_81</a>
 <LI><a href="#[57]">_84</a>
 <LI><a href="#[58]">_85</a>
 <LI><a href="#[59]">_86</a>
 <LI><a href="#[5a]">_88</a>
 <LI><a href="#[5b]">_8A</a>
 <LI><a href="#[5c]">_8C</a>
 <LI><a href="#[5d]">_8D</a>
 <LI><a href="#[5e]">_8E</a>
 <LI><a href="#[5f]">_90</a>
 <LI><a href="#[60]">_91</a>
 <LI><a href="#[61]">_94</a>
 <LI><a href="#[62]">_95</a>
 <LI><a href="#[63]">_96</a>
 <LI><a href="#[64]">_98</a>
 <LI><a href="#[65]">_99</a>
 <LI><a href="#[66]">_9A</a>
 <LI><a href="#[67]">_9D</a>
 <LI><a href="#[68]">_A0</a>
 <LI><a href="#[69]">_A1</a>
 <LI><a href="#[6a]">_A2</a>
 <LI><a href="#[6b]">_A4</a>
 <LI><a href="#[6c]">_A5</a>
 <LI><a href="#[6d]">_A6</a>
 <LI><a href="#[6e]">_A8</a>
 <LI><a href="#[6f]">_A9</a>
 <LI><a href="#[70]">_AA</a>
 <LI><a href="#[71]">_AC</a>
 <LI><a href="#[72]">_AD</a>
 <LI><a href="#[73]">_AE</a>
 <LI><a href="#[74]">_B0</a>
 <LI><a href="#[75]">_B1</a>
 <LI><a href="#[76]">_B4</a>
 <LI><a href="#[77]">_B5</a>
 <LI><a href="#[78]">_B6</a>
 <LI><a href="#[79]">_B8</a>
 <LI><a href="#[7a]">_B9</a>
 <LI><a href="#[7b]">_BA</a>
 <LI><a href="#[7c]">_BC</a>
 <LI><a href="#[7d]">_BD</a>
 <LI><a href="#[7e]">_BE</a>
 <LI><a href="#[7f]">_C0</a>
 <LI><a href="#[80]">_C1</a>
 <LI><a href="#[81]">_C4</a>
 <LI><a href="#[82]">_C5</a>
 <LI><a href="#[83]">_C6</a>
 <LI><a href="#[84]">_C8</a>
 <LI><a href="#[85]">_C9</a>
 <LI><a href="#[86]">_CA</a>
 <LI><a href="#[87]">_CC</a>
 <LI><a href="#[88]">_CD</a>
 <LI><a href="#[89]">_CE</a>
 <LI><a href="#[8a]">_D0</a>
 <LI><a href="#[8b]">_D1</a>
 <LI><a href="#[8c]">_D5</a>
 <LI><a href="#[8d]">_D6</a>
 <LI><a href="#[8e]">_D8</a>
 <LI><a href="#[8f]">_D9</a>
 <LI><a href="#[90]">_DD</a>
 <LI><a href="#[91]">_DE</a>
 <LI><a href="#[92]">_E0</a>
 <LI><a href="#[93]">_E1</a>
 <LI><a href="#[94]">_E4</a>
 <LI><a href="#[95]">_E5</a>
 <LI><a href="#[96]">_E6</a>
 <LI><a href="#[97]">_E8</a>
 <LI><a href="#[98]">_E9</a>
 <LI><a href="#[99]">_EA</a>
 <LI><a href="#[9a]">_EC</a>
 <LI><a href="#[9b]">_ED</a>
 <LI><a href="#[9c]">_EE</a>
 <LI><a href="#[9d]">_F0</a>
 <LI><a href="#[9e]">_F1</a>
 <LI><a href="#[9f]">_F5</a>
 <LI><a href="#[a0]">_F6</a>
 <LI><a href="#[a1]">_F8</a>
 <LI><a href="#[a2]">_F9</a>
 <LI><a href="#[a3]">_FD</a>
 <LI><a href="#[a4]">_FE</a>
 <LI><a href="#[fa]">exit_run</a>
 <LI><a href="#[1a0]">VecCont</a>
 <LI><a href="#[f]">_xx</a>
 <LI><a href="#[a7]">IO_R</a>
 <LI><a href="#[af]">IO_W</a>
 <LI><a href="#[fc]">dma_W</a>
 <LI><a href="#[fd]">joy0_W</a>
 <LI><a href="#[fb]">joy0_R</a>
 <LI><a href="#[1a1]">empty_R</a>
 <LI><a href="#[a8]">void</a>
 <LI><a href="#[a5]">ram_R</a>
 <LI><a href="#[ad]">ram_W</a>
 <LI><a href="#[a9]">rom_R80</a>
 <LI><a href="#[aa]">rom_RA0</a>
 <LI><a href="#[ab]">rom_RC0</a>
 <LI><a href="#[ac]">rom_RE0</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[cc]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cc]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[1a1]">empty_R</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1a1]">empty_R</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[cc]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e9]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b4]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[cf]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d0]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c5]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c6]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c7]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c8]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c9]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ca]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[cb]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f2]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f3]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f4]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f5]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b7]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c0]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e2]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c1]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c2]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c3]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c4]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d1]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[be]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ea]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b2]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[da]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d9]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[dc]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[db]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a7]">IO_R</a> from 6502.o(io_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[af]">IO_W</a> from 6502.o(io_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[b3]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b1]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a6]">PPU_R</a> from 6502.o(CPU_GPU) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[ae]">PPU_W</a> from 6502.o(CPU_GPU) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[bb]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b8]">PendSV_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[bf]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e3]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[bd]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[eb]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[dd]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[de]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ed]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b6]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b9]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f6]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[bc]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d2]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d5]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d4]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d3]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d6]">TIM2_IRQHandler</a> from usmart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d7]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d8]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ec]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f0]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f1]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e5]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e8]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e7]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e6]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ee]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ef]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[df]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e0]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e1]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e4]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[cd]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ce]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b5]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[ba]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">_00</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[e]">_01</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[10]">_05</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[11]">_06</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[12]">_08</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[13]">_09</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[14]">_0A</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[15]">_0D</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[16]">_0E</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[17]">_10</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[18]">_11</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[19]">_15</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1a]">_16</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1b]">_18</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1c]">_19</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1d]">_1D</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1e]">_1E</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[1f]">_20</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[20]">_21</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[21]">_24</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[22]">_25</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[23]">_26</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[24]">_28</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[25]">_29</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[26]">_2A</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[27]">_2C</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[28]">_2D</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[29]">_2E</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[2a]">_30</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[2b]">_31</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[2c]">_35</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[2d]">_36</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[2e]">_38</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[2f]">_39</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[30]">_3D</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[31]">_3E</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[32]">_40</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[33]">_41</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[34]">_45</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[35]">_46</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[36]">_48</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[37]">_49</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[38]">_4A</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[39]">_4C</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[3a]">_4D</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[3b]">_4E</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[3c]">_50</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[3d]">_51</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[3e]">_55</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[3f]">_56</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[40]">_58</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[41]">_59</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[42]">_5D</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[43]">_5E</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[44]">_60</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[45]">_61</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[46]">_65</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[47]">_66</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[48]">_68</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[49]">_69</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[4a]">_6A</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[4b]">_6C</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[4c]">_6D</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[4d]">_6E</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[4e]">_70</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[4f]">_71</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[50]">_75</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[51]">_76</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[52]">_78</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[53]">_79</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[54]">_7D</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[55]">_7E</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[56]">_81</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[57]">_84</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[58]">_85</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[59]">_86</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[5a]">_88</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[5b]">_8A</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[5c]">_8C</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[5d]">_8D</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[5e]">_8E</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[5f]">_90</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[60]">_91</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[61]">_94</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[62]">_95</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[63]">_96</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[64]">_98</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[65]">_99</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[66]">_9A</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[67]">_9D</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[68]">_A0</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[69]">_A1</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[6a]">_A2</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[6b]">_A4</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[6c]">_A5</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[6d]">_A6</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[6e]">_A8</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[6f]">_A9</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[70]">_AA</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[71]">_AC</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[72]">_AD</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[73]">_AE</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[74]">_B0</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[75]">_B1</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[76]">_B4</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[77]">_B5</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[78]">_B6</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[79]">_B8</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[7a]">_B9</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[7b]">_BA</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[7c]">_BC</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[7d]">_BD</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[7e]">_BE</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[7f]">_C0</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[80]">_C1</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[81]">_C4</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[82]">_C5</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[83]">_C6</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[84]">_C8</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[85]">_C9</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[86]">_CA</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[87]">_CC</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[88]">_CD</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[89]">_CE</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[8a]">_D0</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[8b]">_D1</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[8c]">_D5</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[8d]">_D6</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[8e]">_D8</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[8f]">_D9</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[90]">_DD</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[91]">_DE</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[92]">_E0</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[93]">_E1</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[94]">_E4</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[95]">_E5</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[96]">_E6</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[97]">_E8</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[98]">_E9</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[99]">_EA</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[9a]">_EC</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[9b]">_ED</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[9c]">_EE</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[9d]">_F0</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[9e]">_F1</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[9f]">_F5</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[a0]">_F6</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[a1]">_F8</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[a2]">_F9</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[a3]">_FD</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[a4]">_FE</a> from 6502.o(cpu_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[fe]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[f9]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[f]">_xx</a> from 6502.o(cpu_run) referenced 210 times from 6502.o(wram_globals0)
 <LI><a href="#[5]">delay_ms</a> from delay.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[6]">delay_us</a> from delay.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[fc]">dma_W</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[fa]">exit_run</a> from 6502.o(cpu_run) referenced from 6502.o(cpu_run)
 <LI><a href="#[f8]">fputc</a> from usart.o(.text) referenced from _printf_char_file.o(.text)
 <LI><a href="#[8]">fsmc_sram_test_read</a> from sram.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[7]">fsmc_sram_test_write</a> from sram.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[fb]">joy0_R</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[fd]">joy0_W</a> from 6502.o(io_code) referenced from 6502.o(io_code)
 <LI><a href="#[a5]">ram_R</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[ad]">ram_W</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[3]">read_addr</a> from usmart.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[a9]">rom_R80</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[aa]">rom_RA0</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[ab]">rom_RC0</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[ac]">rom_RE0</a> from 6502.o(rwram_code) referenced 2 times from 6502.o(wram_globals0)
 <LI><a href="#[a]">usmart_cmd_rec</a> from usmart.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[b]">usmart_exe</a> from usmart.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[9]">usmart_init</a> from usmart.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[c]">usmart_scan</a> from usmart.o(.text) referenced 2 times from usmart_config.o(.data)
 <LI><a href="#[a8]">void</a> from 6502.o(rwram_code) referenced 24 times from 6502.o(io_code)
 <LI><a href="#[a8]">void</a> from 6502.o(rwram_code) referenced 12 times from 6502.o(wram_globals0)
 <LI><a href="#[4]">write_addr</a> from usmart.o(.text) referenced 2 times from usmart_config.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[fe]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[ff]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[101]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1a7]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a8]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1a9]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1aa]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1ab]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[102]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[199]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[104]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[105]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[107]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[109]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1ac]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[10e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1ae]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1b1]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1b3]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1b5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1b6]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[1b7]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1b9]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[113]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1c1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[1c2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[1c3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1c4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[1c5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[1c6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[100]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1c7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[10b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[10d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1c8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[10f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; LCD_Init &rArr; LCD_Display_Dir &rArr; LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1c9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[19f]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[112]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1ca]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[114]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[116]"></a>fsmc_sram_test</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, main.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_WriteBuffer
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_ReadBuffer
</UL>

<P><STRONG><a name="[110]"></a>main</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = main &rArr; LCD_Init &rArr; LCD_Display_Dir &rArr; LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_main
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[b1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[1cb]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>LED_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>KEY_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, key.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = KEY_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>KEY_Scan</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, key.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>

<P><STRONG><a name="[12b]"></a>LCD_WR_REG</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[12e]"></a>LCD_WR_DATA</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[12c]"></a>LCD_RD_DATA</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[12f]"></a>LCD_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[12a]"></a>LCD_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_ReadReg &rArr; LCD_RD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[137]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lcd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_LCD_DisplayLine
</UL>

<P><STRONG><a name="[1cc]"></a>LCD_WriteRAM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>LCD_BGR2RGB</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>

<P><STRONG><a name="[131]"></a>opt_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>

<P><STRONG><a name="[12d]"></a>LCD_SetCursor</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_LCD_DisplayLine
</UL>

<P><STRONG><a name="[130]"></a>LCD_ReadPoint</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt_delay
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BGR2RGB
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[133]"></a>LCD_DisplayOn</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[134]"></a>LCD_DisplayOff</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[135]"></a>LCD_Scan_Dir</STRONG> (Thumb, 744 bytes, Stack size 20 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[136]"></a>LCD_DrawPoint</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[138]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 382 bytes, Stack size 12 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[139]"></a>LCD_SSD_BackLightSet</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>

<P><STRONG><a name="[13d]"></a>LCD_Display_Dir</STRONG> (Thumb, 444 bytes, Stack size 8 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[13e]"></a>LCD_Set_Window</STRONG> (Thumb, 538 bytes, Stack size 60 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[13f]"></a>LCD_Clear</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>

<P><STRONG><a name="[11f]"></a>LCD_Init</STRONG> (Thumb, 1384 bytes, Stack size 128 bytes, lcd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LCD_Init &rArr; LCD_Display_Dir &rArr; LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[143]"></a>LCD_Fill</STRONG> (Thumb, 180 bytes, Stack size 44 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>

<P><STRONG><a name="[144]"></a>LCD_Color_Fill</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>

<P><STRONG><a name="[145]"></a>LCD_DrawLine</STRONG> (Thumb, 186 bytes, Stack size 68 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>

<P><STRONG><a name="[146]"></a>LCD_DrawRectangle</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[147]"></a>LCD_Draw_Circle</STRONG> (Thumb, 152 bytes, Stack size 28 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[148]"></a>LCD_ShowChar</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
</UL>

<P><STRONG><a name="[14a]"></a>LCD_Pow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
</UL>

<P><STRONG><a name="[149]"></a>LCD_ShowNum</STRONG> (Thumb, 148 bytes, Stack size 56 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[11a]"></a>LCD_ShowxNum</STRONG> (Thumb, 190 bytes, Stack size 60 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsmc_sram_test
</UL>

<P><STRONG><a name="[117]"></a>LCD_ShowString</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, lcd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsmc_sram_test
</UL>

<P><STRONG><a name="[121]"></a>FSMC_SRAM_Init</STRONG> (Thumb, 202 bytes, Stack size 96 bytes, sram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FSMC_SRAM_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[118]"></a>FSMC_SRAM_WriteBuffer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_SRAM_WriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsmc_sram_test_write
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsmc_sram_test
</UL>

<P><STRONG><a name="[119]"></a>FSMC_SRAM_ReadBuffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sram.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsmc_sram_test_read
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsmc_sram_test
</UL>

<P><STRONG><a name="[7]"></a>fsmc_sram_test_write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fsmc_sram_test_write &rArr; FSMC_SRAM_WriteBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_WriteBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>fsmc_sram_test_read</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, sram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fsmc_sram_test_read
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_ReadBuffer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[11b]"></a>delay_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, delay.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>delay_us</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, delay.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>delay_ms</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[11c]"></a>NVIC_Configuration</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>_sys_exit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[f8]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[11d]"></a>uart_init</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = uart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[df]"></a>USART1_IRQHandler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d0]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f4]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c1]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c3]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[dc]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[db]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[bf]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[bd]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[eb]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[de]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d5]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d4]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d7]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ec]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e8]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e7]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ee]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[14c]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[14e]"></a>NVIC_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[1cd]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[1cf]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 224 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>

<P><STRONG><a name="[1d2]"></a>FSMC_NANDInit</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 124 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1d6]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>

<P><STRONG><a name="[1d7]"></a>FSMC_NANDCmd</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1da]"></a>FSMC_GetECC</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1db]"></a>FSMC_ITConfig</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>FSMC_ClearFlag</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1de]"></a>FSMC_GetITStatus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[1df]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[156]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[126]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>

<P><STRONG><a name="[1e0]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>

<P><STRONG><a name="[1e1]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[1e4]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ea]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ed]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ee]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[157]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[1ef]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f0]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f3]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f4]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f6]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f7]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f8]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1fa]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1fb]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1fc]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1fd]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[140]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>

<P><STRONG><a name="[125]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>

<P><STRONG><a name="[176]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[155]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[159]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[1ff]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[201]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[202]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[203]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[204]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[14f]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[205]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[206]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[207]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[150]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
</UL>

<P><STRONG><a name="[208]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[209]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[20b]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[20c]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[20d]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[20e]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[20f]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[212]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[213]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[215]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[217]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[218]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[219]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[21a]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[21b]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>TIM_DeInit</STRONG> (Thumb, 424 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[177]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[21c]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[21d]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[21e]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>TIM_OC4Init</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[164]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[162]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[160]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[15e]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[15c]"></a>TIM_ICInit</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[165]"></a>TIM_PWMIConfig</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[220]"></a>TIM_BDTRConfig</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[221]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[222]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[223]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[224]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[225]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[178]"></a>TIM_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>

<P><STRONG><a name="[226]"></a>TIM_GenerateEvent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>TIM_DMAConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[228]"></a>TIM_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[229]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[166]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[168]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[16a]"></a>TIM_ETRConfig</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[169]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[16b]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 32 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[22a]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[22b]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[22e]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[22f]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[230]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[232]"></a>TIM_SelectCOM</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[233]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[235]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[236]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[237]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[238]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[23c]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[23f]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[240]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[241]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[242]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[243]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[244]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[245]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[246]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[247]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[248]"></a>TIM_CCxCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[249]"></a>TIM_CCxNCmd</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24a]"></a>TIM_SelectOCxM</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24b]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24c]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[250]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[251]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[252]"></a>TIM_SetCounter</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[253]"></a>TIM_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[255]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[256]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[258]"></a>TIM_SetClockDivision</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[259]"></a>TIM_GetCapture1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25a]"></a>TIM_GetCapture2</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25b]"></a>TIM_GetCapture3</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25c]"></a>TIM_GetCapture4</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25d]"></a>TIM_GetCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>TIM_GetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>TIM_GetITStatus</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[174]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[16c]"></a>usmart_sys_cmd_exe</STRONG> (Thumb, 1570 bytes, Stack size 56 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = usmart_sys_cmd_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_cmdname
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
</UL>

<P><STRONG><a name="[d6]"></a>TIM2_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM2_IRQHandler &rArr; TIM_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[175]"></a>Timer2_Init</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_init
</UL>

<P><STRONG><a name="[9]"></a>usmart_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usmart_init &rArr; Timer2_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer2_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>usmart_cmd_rec</STRONG> (Thumb, 170 bytes, Stack size 96 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = usmart_cmd_rec &rArr; usmart_get_fparam &rArr; usmart_str2num &rArr; usmart_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>usmart_exe</STRONG> (Thumb, 708 bytes, Stack size 128 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = usmart_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>usmart_scan</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, usmart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = usmart_scan &rArr; usmart_sys_cmd_exe &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>read_addr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usmart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>write_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usmart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> usmart_config.o(.data)
</UL>
<P><STRONG><a name="[16e]"></a>usmart_strcmp</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, usmart_str.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[17f]"></a>usmart_strcopy</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usmart_str.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[17e]"></a>usmart_strlen</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usmart_str.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
</UL>

<P><STRONG><a name="[17c]"></a>usmart_pow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usmart_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usmart_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
</UL>

<P><STRONG><a name="[172]"></a>usmart_str2num</STRONG> (Thumb, 202 bytes, Stack size 28 bytes, usmart_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usmart_str2num &rArr; usmart_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_pow
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[16d]"></a>usmart_get_cmdname</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usmart_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usmart_get_cmdname
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[17d]"></a>usmart_search_nextc</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usmart_str.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fname
</UL>

<P><STRONG><a name="[170]"></a>usmart_get_fname</STRONG> (Thumb, 430 bytes, Stack size 72 bytes, usmart_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = usmart_get_fname
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_search_nextc
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[171]"></a>usmart_get_aparm</STRONG> (Thumb, 188 bytes, Stack size 20 bytes, usmart_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[17b]"></a>usmart_get_parmpos</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usmart_str.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_fparam
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
</UL>

<P><STRONG><a name="[17a]"></a>usmart_get_fparam</STRONG> (Thumb, 262 bytes, Stack size 240 bytes, usmart_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = usmart_get_fparam &rArr; usmart_str2num &rArr; usmart_pow
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strlen
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_strcopy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_str2num
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_parmpos
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_get_aparm
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_cmd_rec
</UL>

<P><STRONG><a name="[180]"></a>NesFrameCycle</STRONG> (Thumb, 250 bytes, Stack size 0 bytes, nes_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NesFrameCycle &rArr; NES_RenderLine &rArr; NES_RenderSprite88 &rArr; NES_RenderSprPattern
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line242NMI
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderLine
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_GetSpr0HitFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_main
</UL>

<P><STRONG><a name="[122]"></a>nes_main</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, nes_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = nes_main &rArr; NesFrameCycle &rArr; NES_RenderLine &rArr; NES_RenderSprite88 &rArr; NES_RenderSprPattern
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadcart
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_Init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NesFrameCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[186]"></a>PPU_Init</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, ppu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_main
</UL>

<P><STRONG><a name="[18a]"></a>PPU_NameTablesRead</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ppu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_MemRead
</UL>

<P><STRONG><a name="[188]"></a>PPU_NameTablesWrite</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, ppu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_MemWrite
</UL>

<P><STRONG><a name="[187]"></a>PPU_MemWrite</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, ppu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PPU_MemWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_NameTablesWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_RegWrite
</UL>

<P><STRONG><a name="[189]"></a>PPU_MemRead</STRONG> (Thumb, 178 bytes, Stack size 4 bytes, ppu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PPU_MemRead
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_NameTablesRead
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_RegRead
</UL>

<P><STRONG><a name="[18b]"></a>PPU_RegWrite</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, ppu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PPU_RegWrite &rArr; PPU_MemWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_MemWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_W
</UL>

<P><STRONG><a name="[18c]"></a>PPU_RegRead</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, ppu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PPU_RegRead &rArr; PPU_MemRead
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_MemRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_R
</UL>

<P><STRONG><a name="[182]"></a>NES_GetSpr0HitFlag</STRONG> (Thumb, 708 bytes, Stack size 60 bytes, ppu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = NES_GetSpr0HitFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NesFrameCycle
</UL>

<P><STRONG><a name="[191]"></a>NES_RenderBGLine</STRONG> (Thumb, 504 bytes, Stack size 48 bytes, ppu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NES_RenderBGLine
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderLine
</UL>

<P><STRONG><a name="[18e]"></a>NES_RenderSprPattern</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, ppu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = NES_RenderSprPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderSprite16
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderSprite88
</UL>

<P><STRONG><a name="[18d]"></a>NES_RenderSprite88</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, ppu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = NES_RenderSprite88 &rArr; NES_RenderSprPattern
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderSprPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderLine
</UL>

<P><STRONG><a name="[18f]"></a>NES_RenderSprite16</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, ppu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = NES_RenderSprite16 &rArr; NES_RenderSprPattern
</UL>
<BR>[Calls]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderSprPattern
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderLine
</UL>

<P><STRONG><a name="[190]"></a>NES_LCD_DisplayLine</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ppu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NES_LCD_DisplayLine &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderLine
</UL>

<P><STRONG><a name="[183]"></a>NES_RenderLine</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, ppu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NES_RenderLine &rArr; NES_RenderSprite88 &rArr; NES_RenderSprPattern
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_LCD_DisplayLine
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderSprite16
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderSprite88
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NES_RenderBGLine
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NesFrameCycle
</UL>

<P><STRONG><a name="[261]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_scan
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_exe
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usmart_sys_cmd_exe
</UL>

<P><STRONG><a name="[194]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[195]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[193]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[103]"></a>_printf_int_dec</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[106]"></a>_printf_int_hex</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[262]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__printf</STRONG> (Thumb, 390 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[263]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[264]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[265]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[266]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[267]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>_printf_int_common</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[19a]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[108]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[10a]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[192]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[19b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[19c]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[10c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[111]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[268]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[19d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[269]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[181]"></a>run</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, 6502.o(cpu_run))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NesFrameCycle
</UL>

<P><STRONG><a name="[184]"></a>line242NMI</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, 6502.o(cpu_run))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NesFrameCycle
</UL>

<P><STRONG><a name="[1a2]"></a>CPU_reset</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, 6502.o(cpu_run))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadcart
</UL>

<P><STRONG><a name="[198]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[185]"></a>loadcart</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, cart.o(rom_code))
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CPU_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nes_main
</UL>

<P><STRONG><a name="[13c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[1a3]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[26a]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[13b]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[1a5]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1a4]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
</UL>

<P><STRONG><a name="[1a6]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[124]"></a>SetSysClockTo72</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[123]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[163]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[161]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[15f]"></a>TI2_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[15d]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[ae]"></a>PPU_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(CPU_GPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = PPU_W &rArr; PPU_RegWrite &rArr; PPU_MemWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_RegWrite
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[a6]"></a>PPU_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(CPU_GPU))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PPU_R &rArr; PPU_RegRead &rArr; PPU_MemRead
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PPU_RegRead
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[d]"></a>_00</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VecCont
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[e]"></a>_01</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[10]"></a>_05</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[11]"></a>_06</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[12]"></a>_08</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[13]"></a>_09</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[14]"></a>_0A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[15]"></a>_0D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[16]"></a>_0E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[17]"></a>_10</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[18]"></a>_11</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[19]"></a>_15</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[1a]"></a>_16</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[1b]"></a>_18</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[1c]"></a>_19</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[1d]"></a>_1D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[1e]"></a>_1E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[1f]"></a>_20</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[20]"></a>_21</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[21]"></a>_24</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[22]"></a>_25</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[23]"></a>_26</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[24]"></a>_28</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[25]"></a>_29</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[26]"></a>_2A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[27]"></a>_2C</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[28]"></a>_2D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[29]"></a>_2E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[2a]"></a>_30</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[2b]"></a>_31</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[2c]"></a>_35</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[2d]"></a>_36</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[2e]"></a>_38</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[2f]"></a>_39</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[30]"></a>_3D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[31]"></a>_3E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[32]"></a>_40</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[33]"></a>_41</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[34]"></a>_45</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[35]"></a>_46</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[36]"></a>_48</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[37]"></a>_49</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[38]"></a>_4A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[39]"></a>_4C</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[3a]"></a>_4D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[3b]"></a>_4E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[3c]"></a>_50</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[3d]"></a>_51</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[3e]"></a>_55</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[3f]"></a>_56</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[40]"></a>_58</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[41]"></a>_59</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[42]"></a>_5D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[43]"></a>_5E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[44]"></a>_60</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[45]"></a>_61</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[46]"></a>_65</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[47]"></a>_66</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[48]"></a>_68</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[49]"></a>_69</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[4a]"></a>_6A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[4b]"></a>_6C</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[4c]"></a>_6D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[4d]"></a>_6E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[4e]"></a>_70</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[4f]"></a>_71</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[50]"></a>_75</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[51]"></a>_76</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[52]"></a>_78</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[53]"></a>_79</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[54]"></a>_7D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[55]"></a>_7E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[56]"></a>_81</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[57]"></a>_84</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[58]"></a>_85</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[59]"></a>_86</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[5a]"></a>_88</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[5b]"></a>_8A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[5c]"></a>_8C</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[5d]"></a>_8D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[5e]"></a>_8E</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[5f]"></a>_90</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[60]"></a>_91</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[61]"></a>_94</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[62]"></a>_95</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[63]"></a>_96</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[64]"></a>_98</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[65]"></a>_99</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[66]"></a>_9A</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[67]"></a>_9D</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[68]"></a>_A0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[69]"></a>_A1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[6a]"></a>_A2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[6b]"></a>_A4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[6c]"></a>_A5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[6d]"></a>_A6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[6e]"></a>_A8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[6f]"></a>_A9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[70]"></a>_AA</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[71]"></a>_AC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[72]"></a>_AD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[73]"></a>_AE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[74]"></a>_B0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[75]"></a>_B1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[76]"></a>_B4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[77]"></a>_B5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[78]"></a>_B6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[79]"></a>_B8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[7a]"></a>_B9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[7b]"></a>_BA</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[7c]"></a>_BC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[7d]"></a>_BD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[7e]"></a>_BE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[7f]"></a>_C0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[80]"></a>_C1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[81]"></a>_C4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[82]"></a>_C5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[83]"></a>_C6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[84]"></a>_C8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[85]"></a>_C9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[86]"></a>_CA</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[87]"></a>_CC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[88]"></a>_CD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[89]"></a>_CE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[8a]"></a>_D0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[8b]"></a>_D1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[8c]"></a>_D5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[8d]"></a>_D6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[8e]"></a>_D8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[8f]"></a>_D9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[90]"></a>_DD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[91]"></a>_DE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[92]"></a>_E0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[93]"></a>_E1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[94]"></a>_E4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[95]"></a>_E5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[96]"></a>_E6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[97]"></a>_E8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[98]"></a>_E9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[99]"></a>_EA</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[9a]"></a>_EC</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[9b]"></a>_ED</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[9c]"></a>_EE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[9d]"></a>_F0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[9e]"></a>_F1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[9f]"></a>_F5</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[a0]"></a>_F6</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[a1]"></a>_F8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[a2]"></a>_F9</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[a3]"></a>_FD</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[a4]"></a>_FE</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[fa]"></a>exit_run</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_run))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(cpu_run)
</UL>
<P><STRONG><a name="[1a0]"></a>VecCont</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_run))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_00
</UL>

<P><STRONG><a name="[f]"></a>_xx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(cpu_run))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[a7]"></a>IO_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_R
</UL>
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[af]"></a>IO_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[fc]"></a>dma_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[fd]"></a>joy0_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[fb]"></a>joy0_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(io_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(io_code)
</UL>
<P><STRONG><a name="[1a1]"></a>empty_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_R
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;empty_R
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_R
</UL>

<P><STRONG><a name="[a8]"></a>void</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 2]<UL><LI> 6502.o(io_code)
<LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[a5]"></a>ram_R</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[ad]"></a>ram_W</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[a9]"></a>rom_R80</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[aa]"></a>rom_RA0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[ab]"></a>rom_RC0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[ac]"></a>rom_RE0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, 6502.o(rwram_code))
<BR>[Address Reference Count : 1]<UL><LI> 6502.o(wram_globals0)
</UL>
<P><STRONG><a name="[f9]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
